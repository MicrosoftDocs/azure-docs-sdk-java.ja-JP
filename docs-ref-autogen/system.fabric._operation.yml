### YamlMime:ManagedReference
items:
  - uid: system.fabric._operation
    id: _operation
    parent: system.fabric
    children:
      - system.fabric._operation.acknowledge()
      - system.fabric._operation.getAtomicGroupId()
      - system.fabric._operation.getData()
      - system.fabric._operation.getOperationType()
      - system.fabric._operation.getSequenceNumber()
    href: system.fabric._operation.yml
    langs:
      - java
    name: Operation
    nameWithType: Operation
    fullName: system.fabric.Operation
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 16
    package: system.fabric
    summary: "<p>\r\n\r\n  <b>注釈:</b>\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>セカンダリ レプリカに配信される状態の変化を説明する基本インターフェイスです。 含まれている、 <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync (OperationData、SequenceNumber、system.fabric.CancellationToken)</xref>とシーケンス番号およびその他の情報を識別します。 </p>"
    syntax:
      content: public interface Operation
  - uid: system.fabric._operation.acknowledge()
    id: acknowledge()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: acknowledge()
    nameWithType: Operation.acknowledge()
    fullName: void system.fabric.Operation.acknowledge()
    overload: system.fabric._operation.acknowledge*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 77
    package: system.fabric
    summary: "<p>この操作が、セカンダリ レプリカに正常に適用されたことを確認します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>取得したときに、サービスはこのメソッドを呼び出す必要があります、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>複製物作成会社と正常にローカル ストアに適用します。 永続化されたサービスでは、このメソッドを呼び出すことが必須ため、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>を実装するその他のオブジェクトを解放しない<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>です。 揮発性サービスでは、レプリケーターに暗黙的に承認されると operations 値の設定でそれ以外の場合は構成しない限り、受信したとき<xref uid=\"system.fabric._replicator_settings.isRequireServiceAck()\" data-throw-if-not-resolved=\"false\">system.fabric.ReplicatorSettings#isRequireServiceAck()</xref> true に設定します。 プライマリ レプリカを受け取る前に、レプリカのクォーラム操作を確認する必要があります、 <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync (OperationData、SequenceNumber、system.fabric.CancellationToken)</xref>操作完了の応答。 </p>"
    syntax:
      content: public void acknowledge()
  - uid: system.fabric._operation.getAtomicGroupId()
    id: getAtomicGroupId()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getAtomicGroupId()
    nameWithType: Operation.getAtomicGroupId()
    fullName: long system.fabric.Operation.getAtomicGroupId()
    overload: system.fabric._operation.getAtomicGroupId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 52
    package: system.fabric
    summary: |-
      <p>このオブジェクトを実装している場合、分割不可能なグループを識別<xref uid="" data-throw-if-not-resolved="false">system.fabric.Operation</xref>アトミック グループの一部です。 分割不可能なグループはサービスがサービス グループの一部であるときにのみ使用できます。</p>
      <p></p>
    syntax:
      content: public long getAtomicGroupId()
      return:
        type: 0364520f
        description: <p>長さを返します。 </p>
  - uid: system.fabric._operation.getData()
    id: getData()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getData()
    nameWithType: Operation.getData()
    fullName: OperationData system.fabric.Operation.getData()
    overload: system.fabric._operation.getData*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 59
    package: system.fabric
    summary: |-
      <p>取得、 <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>プライマリ レプリカによって提供されます。</p>
      <p></p>
    syntax:
      content: public OperationData getData()
      return:
        type: system.fabric._operation_data
        description: <p>返します<xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>です。 </p>
  - uid: system.fabric._operation.getOperationType()
    id: getOperationType()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getOperationType()
    nameWithType: Operation.getOperationType()
    fullName: OperationType system.fabric.Operation.getOperationType()
    overload: system.fabric._operation.getOperationType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 28
    package: system.fabric
    summary: "<p>この操作の種類を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>、 <xref uid=\"system.fabric._operation_type\" data-throw-if-not-resolved=\"false\">system.fabric.OperationType</xref>操作の種類を示します。 \"Normal\"操作は、コピーまたはレプリケーション ストリームの一部としてグループ化のサービスによって送信されるこれらの操作です。 その他の種類の操作は、サービス グループに固有の管理操作を表します。 </p>"
    syntax:
      content: public OperationType getOperationType()
      return:
        type: system.fabric._operation_type
        description: <p>返します<xref uid="system.fabric._operation_type" data-throw-if-not-resolved="false">system.fabric.OperationType</xref>です。 </p>
  - uid: system.fabric._operation.getSequenceNumber()
    id: getSequenceNumber()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    langs:
      - java
    name: getSequenceNumber()
    nameWithType: Operation.getSequenceNumber()
    fullName: long system.fabric.Operation.getSequenceNumber()
    overload: system.fabric._operation.getSequenceNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      startLine: 43
    package: system.fabric
    summary: "<p>この操作のシーケンス番号を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>シーケンス番号がの一部として提供される、 <xref uid=\"system.fabric._operation.getSequenceNumber()\" data-throw-if-not-resolved=\"false\">system.fabric.Operation#getSequenceNumber()</xref>レプリケーション ストリームから受信した操作 (<xref uid=\"system.fabric._state_replicator.getReplicationStream()\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#getReplicationStream()</xref>) からは、プライマリ レプリカを受信すると、同じシーケンス番号は<xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync (OperationData、SequenceNumber、system.fabric.CancellationToken)</xref>メソッドです。 </p>"
    syntax: &ref_1
      content: public long getSequenceNumber()
      return:
        type: 0364520f
        description: <p>長さを返します。 </p>
references:
  - uid: system.fabric._operation.getOperationType*
    name: getOperationType
    nameWithType: Operation.getOperationType
    fullName: OperationType system.fabric.Operation.getOperationType
    package: system.fabric
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: system.fabric._operation.getSequenceNumber*
    name: getSequenceNumber
    nameWithType: Operation.getSequenceNumber
    fullName: long system.fabric.Operation.getSequenceNumber
    package: system.fabric
  - uid: system.fabric._operation.getAtomicGroupId*
    name: getAtomicGroupId
    nameWithType: Operation.getAtomicGroupId
    fullName: long system.fabric.Operation.getAtomicGroupId
    package: system.fabric
  - uid: system.fabric._operation.getData*
    name: getData
    nameWithType: Operation.getData
    fullName: OperationData system.fabric.Operation.getData
    package: system.fabric
  - uid: system.fabric._operation.acknowledge*
    name: acknowledge
    nameWithType: Operation.acknowledge
    fullName: void system.fabric.Operation.acknowledge
    package: system.fabric
  - uid: system.fabric._j_operation
  - uid: system.fabric._operation_type
    parent: system.fabric
    href: system.fabric._operation_type.yml
    name: OperationType
    nameWithType: OperationType
    fullName: system.fabric.OperationType
    type: Enum
    syntax:
      content: public enum OperationType
  - uid: system.fabric._operation.getSequenceNumber()
    parent: system.fabric._operation
    href: system.fabric._operation.yml
    name: getSequenceNumber()
    nameWithType: Operation.getSequenceNumber()
    fullName: long system.fabric.Operation.getSequenceNumber()
    type: Method
    summary: "<p>この操作のシーケンス番号を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>シーケンス番号がの一部として提供される、 <xref uid=\"system.fabric._operation.getSequenceNumber()\" data-throw-if-not-resolved=\"false\">system.fabric.Operation#getSequenceNumber()</xref>レプリケーション ストリームから受信した操作 (<xref uid=\"system.fabric._state_replicator.getReplicationStream()\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#getReplicationStream()</xref>) からは、プライマリ レプリカを受信すると、同じシーケンス番号は<xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync (OperationData、SequenceNumber、system.fabric.CancellationToken)</xref>メソッドです。 </p>"
    syntax: *ref_1
  - uid: system.fabric._state_replicator.getReplicationStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: getReplicationStream()
    nameWithType: StateReplicator.getReplicationStream()
    fullName: OperationStream system.fabric.StateReplicator.getReplicationStream()
    type: Method
    summary: <p>レプリケーション ストリームを取得します。 </p>
    syntax:
      content: public OperationStream getReplicationStream()
      return:
        type: system.fabric._operation_stream
        description: '<p>ReplicationStream 実装<xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>です。 含まれています、ReplicationStream <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>を実装するオブジェクト<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。 オブジェクトが経由でプライマリ レプリカによって提供される<xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator #replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>です。 一般に、セカンダリ レプリカを送信する必要があります<xref uid="" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>です。 Service Fabric では、これを行うサービスは必要ありません、一般にサービスがすべて転送<xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>コピーからオブジェクトが最初に、ストリームし、レプリケーション ストリームからの操作を転送します。 同時に両方のコピーからの転送がサポートされていますが、増加状態を適用する際の複雑さは正しく更新し、高度なサービスにのみ推奨されます。 ストリームが空ときに、返された<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>メソッドは null です。 </p>'
  - uid: 'system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: 'replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<SequenceNumber> system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: <p>セカンダリ レプリカにプライマリ レプリカから状態の変更をレプリケートし、それらの状態の変更が適用されているクォーラムの受信確認を受信します。 </p>
    syntax:
      content: 'public CompletableFuture<SequenceNumber> replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: operationData
          type: system.fabric._operation_data
          description: <p>プライマリ レプリカは、レプリケートする必要がある状態の変化を表します。 </p>
        - id: sequenceNumber
          type: system.fabric._sequence_number
          description: <p>Long、操作の LSN です。 これは、タスクによって返される同じ値であることに注意してください。 Out パラメーターとして指定することは、ローカル記録するには、タスクが終了する場合はコミットの準備をするサービスに便利です。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: <p>失われているレプリカの書き込みクォーラムです。 操作を取り消す必要がある通知を送信するために使用します。 キャンセルが推奨でが取り消された場合でもは、操作を完了も可能性がありますに注意してください。 </p>
      return:
        type: 9cdf14d0system.fabric._sequence_numbera08ddfce
        description: <p>Completable の将来の long 型で、操作の LSN を返します。 </p>
  - uid: system.fabric._operation_data
    parent: system.fabric
    href: system.fabric._operation_data.yml
    name: OperationData
    nameWithType: OperationData
    fullName: system.fabric.OperationData
    type: Class
    syntax:
      content: public class OperationData
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>高可用性と信頼性のレプリケート状態です。 </p>\n<p>\r\n\r\n  <b>注釈:</b>の既定の実装を提供、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>、 <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>、および<xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator</xref>インターフェイスの実装と共に、ユーザーのサービスが使用できる、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>インターフェイスです。 インスタンス、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスが経由で取得した、 <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator (system.fabric.StateProvider、system.fabric.ReplicatorSettings)</xref>メソッドにキャストできる<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>使用します。 </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._replicator_settings.isRequireServiceAck()
    parent: system.fabric._replicator_settings
    href: system.fabric._replicator_settings.yml
    name: isRequireServiceAck()
    nameWithType: ReplicatorSettings.isRequireServiceAck()
    fullName: boolean system.fabric.ReplicatorSettings.isRequireServiceAck()
    type: Method
    summary: "<p>により、サービスを呼び出すオプティミスティックの受信確認要求することで非永続的なサービスの操作の<xref uid=\"system.fabric._operation.acknowledge()\" data-throw-if-not-resolved=\"false\">system.fabric.Operation#acknowledge()</xref>次の操作をポンプする前にします。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的な受信確認を必要とする非永続的サービスはオプティミスティックの受信確認して、操作を防ぐために True にこのプロパティを設定することができます、<xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">レプリケーター</xref>です。 この設定は、永続的なサービスの影響を与えません。 既定値は false です。 </p>"
    syntax:
      content: public boolean isRequireServiceAck()
      return:
        type: 4fc6e284
        description: <p>true の場合、オプティミスティックの受信確認の非永続的なサービス操作のそれ以外の場合は false。 </p>