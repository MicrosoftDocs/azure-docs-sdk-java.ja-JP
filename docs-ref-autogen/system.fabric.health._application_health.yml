### YamlMime:ManagedReference
items:
  - uid: system.fabric.health._application_health
    id: _application_health
    parent: system.fabric.health
    children:
      - system.fabric.health._application_health.getApplicationName()
      - system.fabric.health._application_health.getDeployedApplicationHealthState()
      - system.fabric.health._application_health.getServiceHealthState()
    href: system.fabric.health._application_health.yml
    langs:
      - java
    name: ApplicationHealth
    nameWithType: ApplicationHealth
    fullName: system.fabric.health.ApplicationHealth
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
      startLine: 10
    package: system.fabric.health
    summary: '<p>によって返されるアプリケーションの正常性を示します<xref uid="system.fabric._health_client.getApplicationHealthAsync(URI)" data-throw-if-not-resolved="false">system.fabric.HealthClient#getApplicationHealthAsync</xref></p>'
    syntax:
      content: public class ApplicationHealth extends EntityHealth
    inheritance:
      - java.lang.Object
      - system.fabric.health._entity_health
    inheritedMembers:
      - 'system.fabric.health._entity_health.EntityHealth(int,List<HealthEvent>,List<HealthEvaluation>)'
      - system.fabric.health._entity_health.getAggregatedHealthState()
      - system.fabric.health._entity_health.getHealthEvents()
      - system.fabric.health._entity_health.getUnhealthyEvaluations()
  - uid: system.fabric.health._application_health.getApplicationName()
    id: getApplicationName()
    parent: system.fabric.health._application_health
    href: system.fabric.health._application_health.yml
    langs:
      - java
    name: getApplicationName()
    nameWithType: ApplicationHealth.getApplicationName()
    fullName: URI system.fabric.health.ApplicationHealth.getApplicationName()
    overload: system.fabric.health._application_health.getApplicationName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
      startLine: 44
    package: system.fabric.health
    summary: |-
      <p>アプリケーションを一意に識別するアプリケーション名を取得します。</p>
      <p></p>
    syntax:
      content: public URI getApplicationName()
      return:
        type: '62304784'
        description: <p>アプリケーションの名前 URI </p>
  - uid: system.fabric.health._application_health.getDeployedApplicationHealthState()
    id: getDeployedApplicationHealthState()
    parent: system.fabric.health._application_health
    href: system.fabric.health._application_health.yml
    langs:
      - java
    name: getDeployedApplicationHealthState()
    nameWithType: ApplicationHealth.getDeployedApplicationHealthState()
    fullName: List<DeployedApplicationHealthState> system.fabric.health.ApplicationHealth.getDeployedApplicationHealthState()
    overload: system.fabric.health._application_health.getDeployedApplicationHealthState*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
      startLine: 79
    package: system.fabric.health
    summary: |-
      <p>Health store に検出されるように、現在のアプリケーションの展開済みアプリケーションの正常性状態を取得します。 </p>
      <p>health store に検出されるよう、現在のアプリケーション用のアプリケーションを展開します。 考慮するアプリケーション展開のみ、 <xref uid="system.fabric._application_health_query_description.getDeployedApplicationHealthStatesFilter()" data-throw-if-not-resolved="false">system.fabric.ApplicationHealthQueryDescription#getDeployedApplicationHealthStatesFilter</xref> (指定した場合) が返されます。 入力のフィルターが指定されていない場合は、配置されているすべてのアプリケーションが返されます。 </p>
      <p>配置されているすべてのアプリケーションを評価して、アプリケーションで集計された正常性を決定します。 </p>
      <p></p>
    syntax:
      content: public List<DeployedApplicationHealthState> getDeployedApplicationHealthState()
      return:
        type: 5618da2dsystem.fabric.health._deployed_application_health_statea08ddfce
        description: <p>展開済みのアプリケーションの正常性状態の一覧です。 </p>
  - uid: system.fabric.health._application_health.getServiceHealthState()
    id: getServiceHealthState()
    parent: system.fabric.health._application_health
    href: system.fabric.health._application_health.yml
    langs:
      - java
    name: getServiceHealthState()
    nameWithType: ApplicationHealth.getServiceHealthState()
    fullName: List<ServiceHealthState> system.fabric.health.ApplicationHealth.getServiceHealthState()
    overload: system.fabric.health._application_health.getServiceHealthState*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
      startLine: 59
    package: system.fabric.health
    summary: |-
      <p>Health store に検出されるように、現在のアプリケーションのサービスのヘルス状態を取得します。 </p>
      <p>その点をサービスのみ、 <xref uid="system.fabric._application_health_query_description.getServiceHealthStatesFilter()" data-throw-if-not-resolved="false">system.fabric.ApplicationHealthQueryDescription#getServiceHealthStatesFilter</xref> (指定した場合) が返されます。 入力のフィルターが指定されていない場合は、すべてのサービスが返されます。 すべてのサービスを評価して、アプリケーションで集計された正常性を決定します。 </p>
      <p></p>
    syntax:
      content: public List<ServiceHealthState> getServiceHealthState()
      return:
        type: 5618da2dsystem.fabric.health._service_health_statea08ddfce
        description: <p>サービスの正常性状態の一覧 </p>
references:
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: system.fabric.health._application_health.getApplicationName*
    name: getApplicationName
    nameWithType: ApplicationHealth.getApplicationName
    fullName: URI system.fabric.health.ApplicationHealth.getApplicationName
    package: system.fabric.health
  - uid: 5618da2dsystem.fabric.health._service_health_statea08ddfce
    spec.java:
      - name: List<
        fullName: List<
      - uid: system.fabric.health._service_health_state
        name: ServiceHealthState
        fullName: system.fabric.health.ServiceHealthState
        href: system.fabric.health._service_health_state.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric.health._application_health.getServiceHealthState*
    name: getServiceHealthState
    nameWithType: ApplicationHealth.getServiceHealthState
    fullName: List<ServiceHealthState> system.fabric.health.ApplicationHealth.getServiceHealthState
    package: system.fabric.health
  - uid: 5618da2dsystem.fabric.health._deployed_application_health_statea08ddfce
    spec.java:
      - name: List<
        fullName: List<
      - uid: system.fabric.health._deployed_application_health_state
        name: DeployedApplicationHealthState
        fullName: system.fabric.health.DeployedApplicationHealthState
        href: system.fabric.health._deployed_application_health_state.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric.health._application_health.getDeployedApplicationHealthState*
    name: getDeployedApplicationHealthState
    nameWithType: ApplicationHealth.getDeployedApplicationHealthState
    fullName: List<DeployedApplicationHealthState> system.fabric.health.ApplicationHealth.getDeployedApplicationHealthState
    package: system.fabric.health
  - uid: 'system.fabric.health._entity_health.EntityHealth(int,List<HealthEvent>,List<HealthEvaluation>)'
    parent: system.fabric.health._entity_health
    href: system.fabric.health._entity_health.yml
    name: 'EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)'
    nameWithType: 'EntityHealth.EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)'
    fullName: 'system.fabric.health.EntityHealth.EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)'
    type: Constructor
    syntax:
      content: 'protected EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)'
      parameters:
        - id: aggregatedHealthState
          type: f75371fa
        - id: healthEvents
          type: 5618da2dsystem.fabric.health._health_eventa08ddfce
        - id: unhealthyEvaluations
          type: 5618da2dsystem.fabric.health._health_evaluationa08ddfce
  - uid: system.fabric.health._entity_health.getAggregatedHealthState()
    parent: system.fabric.health._entity_health
    href: system.fabric.health._entity_health.yml
    name: getAggregatedHealthState()
    nameWithType: EntityHealth.getAggregatedHealthState()
    fullName: HealthState system.fabric.health.EntityHealth.getAggregatedHealthState()
    type: Method
    summary: |-
      <p>エンティティで集計された正常性状態を取得します。</p>
      <p></p>
    syntax:
      content: public HealthState getAggregatedHealthState()
      return:
        type: system.fabric.health._health_state
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric.health._health_state\" data-throw-if-not-resolved=\"false\">system.fabric.health.HealthState</xref>に基づいて Health Manager によって計算された集計された正常性状態を表す (存在する場合)、エンティティとその子でイベントを報告し、正常性ポリシーを必要に応じて。 </p>"
  - uid: system.fabric.health._entity_health.getHealthEvents()
    parent: system.fabric.health._entity_health
    href: system.fabric.health._entity_health.yml
    name: getHealthEvents()
    nameWithType: EntityHealth.getHealthEvents()
    fullName: List<HealthEvent> system.fabric.health.EntityHealth.getHealthEvents()
    type: Method
    summary: "<p>エンティティで報告される正常性イベントを取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>正常性イベントは、正常性ストアに送信される正常性レポートをに基づいて作成されます。 正常性ストアによって追加された追加のメタデータが含まれます。 </p>"
    syntax:
      content: public List<HealthEvent> getHealthEvents()
      return:
        type: 5618da2dsystem.fabric.health._health_eventa08ddfce
        description: <p>エンティティの正常性イベントが報告されました。 </p>
  - uid: system.fabric.health._entity_health.getUnhealthyEvaluations()
    parent: system.fabric.health._entity_health
    href: system.fabric.health._entity_health.yml
    name: getUnhealthyEvaluations()
    nameWithType: EntityHealth.getUnhealthyEvaluations()
    fullName: List<HealthEvaluation> system.fabric.health.EntityHealth.getUnhealthyEvaluations()
    type: Method
    summary: |-
      <p>現在の集計された正常性状態が正常性マネージャーによってに返された理由を示す異常な評価を取得します。</p>
      <p></p>
    syntax:
      content: public List<HealthEvaluation> getUnhealthyEvaluations()
      return:
        type: 5618da2dsystem.fabric.health._health_evaluationa08ddfce
        description: <p>現在の集計された正常性状態が正常性マネージャーによってに返された理由を説明する異常な評価。 </p>
  - uid: system.fabric.health._entity_health
    parent: system.fabric.health
    href: system.fabric.health._entity_health.yml
    name: EntityHealth
    nameWithType: EntityHealth
    fullName: system.fabric.health.EntityHealth
    type: Class
    summary: <p>関連するクラスをすべてのエンティティのヘルスの基本クラスを表します。 </p>
    syntax:
      content: public class EntityHealth
  - uid: system.fabric.health._service_health_state
    parent: system.fabric.health
    href: system.fabric.health._service_health_state.yml
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: system.fabric.health.ServiceHealthState
    type: Class
    summary: <p>サービスの識別子とその集計された正常性状態を含むサービスのヘルス状態を表します。 </p>
    syntax:
      content: public class ServiceHealthState
  - uid: system.fabric.health._deployed_application_health_state
    parent: system.fabric.health
    href: system.fabric.health._deployed_application_health_state.yml
    name: DeployedApplicationHealthState
    nameWithType: DeployedApplicationHealthState
    fullName: system.fabric.health.DeployedApplicationHealthState
    type: Class
    summary: <p>エンティティの識別子を含む配置のアプリケーションの正常性状態と、集計された正常性状態を表します。 </p>
    syntax:
      content: public class DeployedApplicationHealthState
  - uid: system.fabric.health._health_event
    parent: system.fabric.health
    href: system.fabric.health._health_event.yml
    name: HealthEvent
    nameWithType: HealthEvent
    fullName: system.fabric.health.HealthEvent
    type: Class
    summary: <p>A <xref uid="system.fabric.health._health_event" data-throw-if-not-resolved="false">HealthEvent</xref>オブジェクトは ReportHealth API を使用してエンティティのヘルスをレポート中に使用される正常性の情報を含む構造体 </p>
    syntax:
      content: public class HealthEvent
  - uid: system.fabric.health._health_evaluation
    parent: system.fabric.health
    href: system.fabric.health._health_evaluation.yml
    name: HealthEvaluation
    nameWithType: HealthEvaluation
    fullName: system.fabric.health.HealthEvaluation
    type: Class
    summary: <p>データとエンティティのヘルスを評価する正常性ストアによって使用されるアルゴリズムを記述する正常性評価を表します。 </p>
    syntax:
      content: public class HealthEvaluation
  - uid: system.fabric._application_health_query_description.getServiceHealthStatesFilter()
    parent: system.fabric._application_health_query_description
    href: system.fabric._application_health_query_description.yml
    name: getServiceHealthStatesFilter()
    nameWithType: ApplicationHealthQueryDescription.getServiceHealthStatesFilter()
    fullName: ServiceHealthStatesFilter system.fabric.ApplicationHealthQueryDescription.getServiceHealthStatesFilter()
    type: Method
    summary: "<p>フィルターを取得<xref uid=\"system.fabric.health._service_health_state\" data-throw-if-not-resolved=\"false\">system.fabric.health.ServiceHealthState</xref>子。 フィルターに一致する子のみが返されます。 すべての子は、アプリケーションで集計された正常性状態の評価に使用されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>フィルターに一致する子のみが返されます。 すべての子は、アプリケーションで集計された正常性状態の評価に使用されます。 フィルターが指定されていない場合は、アプリケーションのサービスのすべての子が返されます。 </p>"
    syntax:
      content: public ServiceHealthStatesFilter getServiceHealthStatesFilter()
      return:
        type: system.fabric._service_health_states_filter
        description: <p>フィルター <xref uid="system.fabric.health._service_health_state" data-throw-if-not-resolved="false">system.fabric.health.ServiceHealthState</xref>子。 </p>
  - uid: system.fabric._application_health_query_description.getDeployedApplicationHealthStatesFilter()
    parent: system.fabric._application_health_query_description
    href: system.fabric._application_health_query_description.yml
    name: getDeployedApplicationHealthStatesFilter()
    nameWithType: ApplicationHealthQueryDescription.getDeployedApplicationHealthStatesFilter()
    fullName: DeployedApplicationHealthStatesFilter system.fabric.ApplicationHealthQueryDescription.getDeployedApplicationHealthStatesFilter()
    type: Method
    summary: "<p>フィルターを取得<xref uid=\"system.fabric.health._deployed_application_health_state\" data-throw-if-not-resolved=\"false\">system.fabric.health.DeployedApplicationHealthState</xref>子。 フィルターに一致する子のみが返されます。 すべての子は、アプリケーションで集計された正常性状態の評価に使用されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>フィルターに一致する子のみが返されます。 すべての子は、アプリケーションで集計された正常性状態の評価に使用されます。 フィルターが指定されていない場合は、アプリケーションの展開済みアプリケーションのすべての子が返されます。 </p>"
    syntax:
      content: public DeployedApplicationHealthStatesFilter getDeployedApplicationHealthStatesFilter()
      return:
        type: system.fabric._deployed_application_health_states_filter
        description: <p>フィルター <xref uid="system.fabric._deployed_application_health_states_filter" data-throw-if-not-resolved="false">system.fabric.DeployedApplicationHealthStatesFilter</xref>子。 </p>
  - uid: system.fabric._health_client.getApplicationHealthAsync(URI)
    parent: system.fabric._health_client
    href: system.fabric._health_client.yml
    name: getApplicationHealthAsync(URI applicationName)
    nameWithType: HealthClient.getApplicationHealthAsync(URI applicationName)
    fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(URI applicationName)
    type: Method
    summary: |-
      <p>指定した Service Fabric アプリケーションの正常性を非同期に取得します。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(URI applicationName)
      parameters:
        - id: applicationName
          type: '62304784'
          description: <p>Service Fabric アプリケーションの URI。 </p>
      return:
        type: 9cdf14d0system.fabric.health._application_healtha08ddfce
        description: <p>指定した Service Fabric アプリケーションの正常性。 </p>