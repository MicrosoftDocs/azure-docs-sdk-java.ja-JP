### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.servicebus._message_session
    id: _message_session
    parent: com.microsoft.azure.servicebus
    children:
      - com.microsoft.azure.servicebus._message_session.getLockedUntilUtc()
      - com.microsoft.azure.servicebus._message_session.getRequestedSessionId()
      - com.microsoft.azure.servicebus._message_session.getSessionId()
      - com.microsoft.azure.servicebus._message_session.getState()
      - com.microsoft.azure.servicebus._message_session.getStateAsync()
      - com.microsoft.azure.servicebus._message_session.isBrowsableSession()
      - com.microsoft.azure.servicebus._message_session.isSessionReceiver()
      - com.microsoft.azure.servicebus._message_session.renewSessionLock()
      - com.microsoft.azure.servicebus._message_session.renewSessionLockAsync()
      - 'com.microsoft.azure.servicebus._message_session.setState(byte [])'
      - 'com.microsoft.azure.servicebus._message_session.setStateAsync(byte [])'
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: MessageSession
    nameWithType: MessageSession
    fullName: com.microsoft.azure.servicebus.MessageSession
    type: Class
    source:
      remote: &ref_0
        path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
        branch: master
        repo: 'https://github.com/Azure/azure-service-bus-java'
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 16
    package: com.microsoft.azure.servicebus
    syntax:
      content: public class MessageSession implements IMessageSession
    inheritance:
      - java.lang.Object
      - com.microsoft.azure.servicebus.primitives._client_entity
      - com.microsoft.azure.servicebus.InitializableEntity
      - com.microsoft.azure.servicebus.MessageReceiver
    inheritedMembers:
      - com.microsoft.azure.servicebus._message_receiver.abandon(UUID)
      - 'com.microsoft.azure.servicebus._message_receiver.abandon(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus._message_receiver.abandonAsync(UUID)
      - 'com.microsoft.azure.servicebus._message_receiver.abandonAsync(UUID,Map<String, Object>)'
      - 'com.microsoft.azure.servicebus.primitives._client_entity.ClientEntity(final String,final ClientEntity)'
      - com.microsoft.azure.servicebus.primitives._client_entity.close()
      - com.microsoft.azure.servicebus._i_closeable.close()
      - com.microsoft.azure.servicebus.primitives._client_entity.closeAsync()
      - com.microsoft.azure.servicebus._i_closeable.closeAsync()
      - com.microsoft.azure.servicebus._message_receiver.complete(UUID)
      - com.microsoft.azure.servicebus._message_receiver.completeAsync(UUID)
      - com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID)
      - 'com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID,Map<String, Object>)'
      - 'com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID,String,String)'
      - 'com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID,String,String,Map<String, Object>)'
      - com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID)
      - 'com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID,Map<String, Object>)'
      - 'com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID,String,String)'
      - 'com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)'
      - com.microsoft.azure.servicebus._message_receiver.defer(UUID)
      - 'com.microsoft.azure.servicebus._message_receiver.defer(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus._message_receiver.deferAsync(UUID)
      - 'com.microsoft.azure.servicebus._message_receiver.deferAsync(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus.primitives._client_entity.finalize()
      - com.microsoft.azure.servicebus.primitives._client_entity.getClientId()
      - com.microsoft.azure.servicebus._message_receiver.getEntityPath()
      - com.microsoft.azure.servicebus._message_receiver.getInternalReceiver()
      - com.microsoft.azure.servicebus.primitives._client_entity.getIsClosed()
      - com.microsoft.azure.servicebus.primitives._client_entity.getIsClosingOrClosed()
      - com.microsoft.azure.servicebus._message_receiver.getPrefetchCount()
      - com.microsoft.azure.servicebus._message_receiver.getReceiveMode()
      - 'com.microsoft.azure.servicebus._initializable_entity.InitializableEntity(String,ClientEntity)'
      - com.microsoft.azure.servicebus._message_receiver.onClose()
      - com.microsoft.azure.servicebus._message_receiver.peek()
      - com.microsoft.azure.servicebus._message_receiver.peek(long)
      - com.microsoft.azure.servicebus._message_receiver.peekAsync()
      - com.microsoft.azure.servicebus._message_receiver.peekAsync(long)
      - com.microsoft.azure.servicebus._message_receiver.peekBatch(int)
      - 'com.microsoft.azure.servicebus._message_receiver.peekBatch(long,int)'
      - com.microsoft.azure.servicebus._message_receiver.peekBatchAsync(int)
      - 'com.microsoft.azure.servicebus._message_receiver.peekBatchAsync(long,int)'
      - com.microsoft.azure.servicebus._message_receiver.receive()
      - com.microsoft.azure.servicebus._message_receiver.receive(Duration)
      - com.microsoft.azure.servicebus._message_receiver.receiveAsync()
      - com.microsoft.azure.servicebus._message_receiver.receiveAsync(Duration)
      - com.microsoft.azure.servicebus._message_receiver.receiveBatch(int)
      - 'com.microsoft.azure.servicebus._message_receiver.receiveBatch(int,Duration)'
      - com.microsoft.azure.servicebus._message_receiver.receiveBatchAsync(int)
      - 'com.microsoft.azure.servicebus._message_receiver.receiveBatchAsync(int,Duration)'
      - com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessage(long)
      - com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessageAsync(long)
      - com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessageBatch(Collection<Long>)
      - com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
      - com.microsoft.azure.servicebus._message_receiver.renewMessageLock(IMessage)
      - com.microsoft.azure.servicebus._message_receiver.renewMessageLockAsync(IMessage)
      - com.microsoft.azure.servicebus._message_receiver.renewMessageLockBatch(Collection<? extends IMessage>)
      - com.microsoft.azure.servicebus._message_receiver.renewMessageLockBatchAsync(Collection<? extends IMessage>)
      - com.microsoft.azure.servicebus.primitives._client_entity.setClosed()
      - com.microsoft.azure.servicebus._message_receiver.setPrefetchCount(int)
      - com.microsoft.azure.servicebus.primitives._client_entity.throwIfClosed(Throwable)
  - uid: com.microsoft.azure.servicebus._message_session.getLockedUntilUtc()
    id: getLockedUntilUtc()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: getLockedUntilUtc()
    nameWithType: MessageSession.getLockedUntilUtc()
    fullName: Instant com.microsoft.azure.servicebus.MessageSession.getLockedUntilUtc()
    overload: com.microsoft.azure.servicebus._message_session.getLockedUntilUtc*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 45
    package: com.microsoft.azure.servicebus
    syntax:
      content: public Instant getLockedUntilUtc()
      return:
        type: 328f8254
        description: '<p><span data-ttu-id="aabdc-101">時刻を取得するセッションで識別される<xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>はこのクライアント用になるまでにロックします。</span><span class="sxs-lookup"><span data-stu-id="aabdc-101">Gets the time that the session identified by <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref> is locked until for this client.</span></span> </p>'
    overridden: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc()
  - uid: com.microsoft.azure.servicebus._message_session.getRequestedSessionId()
    id: getRequestedSessionId()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: getRequestedSessionId()
    nameWithType: MessageSession.getRequestedSessionId()
    fullName: String com.microsoft.azure.servicebus.MessageSession.getRequestedSessionId()
    overload: com.microsoft.azure.servicebus._message_session.getRequestedSessionId*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 40
    package: com.microsoft.azure.servicebus
    syntax:
      content: protected String getRequestedSessionId()
      return:
        type: '26831127'
  - uid: com.microsoft.azure.servicebus._message_session.getSessionId()
    id: getSessionId()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: getSessionId()
    nameWithType: MessageSession.getSessionId()
    fullName: String com.microsoft.azure.servicebus.MessageSession.getSessionId()
    overload: com.microsoft.azure.servicebus._message_session.getSessionId*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 80
    package: com.microsoft.azure.servicebus
    syntax:
      content: public String getSessionId()
      return:
        type: '26831127'
        description: <p><span data-ttu-id="aabdc-102">セッション Id を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-102">Gets the SessionId.</span></span> </p>
    overridden: com.microsoft.azure.servicebus._i_message_session.getSessionId()
  - uid: com.microsoft.azure.servicebus._message_session.getState()
    id: getState()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: getState()
    nameWithType: MessageSession.getState()
    fullName: 'byte [] com.microsoft.azure.servicebus.MessageSession.getState()'
    overload: com.microsoft.azure.servicebus._message_session.getState*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 70
    package: com.microsoft.azure.servicebus
    summary: |-
      <p><span data-ttu-id="aabdc-103">セッション状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-103">Gets the session state.</span></span></p>
      <p></p>
    syntax:
      content: 'public byte [] getState()'
      return:
        type: ccd9418d
        description: <p><span data-ttu-id="aabdc-104">セッションの状態</span><span class="sxs-lookup"><span data-stu-id="aabdc-104">The session state</span></span> </p>
    overridden: com.microsoft.azure.servicebus._i_message_session.getState()
    exceptions:
      - type: 8256ba40
        description: <p><span data-ttu-id="aabdc-105">現在のスレッドが待機中に中断された場合</span><span class="sxs-lookup"><span data-stu-id="aabdc-105">if the current thread was interrupted while waiting</span></span> </p>
      - type: 73fec9fb
        description: <p><span data-ttu-id="aabdc-106">場合は失敗の状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-106">if get state failed.</span></span> </p>
  - uid: com.microsoft.azure.servicebus._message_session.getStateAsync()
    id: getStateAsync()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: getStateAsync()
    nameWithType: MessageSession.getStateAsync()
    fullName: 'CompletableFuture<byte[]> com.microsoft.azure.servicebus.MessageSession.getStateAsync()'
    overload: com.microsoft.azure.servicebus._message_session.getStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 75
    package: com.microsoft.azure.servicebus
    summary: <p><span data-ttu-id="aabdc-107">非同期的に、セッションの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-107">Asynchronously gets the session state.</span></span> </p>
    syntax:
      content: 'public CompletableFuture<byte[]> getStateAsync()'
      return:
        type: 5fe2dfa4
        description: <p><span data-ttu-id="aabdc-108">保留中のセッション状態の取得を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-108">a CompletableFuture representing the pending session state retrieving.</span></span> </p>
    overridden: com.microsoft.azure.servicebus._i_message_session.getStateAsync()
    see:
      - type: com.microsoft.azure.servicebus._i_message_session.getState()
        description: '<span data-ttu-id="aabdc-109">IMessageSession::getState</span><span class="sxs-lookup"><span data-stu-id="aabdc-109">IMessageSession::getState</span></span>'
  - uid: com.microsoft.azure.servicebus._message_session.isBrowsableSession()
    id: isBrowsableSession()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: isBrowsableSession()
    nameWithType: MessageSession.isBrowsableSession()
    fullName: boolean com.microsoft.azure.servicebus.MessageSession.isBrowsableSession()
    overload: com.microsoft.azure.servicebus._message_session.isBrowsableSession*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 35
    package: com.microsoft.azure.servicebus
    syntax:
      content: protected boolean isBrowsableSession()
      return:
        type: 4fc6e284
  - uid: com.microsoft.azure.servicebus._message_session.isSessionReceiver()
    id: isSessionReceiver()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: isSessionReceiver()
    nameWithType: MessageSession.isSessionReceiver()
    fullName: final boolean com.microsoft.azure.servicebus.MessageSession.isSessionReceiver()
    overload: com.microsoft.azure.servicebus._message_session.isSessionReceiver*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 30
    package: com.microsoft.azure.servicebus
    syntax:
      content: protected final boolean isSessionReceiver()
      return:
        type: 4dda0764
  - uid: com.microsoft.azure.servicebus._message_session.renewSessionLock()
    id: renewSessionLock()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: renewSessionLock()
    nameWithType: MessageSession.renewSessionLock()
    fullName: void com.microsoft.azure.servicebus.MessageSession.renewSessionLock()
    overload: com.microsoft.azure.servicebus._message_session.renewSessionLock*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 50
    package: com.microsoft.azure.servicebus
    summary: |-
      <p><span data-ttu-id="aabdc-110">指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-110">Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>.</span></span> <span data-ttu-id="aabdc-111">ロックは、エンティティに指定された設定に基づいて更新されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-111">The lock will be renewed based on the setting specified on the entity.</span></span> </p>
      <p><span data-ttu-id="aabdc-112">セッションを承諾すると、セッションによってロックされてクライアントのインスタンスの指定された期間、サービス キュー/サブスクリプションの作成中に。</span><span class="sxs-lookup"><span data-stu-id="aabdc-112">When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation.</span></span> <span data-ttu-id="aabdc-113">セッションの処理は、この期間を超える必要がある場合、セッション ロックを更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aabdc-113">If processing of the session requires longer than this duration, the session-lock needs to be renewed.</span></span> <span data-ttu-id="aabdc-114">各更新のセッションのロックは、エンティティの LockDuration によって更新されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-114">For each renewal, the session-lock is renewed by the entity's LockDuration.</span></span> </p>
      <p><span data-ttu-id="aabdc-115">セッションの更新は、同様のセッションですべてのメッセージを更新します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-115">Renewal of session renews all the messages in the session as well.</span></span> <span data-ttu-id="aabdc-116">各メッセージを更新することがない必要があります。</span><span class="sxs-lookup"><span data-stu-id="aabdc-116">Each individual message need not be renewed.</span></span></p>
      <p></p>
    syntax:
      content: public void renewSessionLock()
    overridden: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
    exceptions:
      - type: 8256ba40
        description: <p><span data-ttu-id="aabdc-117">現在のスレッドが待機中に中断された場合</span><span class="sxs-lookup"><span data-stu-id="aabdc-117">if the current thread was interrupted while waiting</span></span> </p>
      - type: 73fec9fb
        description: <p><span data-ttu-id="aabdc-118">場合は、更新に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="aabdc-118">if the renew failed.</span></span> </p>
  - uid: com.microsoft.azure.servicebus._message_session.renewSessionLockAsync()
    id: renewSessionLockAsync()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: renewSessionLockAsync()
    nameWithType: MessageSession.renewSessionLockAsync()
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.renewSessionLockAsync()
    overload: com.microsoft.azure.servicebus._message_session.renewSessionLockAsync*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 55
    package: com.microsoft.azure.servicebus
    summary: |-
      <p><span data-ttu-id="aabdc-119">指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-119">Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>.</span></span> <span data-ttu-id="aabdc-120">ロックは、エンティティに指定された設定に基づいて更新されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-120">The lock will be renewed based on the setting specified on the entity.</span></span></p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> renewSessionLockAsync()
      return:
        type: db03ee24
        description: <p><span data-ttu-id="aabdc-121">保留中の更新を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-121">a CompletableFuture representing the pending renew.</span></span> </p>
    overridden: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync()
    see:
      - type: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
        description: '<span data-ttu-id="aabdc-122">IMessageSession::renewSessionLock()</span><span class="sxs-lookup"><span data-stu-id="aabdc-122">IMessageSession::renewSessionLock()</span></span>'
  - uid: 'com.microsoft.azure.servicebus._message_session.setState(byte [])'
    id: 'setState(byte [])'
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: 'setState(byte[] sessionState)'
    nameWithType: 'MessageSession.setState(byte[] sessionState)'
    fullName: 'void com.microsoft.azure.servicebus.MessageSession.setState(byte[] sessionState)'
    overload: com.microsoft.azure.servicebus._message_session.setState*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 60
    package: com.microsoft.azure.servicebus
    summary: |-
      <p><span data-ttu-id="aabdc-123">使用して後で取得できるセッションでカスタムの状態を設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-123">Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</span></span></p>
      <p></p>
    syntax:
      content: 'public void setState(byte[] sessionState)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p><span data-ttu-id="aabdc-124">セッション状態。</span><span class="sxs-lookup"><span data-stu-id="aabdc-124">The session state.</span></span> </p>
    overridden: 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
    exceptions:
      - type: 8256ba40
        description: <p><span data-ttu-id="aabdc-125">現在のスレッドが待機中に中断された場合</span><span class="sxs-lookup"><span data-stu-id="aabdc-125">if the current thread was interrupted while waiting</span></span> </p>
      - type: 73fec9fb
        description: <p><span data-ttu-id="aabdc-126">場合は、状態を設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="aabdc-126">if the set state failed.</span></span> </p>
  - uid: 'com.microsoft.azure.servicebus._message_session.setStateAsync(byte [])'
    id: 'setStateAsync(byte [])'
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    langs:
      - java
    name: 'setStateAsync(byte[] sessionState)'
    nameWithType: 'MessageSession.setStateAsync(byte[] sessionState)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.setStateAsync(byte[] sessionState)'
    overload: com.microsoft.azure.servicebus._message_session.setStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/MessageSession.java
      startLine: 65
    package: com.microsoft.azure.servicebus
    summary: |-
      <p><span data-ttu-id="aabdc-127">使用して後で取得できるセッションでカスタムの状態を非同期的に設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-127">Asynchronously set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</span></span></p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> setStateAsync(byte[] sessionState)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p><span data-ttu-id="aabdc-128">セッション状態。</span><span class="sxs-lookup"><span data-stu-id="aabdc-128">The session state.</span></span> </p>
      return:
        type: db03ee24
        description: <p><span data-ttu-id="aabdc-129">保留中のセッション状態の設定を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-129">a CompletableFuture representing the pending session state setting.</span></span> </p>
    overridden: 'com.microsoft.azure.servicebus._i_message_session.setStateAsync(byte [])'
    see:
      - type: 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
        description: '<span data-ttu-id="aabdc-130">IMessageSession::setState</span><span class="sxs-lookup"><span data-stu-id="aabdc-130">IMessageSession::setState</span></span>'
references:
  - uid: 4dda0764
    spec.java:
      - name: final boolean
        fullName: final boolean
  - uid: com.microsoft.azure.servicebus._message_session.isSessionReceiver*
    name: isSessionReceiver
    nameWithType: MessageSession.isSessionReceiver
    fullName: final boolean com.microsoft.azure.servicebus.MessageSession.isSessionReceiver
    package: com.microsoft.azure.servicebus
  - uid: 4fc6e284
    spec.java:
      - name: boolean
        fullName: boolean
  - uid: com.microsoft.azure.servicebus._message_session.isBrowsableSession*
    name: isBrowsableSession
    nameWithType: MessageSession.isBrowsableSession
    fullName: boolean com.microsoft.azure.servicebus.MessageSession.isBrowsableSession
    package: com.microsoft.azure.servicebus
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: com.microsoft.azure.servicebus._message_session.getRequestedSessionId*
    name: getRequestedSessionId
    nameWithType: MessageSession.getRequestedSessionId
    fullName: String com.microsoft.azure.servicebus.MessageSession.getRequestedSessionId
    package: com.microsoft.azure.servicebus
  - uid: 328f8254
    spec.java:
      - name: Instant
        fullName: Instant
  - uid: com.microsoft.azure.servicebus._message_session.getLockedUntilUtc*
    name: getLockedUntilUtc
    nameWithType: MessageSession.getLockedUntilUtc
    fullName: Instant com.microsoft.azure.servicebus.MessageSession.getLockedUntilUtc
    package: com.microsoft.azure.servicebus
  - uid: 8256ba40
    spec.java:
      - name: InterruptedException
        fullName: InterruptedException
  - uid: 73fec9fb
    spec.java:
      - name: ServiceBusException
        fullName: ServiceBusException
  - uid: com.microsoft.azure.servicebus._message_session.renewSessionLock*
    name: renewSessionLock
    nameWithType: MessageSession.renewSessionLock
    fullName: void com.microsoft.azure.servicebus.MessageSession.renewSessionLock
    package: com.microsoft.azure.servicebus
  - uid: db03ee24
    spec.java:
      - name: CompletableFuture<Void>
        fullName: CompletableFuture<Void>
  - uid: com.microsoft.azure.servicebus._message_session.renewSessionLockAsync*
    name: renewSessionLockAsync
    nameWithType: MessageSession.renewSessionLockAsync
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.renewSessionLockAsync
    package: com.microsoft.azure.servicebus
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: com.microsoft.azure.servicebus._message_session.setState*
    name: setState
    nameWithType: MessageSession.setState
    fullName: void com.microsoft.azure.servicebus.MessageSession.setState
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._message_session.setStateAsync*
    name: setStateAsync
    nameWithType: MessageSession.setStateAsync
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.setStateAsync
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._message_session.getState*
    name: getState
    nameWithType: MessageSession.getState
    fullName: 'byte [] com.microsoft.azure.servicebus.MessageSession.getState'
    package: com.microsoft.azure.servicebus
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: com.microsoft.azure.servicebus._message_session.getStateAsync*
    name: getStateAsync
    nameWithType: MessageSession.getStateAsync
    fullName: 'CompletableFuture<byte[]> com.microsoft.azure.servicebus.MessageSession.getStateAsync'
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._message_session.getSessionId*
    name: getSessionId
    nameWithType: MessageSession.getSessionId
    fullName: String com.microsoft.azure.servicebus.MessageSession.getSessionId
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._message_receiver.abandon(UUID)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.abandon(UUID,Map<String, Object>)'
  - uid: com.microsoft.azure.servicebus._message_receiver.abandonAsync(UUID)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.abandonAsync(UUID,Map<String, Object>)'
  - uid: 'com.microsoft.azure.servicebus.primitives._client_entity.ClientEntity(final String,final ClientEntity)'
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: 'ClientEntity(final String clientId, final ClientEntity parent)'
    nameWithType: 'ClientEntity.ClientEntity(final String clientId, final ClientEntity parent)'
    fullName: 'com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String clientId, final ClientEntity parent)'
    type: Constructor
    syntax:
      content: 'protected ClientEntity(final String clientId, final ClientEntity parent)'
      parameters:
        - id: clientId
          type: 3d93591e
        - id: parent
          type: 93de0ef9com.microsoft.azure.servicebus.primitives._client_entity
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.close()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: close()
    nameWithType: ClientEntity.close()
    fullName: final void com.microsoft.azure.servicebus.primitives.ClientEntity.close()
    type: Method
    syntax:
      content: public final void close()
      return:
        type: 3f6357ce
  - uid: com.microsoft.azure.servicebus._i_closeable.close()
    parent: com.microsoft.azure.servicebus._i_closeable
    href: com.microsoft.azure.servicebus._i_closeable.yml
    name: close()
    nameWithType: ICloseable.close()
    fullName: void com.microsoft.azure.servicebus.ICloseable.close()
    type: Method
    summary: <p><span data-ttu-id="aabdc-131">同期的に終了し、このオブジェクトに関連付けられているすべてのリソースを破棄します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-131">Synchronously closes and disposes any resources associated with this object.</span></span> <span data-ttu-id="aabdc-132">このメソッドを呼び出すことは、呼び出し元のと同じです。</span><span class="sxs-lookup"><span data-stu-id="aabdc-132">Calling this method is equivalent of calling .</span></span> <span data-ttu-id="aabdc-133">このメソッドはブロックされるまでオブジェクトが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-133">This method blocks until this object is closed.</span></span> </p>
    syntax:
      content: public void close()
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.closeAsync()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: closeAsync()
    nameWithType: ClientEntity.closeAsync()
    fullName: final CompletableFuture<Void> com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
    type: Method
    syntax:
      content: public final CompletableFuture<Void> closeAsync()
      return:
        type: fc984e6f
  - uid: com.microsoft.azure.servicebus._i_closeable.closeAsync()
    parent: com.microsoft.azure.servicebus._i_closeable
    href: com.microsoft.azure.servicebus._i_closeable.yml
    name: closeAsync()
    nameWithType: ICloseable.closeAsync()
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.ICloseable.closeAsync()
    type: Method
    summary: <p><span data-ttu-id="aabdc-134">終了し、このオブジェクトに関連付けられているすべてのリソースを破棄します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-134">Closes and disposes any resources associated with this object.</span></span> <span data-ttu-id="aabdc-135">閉じられた後、オブジェクトを使用できません。</span><span class="sxs-lookup"><span data-stu-id="aabdc-135">An object cannot be used after it is closed.</span></span> <span data-ttu-id="aabdc-136">これは、すぐに、CompletableFuture を返す非同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="aabdc-136">This is an asynchronous method that returns a CompletableFuture immediately.</span></span> <span data-ttu-id="aabdc-137">このオブジェクトは、返された CompletableFuture が完了したときに完全に閉じられます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-137">This object is completely closed when the returned CompletableFuture is completed.</span></span> </p>
    syntax:
      content: public CompletableFuture<Void> closeAsync()
      return:
        type: db03ee24
        description: <p><span data-ttu-id="aabdc-138">このオブジェクトの終了を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-138">a CompletableFuture representing the closing of this object.</span></span> </p>
  - uid: com.microsoft.azure.servicebus._message_receiver.complete(UUID)
  - uid: com.microsoft.azure.servicebus._message_receiver.completeAsync(UUID)
  - uid: com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID,Map<String, Object>)'
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID,String,String)'
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deadLetter(UUID,String,String,Map<String, Object>)'
  - uid: com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID,Map<String, Object>)'
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID,String,String)'
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)'
  - uid: com.microsoft.azure.servicebus._message_receiver.defer(UUID)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.defer(UUID,Map<String, Object>)'
  - uid: com.microsoft.azure.servicebus._message_receiver.deferAsync(UUID)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.deferAsync(UUID,Map<String, Object>)'
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.finalize()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: finalize()
    nameWithType: ClientEntity.finalize()
    fullName: void com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
    type: Method
    syntax:
      content: protected void finalize()
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.getClientId()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: getClientId()
    nameWithType: ClientEntity.getClientId()
    fullName: String com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
    type: Method
    syntax:
      content: public String getClientId()
      return:
        type: '26831127'
  - uid: com.microsoft.azure.servicebus._message_receiver.getEntityPath()
  - uid: com.microsoft.azure.servicebus._message_receiver.getInternalReceiver()
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.getIsClosed()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: getIsClosed()
    nameWithType: ClientEntity.getIsClosed()
    fullName: boolean com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
    type: Method
    syntax:
      content: protected boolean getIsClosed()
      return:
        type: 4fc6e284
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.getIsClosingOrClosed()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: getIsClosingOrClosed()
    nameWithType: ClientEntity.getIsClosingOrClosed()
    fullName: boolean com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
    type: Method
    syntax:
      content: protected boolean getIsClosingOrClosed()
      return:
        type: 4fc6e284
  - uid: com.microsoft.azure.servicebus._message_receiver.getPrefetchCount()
  - uid: com.microsoft.azure.servicebus._message_receiver.getReceiveMode()
  - uid: 'com.microsoft.azure.servicebus._initializable_entity.InitializableEntity(String,ClientEntity)'
  - uid: com.microsoft.azure.servicebus._message_receiver.onClose()
  - uid: com.microsoft.azure.servicebus._message_receiver.peek()
  - uid: com.microsoft.azure.servicebus._message_receiver.peek(long)
  - uid: com.microsoft.azure.servicebus._message_receiver.peekAsync()
  - uid: com.microsoft.azure.servicebus._message_receiver.peekAsync(long)
  - uid: com.microsoft.azure.servicebus._message_receiver.peekBatch(int)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.peekBatch(long,int)'
  - uid: com.microsoft.azure.servicebus._message_receiver.peekBatchAsync(int)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.peekBatchAsync(long,int)'
  - uid: com.microsoft.azure.servicebus._message_receiver.receive()
  - uid: com.microsoft.azure.servicebus._message_receiver.receive(Duration)
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveAsync()
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveAsync(Duration)
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveBatch(int)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.receiveBatch(int,Duration)'
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveBatchAsync(int)
  - uid: 'com.microsoft.azure.servicebus._message_receiver.receiveBatchAsync(int,Duration)'
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessage(long)
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessageAsync(long)
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessageBatch(Collection<Long>)
  - uid: com.microsoft.azure.servicebus._message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
  - uid: com.microsoft.azure.servicebus._message_receiver.renewMessageLock(IMessage)
  - uid: com.microsoft.azure.servicebus._message_receiver.renewMessageLockAsync(IMessage)
  - uid: com.microsoft.azure.servicebus._message_receiver.renewMessageLockBatch(Collection<? extends IMessage>)
  - uid: com.microsoft.azure.servicebus._message_receiver.renewMessageLockBatchAsync(Collection<? extends IMessage>)
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.setClosed()
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: setClosed()
    nameWithType: ClientEntity.setClosed()
    fullName: final void com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
    type: Method
    syntax:
      content: protected final void setClosed()
      return:
        type: 3f6357ce
  - uid: com.microsoft.azure.servicebus._message_receiver.setPrefetchCount(int)
  - uid: com.microsoft.azure.servicebus.primitives._client_entity.throwIfClosed(Throwable)
    parent: com.microsoft.azure.servicebus.primitives._client_entity
    href: com.microsoft.azure.servicebus.primitives._client_entity.yml
    name: throwIfClosed(Throwable cause)
    nameWithType: ClientEntity.throwIfClosed(Throwable cause)
    fullName: final void com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable cause)
    type: Method
    syntax:
      content: protected final void throwIfClosed(Throwable cause)
      parameters:
        - id: cause
          type: a04fafd7
      return:
        type: 3f6357ce
  - uid: com.microsoft.azure.servicebus._i_message_session
    parent: com.microsoft.azure.servicebus
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: IMessageSession
    nameWithType: IMessageSession
    fullName: com.microsoft.azure.servicebus.IMessageSession
    type: Interface
    summary: |-
      <p><span data-ttu-id="aabdc-139">セッション オブジェクトを表します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-139">Describes a Session object.</span></span> <span data-ttu-id="aabdc-140"><xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref>セッションでの操作を実行するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-140"><xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref> can be used to perform operations on sessions.</span></span> </p>
      <p><span data-ttu-id="aabdc-141">サービス バス セッション、AMQP 1.0 プロトコルでは"Groups"とも呼ばれますとは、一連の関連メッセージをバインド解除済みです。</span><span class="sxs-lookup"><span data-stu-id="aabdc-141">Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages.</span></span> <span data-ttu-id="aabdc-142">ServiceBus では、セッションでメッセージの順序を保証します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-142">ServiceBus guarantees ordering of messages in a session.</span></span> </p>
      <p><span data-ttu-id="aabdc-143">センダは、セッションを作成することができますを設定してトピックまたはキューにメッセージを送信するときに、 <xref uid="" data-throw-if-not-resolved="false">#sessionId をメッセージ</xref>プロパティを<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>一部のアプリケーションに一意の識別子を定義します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-143">Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="" data-throw-if-not-resolved="false">Message#sessionId</xref> property on <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to some application defined unique identifier.</span></span> <span data-ttu-id="aabdc-144">AMQP 1.0 プロトコル レベルでは、この値は、グループ id プロパティにマップされます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-144">At the AMQP 1.0 protocol level, this value maps to the group-id property.</span></span> </p>
      <p><span data-ttu-id="aabdc-145">セッションは、キューまたはトピックのサブスクリプションで、セッションのセッション Id で、少なくとも 1 つのメッセージが表示される時に存在するようになります。</span><span class="sxs-lookup"><span data-stu-id="aabdc-145">Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription.</span></span> <span data-ttu-id="aabdc-146">セッションが存在する場合は定義されている時点、またはセッションの有効期限が切れる場合または非表示のジェスチャです。</span><span class="sxs-lookup"><span data-stu-id="aabdc-146">Once a Session exists, there is no defined moment or gesture for when the session expires or disappears.</span></span> </p>
    syntax:
      content: public interface IMessageSession extends IMessageReceiver
  - uid: com.microsoft.azure.servicebus._browsable_message_session
  - uid: com.microsoft.azure.servicebus.primitives._connection_string_builder
    parent: com.microsoft.azure.servicebus.primitives
    href: com.microsoft.azure.servicebus.primitives._connection_string_builder.yml
    name: ConnectionStringBuilder
    nameWithType: ConnectionStringBuilder
    fullName: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
    type: Class
    summary: |-
      <p><span data-ttu-id="aabdc-147">このクラスは、ServiceBus エンティティとの通信を確立できる接続文字列を構築するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-147">This class can be used to construct a connection string which can establish communication with ServiceBus entities.</span></span> <span data-ttu-id="aabdc-148">既存の接続文字列で基本的な検証を実行するも使用できます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-148">It can also be used to perform basic validation on an existing connection string.</span></span> </p>
      <p><span data-ttu-id="aabdc-149">サンプル コードに示します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-149">Sample Code:</span></span> <pre><code>ConnectionStringBuilder connectionStringBuilder = new ConnectionStringBuilder(

                                                   "ServiceBusNamespaceName", 

                                                   "ServiceBusEntityName", // QueueName or TopicName or SubscriptionPath

                                                   "SharedAccessSignatureKeyName", 

                                                   "SharedAccessSignatureKey");

           

          String connectionString = connectionStringBuilder.toString();

          </code></pre></p>

      <p><span data-ttu-id="aabdc-150">接続文字列は、基本的に、文字列で区切られたキーと値のペアで構成されている「;」です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-150">A connection string is basically a string consisted of key-value pair separated by ";".</span></span> <span data-ttu-id="aabdc-151">基本形式は {{ &lt;} キー {&gt;} = { &lt;} 値 {&gt;} [; {&lt;} キー {&gt;} = { &lt;} 値 {&gt;}]。 サポートされているキー名が次のような場所。<itemizedlist><listitem></span><span class="sxs-lookup"><span data-stu-id="aabdc-151">Basic format is {{ &lt;}key{&gt;}={ &lt;}value{&gt;}[;{ &lt;}key{&gt;}={ &lt;}value{&gt;}]} where supported key name are as follow: <itemizedlist><listitem></span></span><p><span data-ttu-id="aabdc-152">エンドポイントで servicebus 名前空間を指す URL</span><span class="sxs-lookup"><span data-stu-id="aabdc-152">Endpoint - URL that points to the servicebus namespace</span></span> </p></listitem><listitem><p><span data-ttu-id="aabdc-153">EntityPath の service bus エンティティへのパス (キュー/トピック/サブスクリプション/)。</span><span class="sxs-lookup"><span data-stu-id="aabdc-153">EntityPath - Path to the service bus entity (queue/topic/subscription/).</span></span> <span data-ttu-id="aabdc-154">キューおよびトピックでは、エンティティの名前だけです。</span><span class="sxs-lookup"><span data-stu-id="aabdc-154">For queues and topics, it is just the entity name.</span></span> <span data-ttu-id="aabdc-155">サブスクリプションの場合、パスは&lt;topicName&gt;/subscriptions/&lt;subscriptionName&gt;</span><span class="sxs-lookup"><span data-stu-id="aabdc-155">For subscriptions, path is &lt;topicName&gt;/subscriptions/&lt;subscriptionName&gt;</span></span> </p></listitem><listitem><p><span data-ttu-id="aabdc-156">SharedAccessKeyName - 名前空間、またはエンティティの対応する共有アクセス ポリシーのルールにキー名。</span><span class="sxs-lookup"><span data-stu-id="aabdc-156">SharedAccessKeyName - Key name to the corresponding shared access policy rule for the namespace, or entity.</span></span> </p></listitem><listitem><p><span data-ttu-id="aabdc-157">SharedAccessKey - 名前空間またはエンティティの対応する共有アクセス ポリシー規則のキー値。</span><span class="sxs-lookup"><span data-stu-id="aabdc-157">SharedAccessKey - Key value for the corresponding shared access policy rule of the namespace or entity.</span></span> </p></listitem><listitem><p><span data-ttu-id="aabdc-158">SharedAccessSignatureToken - キー名とキーの値の代わりにクライアントを提供できます、既に生成された SAS トークン。</span><span class="sxs-lookup"><span data-stu-id="aabdc-158">SharedAccessSignatureToken - Instead of a key name and key value, clients can provide an already generated SAS Token.</span></span> </p></listitem><listitem><p><span data-ttu-id="aabdc-159">OperationTimeout - すべての送信者、受信者およびこの接続文字列から作成されたクライアントに使用する既定のタイムアウト。</span><span class="sxs-lookup"><span data-stu-id="aabdc-159">OperationTimeout - Default timeout to be used for all senders, receiver and clients created from this connection string.</span></span> </p></listitem><listitem><p><span data-ttu-id="aabdc-160"><xref uid="com.microsoft.azure.servicebus.primitives._retry_policy" data-throw-if-not-resolved="false">RetryPolicy</xref> -再試行ポリシーの名前。</span><span class="sxs-lookup"><span data-stu-id="aabdc-160"><xref uid="com.microsoft.azure.servicebus.primitives._retry_policy" data-throw-if-not-resolved="false">RetryPolicy</xref> - Name of the retry policy.</span></span> </p></listitem></itemizedlist></p>
    syntax:
      content: public class ConnectionStringBuilder
  - uid: com.microsoft.azure.servicebus._receive_mode
    parent: com.microsoft.azure.servicebus
    href: com.microsoft.azure.servicebus._receive_mode.yml
    name: ReceiveMode
    nameWithType: ReceiveMode
    fullName: com.microsoft.azure.servicebus.ReceiveMode
    type: Enum
    summary: |-
      <p><span data-ttu-id="aabdc-161">2 つを表す列挙体は、Azure Service Bus をサポートしているモードを受信します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-161">Enumeration to represent the two receive modes Azure Service Bus supports.</span></span></p>
      <p></p>
    syntax:
      content: public enum ReceiveMode
  - uid: com.microsoft.azure.servicebus.primitives._messaging_factory
    parent: com.microsoft.azure.servicebus.primitives
    href: com.microsoft.azure.servicebus.primitives._messaging_factory.yml
    name: MessagingFactory
    nameWithType: MessagingFactory
    fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
    type: Class
    summary: '<p><span data-ttu-id="aabdc-162">関連するすべての AMQP の詳細を AMQP 接続をカプセル化し、ライフ サイクルを管理の概要は次のサイクルです。</span><span class="sxs-lookup"><span data-stu-id="aabdc-162">Abstracts all AMQP related details and encapsulates an AMQP connection and manages its life cycle.</span></span> <span data-ttu-id="aabdc-163">このクラスの各インスタンスは、名前空間への AMQP 接続を 1 つを表します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-163">Each instance of this class represent one AMQP connection to the namespace.</span></span> <span data-ttu-id="aabdc-164">アプリケーションでは、複数の送信者、受信者または同じ MessagingFacotry インスタンスを使用してクライアントを作成する場合は、それらの送信者、受信者またはクライアントと名前空間に同じ接続が共有されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-164">If an application creates multiple senders, receivers or clients using the same MessagingFacotry instance, all those senders, receivers or clients will share the same connection to the namespace.</span></span> </p>'
    syntax:
      content: public class MessagingFactory
  - uid: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: getLockedUntilUtc()
    nameWithType: IMessageSession.getLockedUntilUtc()
    fullName: Instant com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
    type: Method
    syntax:
      content: public Instant getLockedUntilUtc()
      return:
        type: 328f8254
        description: '<p><span data-ttu-id="aabdc-165">時刻を取得するセッションで識別される<xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>はこのクライアント用になるまでにロックします。</span><span class="sxs-lookup"><span data-stu-id="aabdc-165">Gets the time that the session identified by <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref> is locked until for this client.</span></span> </p>'
  - uid: com.microsoft.azure.servicebus._i_message_session.getSessionId()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: getSessionId()
    nameWithType: IMessageSession.getSessionId()
    fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId()
    type: Method
    syntax:
      content: public String getSessionId()
      return:
        type: '26831127'
        description: <p><span data-ttu-id="aabdc-166">セッション Id を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-166">Gets the SessionId.</span></span> </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: renewSessionLock()
    nameWithType: IMessageSession.renewSessionLock()
    fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
    type: Method
    summary: |-
      <p><span data-ttu-id="aabdc-167">指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-167">Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>.</span></span> <span data-ttu-id="aabdc-168">ロックは、エンティティに指定された設定に基づいて更新されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-168">The lock will be renewed based on the setting specified on the entity.</span></span> </p>
      <p><span data-ttu-id="aabdc-169">セッションを承諾すると、セッションによってロックされてクライアントのインスタンスの指定された期間、サービス キュー/サブスクリプションの作成中に。</span><span class="sxs-lookup"><span data-stu-id="aabdc-169">When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation.</span></span> <span data-ttu-id="aabdc-170">セッションの処理は、この期間を超える必要がある場合、セッション ロックを更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aabdc-170">If processing of the session requires longer than this duration, the session-lock needs to be renewed.</span></span> <span data-ttu-id="aabdc-171">各更新のセッションのロックは、エンティティの LockDuration によって更新されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-171">For each renewal, the session-lock is renewed by the entity's LockDuration.</span></span> </p>
      <p><span data-ttu-id="aabdc-172">セッションの更新は、同様のセッションですべてのメッセージを更新します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-172">Renewal of session renews all the messages in the session as well.</span></span> <span data-ttu-id="aabdc-173">各メッセージを更新することがない必要があります。</span><span class="sxs-lookup"><span data-stu-id="aabdc-173">Each individual message need not be renewed.</span></span></p>
      <p></p>
    syntax:
      content: public void renewSessionLock()
  - uid: com.microsoft.azure.servicebus.primitives._service_bus_exception
    parent: com.microsoft.azure.servicebus.primitives
    href: com.microsoft.azure.servicebus.primitives._service_bus_exception.yml
    name: ServiceBusException
    nameWithType: ServiceBusException
    fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
    type: Class
    summary: <p><span data-ttu-id="aabdc-174">これは、すべてのエラーの場合のサービス バスを生成する基本例外です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-174">This is the base exception that service bus will generate for all error cases.</span></span> </p>
    syntax:
      content: public class ServiceBusException
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: renewSessionLockAsync()
    nameWithType: IMessageSession.renewSessionLockAsync()
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
    type: Method
    summary: |-
      <p><span data-ttu-id="aabdc-175">指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-175">Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>.</span></span> <span data-ttu-id="aabdc-176">ロックは、エンティティに指定された設定に基づいて更新されます。</span><span class="sxs-lookup"><span data-stu-id="aabdc-176">The lock will be renewed based on the setting specified on the entity.</span></span></p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> renewSessionLockAsync()
      return:
        type: db03ee24
        description: <p><span data-ttu-id="aabdc-177">保留中の更新を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-177">a CompletableFuture representing the pending renew.</span></span> </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: 'setState(byte[] state)'
    nameWithType: 'IMessageSession.setState(byte[] state)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)'
    type: Method
    summary: |-
      <p><span data-ttu-id="aabdc-178">使用して後で取得できるセッションでカスタムの状態を設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-178">Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</span></span></p>
      <p></p>
    syntax:
      content: 'public void setState(byte[] state)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p><span data-ttu-id="aabdc-179">セッション状態。</span><span class="sxs-lookup"><span data-stu-id="aabdc-179">The session state.</span></span> </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.getState()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: getState()
    nameWithType: IMessageSession.getState()
    fullName: 'byte [] com.microsoft.azure.servicebus.IMessageSession.getState()'
    type: Method
    summary: |-
      <p><span data-ttu-id="aabdc-180">セッション状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-180">Gets the session state.</span></span></p>
      <p></p>
    syntax:
      content: 'public byte [] getState()'
      return:
        type: ccd9418d
        description: <p><span data-ttu-id="aabdc-181">セッションの状態</span><span class="sxs-lookup"><span data-stu-id="aabdc-181">The session state</span></span> </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_session.setStateAsync(byte [])'
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: 'setStateAsync(byte[] state)'
    nameWithType: 'IMessageSession.setStateAsync(byte[] state)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[] state)'
    type: Method
    summary: |-
      <p><span data-ttu-id="aabdc-182">使用して後で取得できるセッションでカスタムの状態を非同期的に設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-182">Asynchronously set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</span></span></p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> setStateAsync(byte[] state)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p><span data-ttu-id="aabdc-183">セッション状態。</span><span class="sxs-lookup"><span data-stu-id="aabdc-183">The session state.</span></span> </p>
      return:
        type: db03ee24
        description: <p><span data-ttu-id="aabdc-184">保留中のセッション状態の設定を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-184">a CompletableFuture representing the pending session state setting.</span></span> </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.getStateAsync()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: getStateAsync()
    nameWithType: IMessageSession.getStateAsync()
    fullName: 'CompletableFuture<byte[]> com.microsoft.azure.servicebus.IMessageSession.getStateAsync()'
    type: Method
    summary: <p><span data-ttu-id="aabdc-185">非同期的に、セッションの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="aabdc-185">Asynchronously gets the session state.</span></span> </p>
    syntax:
      content: 'public CompletableFuture<byte[]> getStateAsync()'
      return:
        type: 5fe2dfa4
        description: <p><span data-ttu-id="aabdc-186">保留中のセッション状態の取得を表す CompletableFuture です。</span><span class="sxs-lookup"><span data-stu-id="aabdc-186">a CompletableFuture representing the pending session state retrieving.</span></span> </p>