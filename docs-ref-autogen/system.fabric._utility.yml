### YamlMime:ManagedReference
items:
  - uid: system.fabric._utility
    id: _utility
    parent: system.fabric
    children:
      - system.fabric._utility.exceptionAsString(Throwable)
      - system.fabric._utility.getFabricException(Throwable)
      - system.fabric._utility.getFabricOrUserException(Throwable)
      - system.fabric._utility.getInnerException(Throwable)
      - system.fabric._utility.getRuntimeException(Throwable)
      - system.fabric._utility.isCompletableFutureType(Class<?>)
      - system.fabric._utility.isNullOrEmpty(String)
      - system.fabric._utility.isVoidType(Class<?>)
      - system.fabric._utility.TryTranslateJavaExceptionToCOM(Exception)
      - system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow(Exception)
      - 'system.fabric._utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)'
    href: system.fabric._utility.yml
    langs:
      - java
    name: Utility
    nameWithType: Utility
    fullName: system.fabric.Utility
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 16
    package: system.fabric
    syntax:
      content: public class Utility
    inheritance:
      - java.lang.Object
  - uid: system.fabric._utility.exceptionAsString(Throwable)
    id: exceptionAsString(Throwable)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: exceptionAsString(Throwable t)
    nameWithType: Utility.exceptionAsString(Throwable t)
    fullName: static String system.fabric.Utility.exceptionAsString(Throwable t)
    overload: system.fabric._utility.exceptionAsString*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 175
    package: system.fabric
    summary: <p><span data-ttu-id="05c73-101">このメソッドは、スタック トレースを文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="05c73-101">This method returns StackTrace as String.</span></span> </p>
    syntax:
      content: public static String exceptionAsString(Throwable t)
      parameters:
        - id: t
          type: a04fafd7
      return:
        type: '26831127'
        description: <p><span data-ttu-id="05c73-102">printStackTrace() 文字列として出力します。</span><span class="sxs-lookup"><span data-stu-id="05c73-102">printStackTrace() output as a String.</span></span> </p>
  - uid: system.fabric._utility.getFabricException(Throwable)
    id: getFabricException(Throwable)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: getFabricException(Throwable t)
    nameWithType: Utility.getFabricException(Throwable t)
    fullName: static FabricException system.fabric.Utility.getFabricException(Throwable t)
    overload: system.fabric._utility.getFabricException*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 87
    package: system.fabric
    summary: |-
      <p><span data-ttu-id="05c73-103">このメソッドは、将来の 1 つは、将来の別の原因となった例外に特別に持たせる完了しているが、今後のハンドル句から例外が再スローされるされている場合、または使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="05c73-103">This method should be used when one future is being completed exceptionally with the exception caused by another future or if the exception is being rethrown from handle clause of the future.</span></span> <span data-ttu-id="05c73-104">Ex1: f1.handle ((r, e) -&gt; e! = null しますか?</span><span class="sxs-lookup"><span data-stu-id="05c73-104">Ex1: f1.handle((r, e) -&gt; e != null ?</span></span> <span data-ttu-id="05c73-105">新しい FabricException(e) をスローします。 r) します。Ex2: f1.handle ((r, e) -&gt; f2.completeExceptionally (新しい FabricException(e)) です。</span><span class="sxs-lookup"><span data-stu-id="05c73-105">throw new FabricException(e) : r ); Ex2: f1.handle((r, e) -&gt; f2.completeExceptionally(new FabricException(e));</span></span></p>
      <p></p>
    syntax:
      content: public static FabricException getFabricException(Throwable t)
      parameters:
        - id: t
          type: a04fafd7
          description: <p><span data-ttu-id="05c73-106">ラップ解除する例外。</span><span class="sxs-lookup"><span data-stu-id="05c73-106">exception to be unwrapped.</span></span> </p>
      return:
        type: system.fabric.exception._fabric_exception
        description: <p><span data-ttu-id="05c73-107">FabricException ExecutionException と CompletionException のレイヤーを削除した後です。</span><span class="sxs-lookup"><span data-stu-id="05c73-107">FabricException after removing the ExecutionException and CompletionException layers.</span></span> </p>
  - uid: system.fabric._utility.getFabricOrUserException(Throwable)
    id: getFabricOrUserException(Throwable)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: getFabricOrUserException(Throwable t)
    nameWithType: Utility.getFabricOrUserException(Throwable t)
    fullName: static RuntimeException system.fabric.Utility.getFabricOrUserException(Throwable t)
    overload: system.fabric._utility.getFabricOrUserException*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 149
    package: system.fabric
    summary: '<p><span data-ttu-id="05c73-108">ユーザーのメソッドが例外をスローまたは非常に完了すると、このメソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="05c73-108">This method should be used when the user''s method throws Exception or completes exceptionally.</span></span> <span data-ttu-id="05c73-109">1) 場合は、ユーザーのメソッドには、特別に持たせるチェック例外が完了すると、ユーザーのラップ解除された例外は RuntimeException でラップされます。</span><span class="sxs-lookup"><span data-stu-id="05c73-109">1) If the user''s method completes exceptionally with checked exception, then the user''s unwrapped exception is wrapped in RuntimeException.</span></span> <span data-ttu-id="05c73-110">2)、ユーザーのメソッドをスロー、または場合が完了する特別に持たせる未チェックの例外を除き、現状有姿でラップされていない例外が返されます。</span><span class="sxs-lookup"><span data-stu-id="05c73-110">2) If the user''s method throws or completes exceptionally with unchecked exception, then the unwrapped exception is returned as is.</span></span> <span data-ttu-id="05c73-111">3) の場合、例外は、ラップされていない例外 FabricException でラップがない場合は既に完了し、ファブリック コードから取得されます。</span><span class="sxs-lookup"><span data-stu-id="05c73-111">3) If the exception comes from the fabric code, then the unwrapped exception is wrapped in FabricException, if not done already.</span></span> </p>'
    syntax:
      content: public static RuntimeException getFabricOrUserException(Throwable t)
      parameters:
        - id: t
          type: a04fafd7
          description: <p><span data-ttu-id="05c73-112">ラップ解除する例外。</span><span class="sxs-lookup"><span data-stu-id="05c73-112">exception to be unwrapped.</span></span> </p>
      return:
        type: 9b2a4515
        description: <p><span data-ttu-id="05c73-113">RuntimeException または FabricException ExecutionException と CompletionException のレイヤーを削除した後です。</span><span class="sxs-lookup"><span data-stu-id="05c73-113">RuntimeException or FabricException after removing the ExecutionException and CompletionException layers.</span></span> </p>
  - uid: system.fabric._utility.getInnerException(Throwable)
    id: getInnerException(Throwable)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: getInnerException(Throwable t)
    nameWithType: Utility.getInnerException(Throwable t)
    fullName: static Throwable system.fabric.Utility.getInnerException(Throwable t)
    overload: system.fabric._utility.getInnerException*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 60
    package: system.fabric
    summary: |-
      <p><span data-ttu-id="05c73-114">このメソッドは、ExecutionException と CompletionException(if any) の外側のレイヤーをラップ解除して、例外を返します。</span><span class="sxs-lookup"><span data-stu-id="05c73-114">This method returns the exception by unwrapping the outer layers of ExecutionException and CompletionException(if any).</span></span></p>
      <p></p>
    syntax:
      content: public static Throwable getInnerException(Throwable t)
      parameters:
        - id: t
          type: a04fafd7
          description: <p><span data-ttu-id="05c73-115">ラップ解除する例外。</span><span class="sxs-lookup"><span data-stu-id="05c73-115">exception to be unwrapped.</span></span> </p>
      return:
        type: a04fafd7
        description: <p><span data-ttu-id="05c73-116">ExecutionException と CompletionException のレイヤーを削除した後の例外。</span><span class="sxs-lookup"><span data-stu-id="05c73-116">Exception after removing the ExecutionException and CompletionException layers.</span></span> </p>
  - uid: system.fabric._utility.getRuntimeException(Throwable)
    id: getRuntimeException(Throwable)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: getRuntimeException(Throwable t)
    nameWithType: Utility.getRuntimeException(Throwable t)
    fullName: static RuntimeException system.fabric.Utility.getRuntimeException(Throwable t)
    overload: system.fabric._utility.getRuntimeException*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 112
    package: system.fabric
    summary: |-
      <p><span data-ttu-id="05c73-117">このメソッドは、将来の 1 つは、将来の別の原因となった例外に特別に持たせる完了しているが、今後のハンドル句から例外が再スローされるされている場合、または使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="05c73-117">This method should be used when one future is being completed exceptionally with the exception caused by another future or if the exception is being rethrown from handle clause of the future.</span></span> <span data-ttu-id="05c73-118">Ex1: f1.handle ((r, e) -&gt; e! = null しますか?</span><span class="sxs-lookup"><span data-stu-id="05c73-118">Ex1: f1.handle((r, e) -&gt; e != null ?</span></span> <span data-ttu-id="05c73-119">新しい RuntimeException(e) をスローします。 r) します。Ex2: f1.handle ((r, e) -&gt; f2.completeExceptionally (新しい RuntimeException(e)) です。</span><span class="sxs-lookup"><span data-stu-id="05c73-119">throw new RuntimeException(e) : r ); Ex2: f1.handle((r, e) -&gt; f2.completeExceptionally(new RuntimeException(e));</span></span></p>
      <p></p>
    syntax:
      content: public static RuntimeException getRuntimeException(Throwable t)
      parameters:
        - id: t
          type: a04fafd7
          description: <p><span data-ttu-id="05c73-120">ラップ解除する例外。</span><span class="sxs-lookup"><span data-stu-id="05c73-120">exception to be unwrapped.</span></span> </p>
      return:
        type: 9b2a4515
        description: <p><span data-ttu-id="05c73-121">RuntimeException ExecutionException と CompletionException のレイヤーを削除した後です。</span><span class="sxs-lookup"><span data-stu-id="05c73-121">RuntimeException after removing the ExecutionException and CompletionException layers.</span></span> </p>
  - uid: system.fabric._utility.isCompletableFutureType(Class<?>)
    id: isCompletableFutureType(Class<?>)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: isCompletableFutureType(Class<?> type)
    nameWithType: Utility.isCompletableFutureType(Class<?> type)
    fullName: static boolean system.fabric.Utility.isCompletableFutureType(Class<?> type)
    overload: system.fabric._utility.isCompletableFutureType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 126
    package: system.fabric
    syntax:
      content: public static boolean isCompletableFutureType(Class<?> type)
      parameters:
        - id: type
          type: a19781f8
      return:
        type: 4fc6e284
  - uid: system.fabric._utility.isNullOrEmpty(String)
    id: isNullOrEmpty(String)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: isNullOrEmpty(String str)
    nameWithType: Utility.isNullOrEmpty(String str)
    fullName: static boolean system.fabric.Utility.isNullOrEmpty(String str)
    overload: system.fabric._utility.isNullOrEmpty*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 165
    package: system.fabric
    summary: <p><span data-ttu-id="05c73-122">このメソッドは、文字列が空または Null の場合は true を返します。</span><span class="sxs-lookup"><span data-stu-id="05c73-122">This method returns true if the String is empty or Null.</span></span> </p>
    syntax:
      content: public static boolean isNullOrEmpty(String str)
      parameters:
        - id: str
          type: '26831127'
          description: <p><span data-ttu-id="05c73-123">チェックする文字列。</span><span class="sxs-lookup"><span data-stu-id="05c73-123">string to be checked.</span></span> </p>
      return:
        type: 4fc6e284
        description: '<p><span data-ttu-id="05c73-124">ブール値を返します。 false の場合は true です。</span><span class="sxs-lookup"><span data-stu-id="05c73-124">returns a boolean value: true of false.</span></span> </p>'
  - uid: system.fabric._utility.isVoidType(Class<?>)
    id: isVoidType(Class<?>)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: isVoidType(Class<?> type)
    nameWithType: Utility.isVoidType(Class<?> type)
    fullName: static boolean system.fabric.Utility.isVoidType(Class<?> type)
    overload: system.fabric._utility.isVoidType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 133
    package: system.fabric
    syntax:
      content: public static boolean isVoidType(Class<?> type)
      parameters:
        - id: type
          type: a19781f8
      return:
        type: 4fc6e284
  - uid: system.fabric._utility.TryTranslateJavaExceptionToCOM(Exception)
    id: TryTranslateJavaExceptionToCOM(Exception)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: TryTranslateJavaExceptionToCOM(Exception ex)
    nameWithType: Utility.TryTranslateJavaExceptionToCOM(Exception ex)
    fullName: static ComException system.fabric.Utility.TryTranslateJavaExceptionToCOM(Exception ex)
    overload: system.fabric._utility.TryTranslateJavaExceptionToCOM*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 19
    package: system.fabric
    syntax:
      content: public static ComException TryTranslateJavaExceptionToCOM(Exception ex)
      parameters:
        - id: ex
          type: 8a99d4b0
      return:
        type: system.fabric.exception._com_exception
  - uid: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow(Exception)
    id: TryTranslateJavaExceptionToCOMAndThrow(Exception)
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
    nameWithType: Utility.TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
    fullName: static void system.fabric.Utility.TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
    overload: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 29
    package: system.fabric
    syntax:
      content: public static void TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
      parameters:
        - id: ex
          type: 8a99d4b0
  - uid: 'system.fabric._utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)'
    id: 'WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)'
    parent: system.fabric._utility
    href: system.fabric._utility.yml
    langs:
      - java
    name: 'WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)'
    nameWithType: 'Utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)'
    fullName: 'static JFabricAsyncOperationContext system.fabric.Utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)'
    overload: system.fabric._utility.WrapNativeAsyncMethodImplementation*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      startLine: 36
    package: system.fabric
    syntax:
      content: 'public static JFabricAsyncOperationContext WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)'
      parameters:
        - id: func
          type: 432ffe41system.fabric._cancellation_token9c57e1ef
        - id: nativeContext
          type: 0364520f
        - id: functionTag
          type: '26831127'
      return:
        type: system.fabric._j_fabric_async_operation_context
references:
  - uid: 8a99d4b0
    spec.java:
      - name: Exception
        fullName: Exception
  - uid: system.fabric._utility.TryTranslateJavaExceptionToCOM*
    name: TryTranslateJavaExceptionToCOM
    nameWithType: Utility.TryTranslateJavaExceptionToCOM
    fullName: static ComException system.fabric.Utility.TryTranslateJavaExceptionToCOM
    package: system.fabric
  - uid: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow*
    name: TryTranslateJavaExceptionToCOMAndThrow
    nameWithType: Utility.TryTranslateJavaExceptionToCOMAndThrow
    fullName: static void system.fabric.Utility.TryTranslateJavaExceptionToCOMAndThrow
    package: system.fabric
  - uid: 432ffe41system.fabric._cancellation_token9c57e1ef
    spec.java:
      - name: Function<
        fullName: Function<
      - uid: system.fabric._cancellation_token
        name: CancellationToken
        fullName: system.fabric.CancellationToken
        href: system.fabric._cancellation_token.yml
      - name: ', CompletableFuture<?>>'
        fullName: ', CompletableFuture<?>>'
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: system.fabric._utility.WrapNativeAsyncMethodImplementation*
    name: WrapNativeAsyncMethodImplementation
    nameWithType: Utility.WrapNativeAsyncMethodImplementation
    fullName: static JFabricAsyncOperationContext system.fabric.Utility.WrapNativeAsyncMethodImplementation
    package: system.fabric
  - uid: a04fafd7
    spec.java:
      - name: Throwable
        fullName: Throwable
  - uid: system.fabric._utility.getInnerException*
    name: getInnerException
    nameWithType: Utility.getInnerException
    fullName: static Throwable system.fabric.Utility.getInnerException
    package: system.fabric
  - uid: system.fabric._utility.getFabricException*
    name: getFabricException
    nameWithType: Utility.getFabricException
    fullName: static FabricException system.fabric.Utility.getFabricException
    package: system.fabric
  - uid: 9b2a4515
    spec.java:
      - name: RuntimeException
        fullName: RuntimeException
  - uid: system.fabric._utility.getRuntimeException*
    name: getRuntimeException
    nameWithType: Utility.getRuntimeException
    fullName: static RuntimeException system.fabric.Utility.getRuntimeException
    package: system.fabric
  - uid: a19781f8
    spec.java:
      - name: Class<?>
        fullName: Class<?>
  - uid: 4fc6e284
    spec.java:
      - name: boolean
        fullName: boolean
  - uid: system.fabric._utility.isCompletableFutureType*
    name: isCompletableFutureType
    nameWithType: Utility.isCompletableFutureType
    fullName: static boolean system.fabric.Utility.isCompletableFutureType
    package: system.fabric
  - uid: system.fabric._utility.isVoidType*
    name: isVoidType
    nameWithType: Utility.isVoidType
    fullName: static boolean system.fabric.Utility.isVoidType
    package: system.fabric
  - uid: system.fabric._utility.getFabricOrUserException*
    name: getFabricOrUserException
    nameWithType: Utility.getFabricOrUserException
    fullName: static RuntimeException system.fabric.Utility.getFabricOrUserException
    package: system.fabric
  - uid: system.fabric._utility.isNullOrEmpty*
    name: isNullOrEmpty
    nameWithType: Utility.isNullOrEmpty
    fullName: static boolean system.fabric.Utility.isNullOrEmpty
    package: system.fabric
  - uid: system.fabric._utility.exceptionAsString*
    name: exceptionAsString
    nameWithType: Utility.exceptionAsString
    fullName: static String system.fabric.Utility.exceptionAsString
    package: system.fabric
  - uid: system.fabric.exception._com_exception
    parent: system.fabric.exception
    href: system.fabric.exception._com_exception.yml
    name: ComException
    nameWithType: ComException
    fullName: system.fabric.exception.ComException
    type: Class
    summary: <p><span data-ttu-id="05c73-125">COM メソッドの呼び出しから認識されない HRESULT が返された場合にスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="05c73-125">The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.</span></span> </p>
    syntax:
      content: public class ComException
  - uid: system.fabric._j_fabric_async_operation_context
    parent: system.fabric
    href: system.fabric._j_fabric_async_operation_context.yml
    name: JFabricAsyncOperationContext
    nameWithType: JFabricAsyncOperationContext
    fullName: system.fabric.JFabricAsyncOperationContext
    type: Class
    syntax:
      content: public class JFabricAsyncOperationContext
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p><span data-ttu-id="05c73-126">A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。</span><span class="sxs-lookup"><span data-stu-id="05c73-126">A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled.</span></span> <span data-ttu-id="05c73-127">インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="05c73-127">You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method.</span></span> <span data-ttu-id="05c73-128">キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。</span><span class="sxs-lookup"><span data-stu-id="05c73-128">You then pass the cancellation token to any number of operations that should receive notice of cancellation.</span></span> <span data-ttu-id="05c73-129">取り消しを開始するトークンを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="05c73-129">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="05c73-130">所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。</span><span class="sxs-lookup"><span data-stu-id="05c73-130">When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true.</span></span> <span data-ttu-id="05c73-131">通知を受信するオブジェクトは、適切な方法で応答できます。</span><span class="sxs-lookup"><span data-stu-id="05c73-131">The objects that receive the notification can respond in whatever manner is appropriate.</span></span> </p>'
    syntax:
      content: public class CancellationToken
  - uid: system.fabric.exception._fabric_exception
    parent: system.fabric.exception
    href: system.fabric.exception._fabric_exception.yml
    name: FabricException
    nameWithType: FabricException
    fullName: system.fabric.exception.FabricException
    type: Class
    syntax:
      content: public class FabricException