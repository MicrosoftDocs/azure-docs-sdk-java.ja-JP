### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_proxy_base
    id: _actor_proxy_base
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_proxy_base.ActorProxyBase()
      - 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId)'
      - 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,String)'
      - 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,String,String)'
      - 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,String,String,String)'
      - 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,URI)'
      - 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,URI,String)'
      - microsoft.servicefabric.actors._actor_proxy_base.createRequestMessageBody(Object)
      - 'microsoft.servicefabric.actors._actor_proxy_base.deserializeMessage(byte [])'
      - microsoft.servicefabric.actors._actor_proxy_base.getActorId()
      - microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient()
      - microsoft.servicefabric.actors._actor_proxy_base.getResponseMessageBodyValue(Object)
      - 'microsoft.servicefabric.actors._actor_proxy_base.invoke(int,int,byte [])'
      - 'microsoft.servicefabric.actors._actor_proxy_base.invokeAsync(int,int,byte [],CancellationToken)'
      - microsoft.servicefabric.actors._actor_proxy_base.serializeMessage(Object)
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: ActorProxyBase
    nameWithType: ActorProxyBase
    fullName: microsoft.servicefabric.actors.ActorProxyBase
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 17
    package: microsoft.servicefabric.actors
    summary: <p><span data-ttu-id="17102-101">IActor インターフェイスを実装するアクターのリモート オブジェクトへのプロキシの基本実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="17102-101">Provides the base implementation for the proxy to the remote actor objects implementing IActor interfaces.</span></span> </p>
    syntax:
      content: public class ActorProxyBase extends ProxyBase implements ActorProxy
    inheritance:
      - java.lang.Object
      - microsoft.servicefabric.services.remoting.builder._proxy_base
    inheritedMembers:
      - microsoft.servicefabric.services.remoting.builder._proxy_base.continueWith(CompletableFuture<Object>)
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.getReturnValue(int,int,Object)'
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.invoke(int,int,Object)'
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,Object,CancellationToken)'
      - microsoft.servicefabric.services.remoting.builder._proxy_base.ProxyBase()
  - uid: microsoft.servicefabric.actors._actor_proxy_base.ActorProxyBase()
    id: ActorProxyBase()
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: ActorProxyBase()
    nameWithType: ActorProxyBase.ActorProxyBase()
    fullName: microsoft.servicefabric.actors.ActorProxyBase.ActorProxyBase()
    overload: microsoft.servicefabric.actors._actor_proxy_base.ActorProxyBase*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 46
    package: microsoft.servicefabric.actors
    summary: <p><span data-ttu-id="17102-102">新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>クラスです。</span><span class="sxs-lookup"><span data-stu-id="17102-102">Initializes a new instance of the <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> class.</span></span> </p>
    syntax:
      content: protected ActorProxyBase()
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId)'
    id: 'create(Class<T>,ActorId)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'create(Class<T> actorInterfaceType, ActorId actorId)'
    nameWithType: 'ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId)'
    fullName: 'static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 71
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-103">アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</span><span class="sxs-lookup"><span data-stu-id="17102-103">Creates a proxy to the actor object that implements an actor interface.</span></span></p>
      <p>
      <span data-ttu-id="17102-104">ApplicationName パラメーターをクライアントが通信するために予定アクター サービスと同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることができます。</span><span class="sxs-lookup"><span data-stu-id="17102-104">The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with.</span></span> <span data-ttu-id="17102-105">アプリケーション名を決定するこの例では、 <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>、呼び出すことで取得し、 <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="17102-105">In this case, the application name is determined from <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, and is obtained by calling the <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref> property.</span></span> </p>
      <p></p>
    syntax:
      content: 'public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p><span data-ttu-id="17102-106">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-106">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-107">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-107">The returned proxy object will implement this interface.</span></span> </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p><span data-ttu-id=\"17102-108\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-108\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">Actor</xref> Id of the proxy actor object.</span></span> <span data-ttu-id=\"17102-109\">このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-109\">Methods called on this proxy will result in requests being sent to the actor with this id.</span></span> </p>"
      return:
        type: 1e2c6103microsoft.servicefabric.actors._actor21353812
        description: <p><span data-ttu-id="17102-110">実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> TActorInterface とします。</span><span class="sxs-lookup"><span data-stu-id="17102-110">An actor proxy object that implements <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and TActorInterface.</span></span> </p>
    exceptions:
      - type: '44102508'
        description: <p><span data-ttu-id="17102-111">無効な URI の形式が applicationName として渡されるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17102-111">Throws exception when invalid URI format is passed as applicationName</span></span> </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,String)'
    id: 'create(Class<T>,ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)'
    nameWithType: 'ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)'
    fullName: 'static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 103
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-112">アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</span><span class="sxs-lookup"><span data-stu-id="17102-112">Creates a proxy to the actor object that implements an actor interface.</span></span></p>
      <p>
      <span data-ttu-id="17102-113">ApplicationName パラメーターをクライアントが通信するために予定アクター サービスと同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることができます。</span><span class="sxs-lookup"><span data-stu-id="17102-113">The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with.</span></span> <span data-ttu-id="17102-114">アプリケーション名を決定するこの例では、 <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>、呼び出すことで取得し、 <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="17102-114">In this case, the application name is determined from <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, and is obtained by calling the <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref> property.</span></span> </p>
      <p></p>
    syntax:
      content: 'public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p><span data-ttu-id="17102-115">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-115">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-116">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-116">The returned proxy object will implement this interface.</span></span> </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p><span data-ttu-id=\"17102-117\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-117\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">Actor</xref> Id of the proxy actor object.</span></span> <span data-ttu-id=\"17102-118\">このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-118\">Methods called on this proxy will result in requests being sent to the actor with this id.</span></span> </p>"
        - id: applicationName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-119">アクター オブジェクトをホストするアクター サービスを含む Service Fabric アプリケーションの名前です。</span><span class="sxs-lookup"><span data-stu-id="17102-119">Name of the Service Fabric application that contains the actor service hosting the actor objects.</span></span> <span data-ttu-id="17102-120">このパラメーターは、クライアントがその同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることはできます。</span><span class="sxs-lookup"><span data-stu-id="17102-120">This parameter can be null if the client is running as part of that same Service Fabric application.</span></span> <span data-ttu-id="17102-121">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17102-121">For more information, see Remarks.</span></span> </p>'
      return:
        type: 1e2c6103microsoft.servicefabric.actors._actor21353812
        description: <p><span data-ttu-id="17102-122">実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> TActorInterface とします。</span><span class="sxs-lookup"><span data-stu-id="17102-122">An actor proxy object that implements <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and TActorInterface.</span></span> </p>
    exceptions:
      - type: '44102508'
        description: <p><span data-ttu-id="17102-123">無効な URI の形式が applicationName として渡されるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17102-123">Throws exception when invalid URI format is passed as applicationName</span></span> </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,String,String)'
    id: 'create(Class<T>,ActorId,String,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)'
    nameWithType: 'ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)'
    fullName: 'static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 144
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-124">アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</span><span class="sxs-lookup"><span data-stu-id="17102-124">Creates a proxy to the actor object that implements an actor interface.</span></span></p>
      <p>
      <span data-ttu-id="17102-125">ApplicationName パラメーターをクライアントが通信するために予定アクター サービスと同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることができます。</span><span class="sxs-lookup"><span data-stu-id="17102-125">The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with.</span></span> <span data-ttu-id="17102-126">アプリケーション名を決定するこの例では、 <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>、呼び出すことで取得し、 <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="17102-126">In this case, the application name is determined from <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, and is obtained by calling the <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref> property.</span></span> </p>
      <p></p>
    syntax:
      content: 'public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p><span data-ttu-id="17102-127">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-127">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-128">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-128">The returned proxy object will implement this interface.</span></span> </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p><span data-ttu-id=\"17102-129\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-129\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">Actor</xref> Id of the proxy actor object.</span></span> <span data-ttu-id=\"17102-130\">このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-130\">Methods called on this proxy will result in requests being sent to the actor with this id.</span></span> </p>"
        - id: applicationName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-131">アクター オブジェクトをホストするアクター サービスを含む Service Fabric アプリケーションの名前です。</span><span class="sxs-lookup"><span data-stu-id="17102-131">Name of the Service Fabric application that contains the actor service hosting the actor objects.</span></span> <span data-ttu-id="17102-132">このパラメーターは、クライアントがその同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることはできます。</span><span class="sxs-lookup"><span data-stu-id="17102-132">This parameter can be null if the client is running as part of that same Service Fabric application.</span></span> <span data-ttu-id="17102-133">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17102-133">For more information, see Remarks.</span></span> </p>'
        - id: serviceName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-134">Service Fabric サービスによって構成されたとおりの名前<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>アクターの実装にします。</span><span class="sxs-lookup"><span data-stu-id="17102-134">Name of the Service Fabric service as configured by <xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> on the actor implementation.</span></span> <span data-ttu-id="17102-135">既定では、サービスの名前は、アクター インターフェイスの名前から派生します。</span><span class="sxs-lookup"><span data-stu-id="17102-135">By default, the name of the service is derived from the name of the actor interface.</span></span> <span data-ttu-id="17102-136">ただし<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>はアクターが 1 つ以上にアクター インターフェイスを実装するか、serviceName の決定は自動的に加えられることはできません、アクター インターフェイスが別のアクター インターフェイスから派生した場合に必要です。</span><span class="sxs-lookup"><span data-stu-id="17102-136">However <xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically.</span></span> </p>'
      return:
        type: 1e2c6103microsoft.servicefabric.actors._actor21353812
        description: <p><span data-ttu-id="17102-137">実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> TActorInterface とします。</span><span class="sxs-lookup"><span data-stu-id="17102-137">An actor proxy object that implements <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and TActorInterface.</span></span> </p>
    exceptions:
      - type: '44102508'
        description: <p><span data-ttu-id="17102-138">無効な URI の形式が applicationName として渡されるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17102-138">Throws exception when invalid URI format is passed as applicationName</span></span> </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,String,String,String)'
    id: 'create(Class<T>,ActorId,String,String,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    nameWithType: 'ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    fullName: 'static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 191
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-139">アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</span><span class="sxs-lookup"><span data-stu-id="17102-139">Creates a proxy to the actor object that implements an actor interface.</span></span></p>
      <p>
      <span data-ttu-id="17102-140">ApplicationName パラメーターをクライアントが通信するために予定アクター サービスと同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることができます。</span><span class="sxs-lookup"><span data-stu-id="17102-140">The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with.</span></span> <span data-ttu-id="17102-141">アプリケーション名を決定するこの例では、 <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>、呼び出すことで取得し、 <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="17102-141">In this case, the application name is determined from <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, and is obtained by calling the <xref uid="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getApplicationName()</xref> property.</span></span> </p>
      <p></p>
    syntax:
      content: 'public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p><span data-ttu-id="17102-142">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-142">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-143">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-143">The returned proxy object will implement this interface.</span></span> </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p><span data-ttu-id=\"17102-144\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-144\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">Actor</xref> Id of the proxy actor object.</span></span> <span data-ttu-id=\"17102-145\">このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-145\">Methods called on this proxy will result in requests being sent to the actor with this id.</span></span> </p>"
        - id: applicationName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-146">アクター オブジェクトをホストするアクター サービスを含む Service Fabric アプリケーションの名前です。</span><span class="sxs-lookup"><span data-stu-id="17102-146">Name of the Service Fabric application that contains the actor service hosting the actor objects.</span></span> <span data-ttu-id="17102-147">このパラメーターは、クライアントがその同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることはできます。</span><span class="sxs-lookup"><span data-stu-id="17102-147">This parameter can be null if the client is running as part of that same Service Fabric application.</span></span> <span data-ttu-id="17102-148">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17102-148">For more information, see Remarks.</span></span> </p>'
        - id: serviceName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-149">Service Fabric サービスによって構成されたとおりの名前<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>アクターの実装にします。</span><span class="sxs-lookup"><span data-stu-id="17102-149">Name of the Service Fabric service as configured by <xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> on the actor implementation.</span></span> <span data-ttu-id="17102-150">既定では、サービスの名前は、アクター インターフェイスの名前から派生します。</span><span class="sxs-lookup"><span data-stu-id="17102-150">By default, the name of the service is derived from the name of the actor interface.</span></span> <span data-ttu-id="17102-151">ただし<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>はアクターが 1 つ以上にアクター インターフェイスを実装するか、serviceName の決定は自動的に加えられることはできません、アクター インターフェイスが別のアクター インターフェイスから派生した場合に必要です。</span><span class="sxs-lookup"><span data-stu-id="17102-151">However <xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically.</span></span> </p>'
        - id: listenerName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-152">既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。</span><span class="sxs-lookup"><span data-stu-id="17102-152">By default an actor service has only one listener for clients to connect to and communicate with.</span></span> <span data-ttu-id="17102-153">複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="17102-153">However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.</span></span> </p>'
      return:
        type: 1e2c6103microsoft.servicefabric.actors._actor21353812
        description: <p><span data-ttu-id="17102-154">実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> TActorInterface とします。</span><span class="sxs-lookup"><span data-stu-id="17102-154">An actor proxy object that implements <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and TActorInterface.</span></span> </p>
    exceptions:
      - type: '44102508'
        description: <p><span data-ttu-id="17102-155">無効な URI の形式が applicationName として渡されるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17102-155">Throws exception when invalid URI format is passed as applicationName</span></span> </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,URI)'
    id: 'create(Class<T>,ActorId,URI)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)'
    nameWithType: 'ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)'
    fullName: 'static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 218
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-156">アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</span><span class="sxs-lookup"><span data-stu-id="17102-156">Creates a proxy to the actor object that implements an actor interface.</span></span></p>
      <p></p>
    syntax:
      content: 'public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p><span data-ttu-id="17102-157">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-157">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-158">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-158">The returned proxy object will implement this interface.</span></span> </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p><span data-ttu-id=\"17102-159\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-159\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">Actor</xref> Id of the proxy actor object.</span></span> <span data-ttu-id=\"17102-160\">このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-160\">Methods called on this proxy will result in requests being sent to the actor with this id.</span></span> </p>"
        - id: serviceUri
          type: '62304784'
          description: <p><span data-ttu-id="17102-161">アクター サービスの Uri</span><span class="sxs-lookup"><span data-stu-id="17102-161">Uri of the actor service</span></span> </p>
      return:
        type: 1e2c6103microsoft.servicefabric.actors._actor21353812
        description: <p><span data-ttu-id="17102-162">実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> TActorInterface とします。</span><span class="sxs-lookup"><span data-stu-id="17102-162">An actor proxy object that implements <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and TActorInterface.</span></span> <span data-ttu-id="17102-163">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-163">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-164">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-164">The returned proxy object will implement this interface.</span></span> </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.create(Class<T>,ActorId,URI,String)'
    id: 'create(Class<T>,ActorId,URI,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)'
    nameWithType: 'ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)'
    fullName: 'static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 248
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-165">アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</span><span class="sxs-lookup"><span data-stu-id="17102-165">Creates a proxy to the actor object that implements an actor interface.</span></span></p>
      <p></p>
    syntax:
      content: 'public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p><span data-ttu-id="17102-166">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-166">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-167">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-167">The returned proxy object will implement this interface.</span></span> </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p><span data-ttu-id=\"17102-168\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-168\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">Actor</xref> Id of the proxy actor object.</span></span> <span data-ttu-id=\"17102-169\">このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-169\">Methods called on this proxy will result in requests being sent to the actor with this id.</span></span> </p>"
        - id: serviceUri
          type: '62304784'
          description: <p><span data-ttu-id="17102-170">アクター サービスの Uri</span><span class="sxs-lookup"><span data-stu-id="17102-170">Uri of the actor service</span></span> </p>
        - id: listenerName
          type: '26831127'
          description: '<p><span data-ttu-id="17102-171">既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。</span><span class="sxs-lookup"><span data-stu-id="17102-171">By default an actor service has only one listener for clients to connect to and communicate with.</span></span> <span data-ttu-id="17102-172">複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="17102-172">However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.</span></span> </p>'
      return:
        type: 1e2c6103microsoft.servicefabric.actors._actor21353812
        description: <p><span data-ttu-id="17102-173">実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> TActorInterface とします。</span><span class="sxs-lookup"><span data-stu-id="17102-173">An actor proxy object that implements <xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and TActorInterface.</span></span> <span data-ttu-id="17102-174">リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-174">The actor interface implemented by the remote actor object.</span></span> <span data-ttu-id="17102-175">返されるプロキシ オブジェクトでは、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="17102-175">The returned proxy object will implement this interface.</span></span> </p>
  - uid: microsoft.servicefabric.actors._actor_proxy_base.createRequestMessageBody(Object)
    id: createRequestMessageBody(Object)
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: createRequestMessageBody(Object requestMessageBodyValue)
    nameWithType: ActorProxyBase.createRequestMessageBody(Object requestMessageBodyValue)
    fullName: Object microsoft.servicefabric.actors.ActorProxyBase.createRequestMessageBody(Object requestMessageBodyValue)
    overload: microsoft.servicefabric.actors._actor_proxy_base.createRequestMessageBody*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 325
    package: microsoft.servicefabric.actors
    syntax:
      content: protected Object createRequestMessageBody(Object requestMessageBodyValue)
      parameters:
        - id: requestMessageBodyValue
          type: '79317049'
      return:
        type: '79317049'
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.deserializeMessage(byte [])'
    id: 'deserializeMessage(byte [])'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'deserializeMessage(byte[] msgBodyValue)'
    nameWithType: 'ActorProxyBase.deserializeMessage(byte[] msgBodyValue)'
    fullName: 'Object microsoft.servicefabric.actors.ActorProxyBase.deserializeMessage(byte[] msgBodyValue)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.deserializeMessage*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 321
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected Object deserializeMessage(byte[] msgBodyValue)'
      parameters:
        - id: msgBodyValue
          type: ccd9418d
      return:
        type: '79317049'
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getActorId()
    id: getActorId()
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: getActorId()
    nameWithType: ActorProxyBase.getActorId()
    fullName: ActorId microsoft.servicefabric.actors.ActorProxyBase.getActorId()
    overload: microsoft.servicefabric.actors._actor_proxy_base.getActorId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 28
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-176">取得<xref uid="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorId</xref>プロキシ オブジェクトに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="17102-176">Gets <xref uid="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorId</xref> associated with the proxy object.</span></span></p>
      <p></p>
    syntax:
      content: public ActorId getActorId()
      return:
        type: microsoft.servicefabric.actors._actor_id
        description: "<p><span data-ttu-id=\"17102-177\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorId</xref>プロキシ オブジェクトに関連付けられています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-177\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorId</xref> associated with the proxy object.</span></span> </p>"
    overridden: microsoft.servicefabric.actors._actor_proxy.getActorId()
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient()
    id: getActorServicePartitionClient()
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: getActorServicePartitionClient()
    nameWithType: ActorProxyBase.getActorServicePartitionClient()
    fullName: ActorServicePartitionClientImpl microsoft.servicefabric.actors.ActorProxyBase.getActorServicePartitionClient()
    overload: microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 39
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="17102-178">取得<xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref>アクターとの通信にこのプロキシを使用しています。</span><span class="sxs-lookup"><span data-stu-id="17102-178">Gets <xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref> that this proxy is using to communicate with the actor.</span></span></p>
      <p></p>
    syntax:
      content: public ActorServicePartitionClientImpl getActorServicePartitionClient()
      return:
        type: ef7224bd
        description: "<p><span data-ttu-id=\"17102-179\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref>アクターとの通信にこのプロキシを使用しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-179\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref> that this proxy is using to communicate with the actor.</span></span> </p>"
    overridden: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient()
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getResponseMessageBodyValue(Object)
    id: getResponseMessageBodyValue(Object)
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: getResponseMessageBodyValue(Object responseMessageBody)
    nameWithType: ActorProxyBase.getResponseMessageBodyValue(Object responseMessageBody)
    fullName: Object microsoft.servicefabric.actors.ActorProxyBase.getResponseMessageBodyValue(Object responseMessageBody)
    overload: microsoft.servicefabric.actors._actor_proxy_base.getResponseMessageBodyValue*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 348
    package: microsoft.servicefabric.actors
    syntax:
      content: protected Object getResponseMessageBodyValue(Object responseMessageBody)
      parameters:
        - id: responseMessageBody
          type: '79317049'
      return:
        type: '79317049'
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.invoke(int,int,byte [])'
    id: 'invoke(int,int,byte [])'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    nameWithType: 'ActorProxyBase.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    fullName: 'void microsoft.servicefabric.actors.ActorProxyBase.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.invoke*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 331
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected void invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
      parameters:
        - id: interfaceId
          type: f75371fa
        - id: methodId
          type: f75371fa
        - id: requestMsgBodyBytes
          type: ccd9418d
  - uid: 'microsoft.servicefabric.actors._actor_proxy_base.invokeAsync(int,int,byte [],CancellationToken)'
    id: 'invokeAsync(int,int,byte [],CancellationToken)'
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: 'invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
    nameWithType: 'ActorProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.invokeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 338
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected CompletableFuture<byte[]> invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
      parameters:
        - id: interfaceId
          type: f75371fa
        - id: methodId
          type: f75371fa
        - id: requestMsgBodyBytes
          type: ccd9418d
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 5fe2dfa4
  - uid: microsoft.servicefabric.actors._actor_proxy_base.serializeMessage(Object)
    id: serializeMessage(Object)
    parent: microsoft.servicefabric.actors._actor_proxy_base
    href: microsoft.servicefabric.actors._actor_proxy_base.yml
    langs:
      - java
    name: serializeMessage(Object msgBodyValue)
    nameWithType: ActorProxyBase.serializeMessage(Object msgBodyValue)
    fullName: 'byte [] microsoft.servicefabric.actors.ActorProxyBase.serializeMessage(Object msgBodyValue)'
    overload: microsoft.servicefabric.actors._actor_proxy_base.serializeMessage*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      startLine: 317
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected byte [] serializeMessage(Object msgBodyValue)'
      parameters:
        - id: msgBodyValue
          type: '79317049'
      return:
        type: ccd9418d
references:
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getActorId*
    name: getActorId
    nameWithType: ActorProxyBase.getActorId
    fullName: ActorId microsoft.servicefabric.actors.ActorProxyBase.getActorId
    package: microsoft.servicefabric.actors
  - uid: ef7224bd
    spec.java:
      - name: ActorServicePartitionClientImpl
        fullName: ActorServicePartitionClientImpl
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient*
    name: getActorServicePartitionClient
    nameWithType: ActorProxyBase.getActorServicePartitionClient
    fullName: ActorServicePartitionClientImpl microsoft.servicefabric.actors.ActorProxyBase.getActorServicePartitionClient
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_proxy_base.ActorProxyBase*
    name: ActorProxyBase
    nameWithType: ActorProxyBase.ActorProxyBase
    fullName: microsoft.servicefabric.actors.ActorProxyBase.ActorProxyBase
    package: microsoft.servicefabric.actors
  - uid: '79317049'
    spec.java:
      - name: Object
        fullName: Object
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: microsoft.servicefabric.actors._actor_proxy_base.serializeMessage*
    name: serializeMessage
    nameWithType: ActorProxyBase.serializeMessage
    fullName: 'byte [] microsoft.servicefabric.actors.ActorProxyBase.serializeMessage'
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_proxy_base.deserializeMessage*
    name: deserializeMessage
    nameWithType: ActorProxyBase.deserializeMessage
    fullName: Object microsoft.servicefabric.actors.ActorProxyBase.deserializeMessage
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_proxy_base.createRequestMessageBody*
    name: createRequestMessageBody
    nameWithType: ActorProxyBase.createRequestMessageBody
    fullName: Object microsoft.servicefabric.actors.ActorProxyBase.createRequestMessageBody
    package: microsoft.servicefabric.actors
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: microsoft.servicefabric.actors._actor_proxy_base.invoke*
    name: invoke
    nameWithType: ActorProxyBase.invoke
    fullName: void microsoft.servicefabric.actors.ActorProxyBase.invoke
    package: microsoft.servicefabric.actors
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: microsoft.servicefabric.actors._actor_proxy_base.invokeAsync*
    name: invokeAsync
    nameWithType: ActorProxyBase.invokeAsync
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorProxyBase.invokeAsync'
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_proxy_base.getResponseMessageBodyValue*
    name: getResponseMessageBodyValue
    nameWithType: ActorProxyBase.getResponseMessageBodyValue
    fullName: Object microsoft.servicefabric.actors.ActorProxyBase.getResponseMessageBodyValue
    package: microsoft.servicefabric.actors
  - uid: '44102508'
    spec.java:
      - name: URISyntaxException
        fullName: URISyntaxException
  - uid: ffb09d2d
    spec.java:
      - name: Class<T>
        fullName: Class<T>
  - uid: 1e2c6103microsoft.servicefabric.actors._actor21353812
    spec.java:
      - name: 'static<T extends '
        fullName: 'static<T extends '
      - uid: microsoft.servicefabric.actors._actor
        name: Actor
        fullName: microsoft.servicefabric.actors.Actor
        href: microsoft.servicefabric.actors._actor.yml
      - name: '> T'
        fullName: '> T'
  - uid: microsoft.servicefabric.actors._actor_proxy_base.create*
    name: create
    nameWithType: ActorProxyBase.create
    fullName: static <T extends Actor> T microsoft.servicefabric.actors.ActorProxyBase.create
    package: microsoft.servicefabric.actors
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: microsoft.servicefabric.services.remoting.builder._proxy_base.continueWith(CompletableFuture<Object>)
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: continueWith(CompletableFuture<Object> future)
    nameWithType: ProxyBase.continueWith(CompletableFuture<Object> future)
    fullName: CompletableFuture<?> microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object> future)
    type: Method
    summary: <p><span data-ttu-id="17102-180">応答本文を取得する値を持たない後も続行する、生成されたプロキシ クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="17102-180">Called by the generated proxy class to continue after getting the response body that does not have value.</span></span> </p>
    syntax:
      content: protected CompletableFuture<?> continueWith(CompletableFuture<Object> future)
      parameters:
        - id: future
          type: 55aa5245
          description: <p><span data-ttu-id="17102-181">A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>リモート メソッド呼び出しの非同期操作を表すです。</span><span class="sxs-lookup"><span data-stu-id="17102-181">A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation for remote method call.</span></span> </p>
      return:
        type: 16409f84
        description: <p><span data-ttu-id="17102-182">A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>リモート メソッド呼び出しの非同期操作を表すです。</span><span class="sxs-lookup"><span data-stu-id="17102-182">A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation for remote method call.</span></span> </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.getReturnValue(int,int,Object)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'getReturnValue(int interfaceId, int methodId, Object responseBody)'
    nameWithType: 'ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)'
    fullName: 'abstract Object microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)'
    type: Method
    summary: <p><span data-ttu-id="17102-183">キャスト、応答本文を入力して、値を抽出し、派生クラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="17102-183">Implemented by the derived class to type cast the response body and extract the value from it.</span></span> </p>
    syntax:
      content: 'protected abstract Object getReturnValue(int interfaceId, int methodId, Object responseBody)'
      parameters:
        - id: interfaceId
          type: f75371fa
          description: <p><span data-ttu-id="17102-184">アクター インターフェイスのインターフェイス Id です。</span><span class="sxs-lookup"><span data-stu-id="17102-184">Interface Id for the actor interface.</span></span> </p>
        - id: methodId
          type: f75371fa
          description: <p><span data-ttu-id="17102-185">アクター メソッドのメソッドの Id。</span><span class="sxs-lookup"><span data-stu-id="17102-185">Method Id for the actor method.</span></span> </p>
        - id: responseBody
          type: '79317049'
          description: <p><span data-ttu-id="17102-186">応答本文です。</span><span class="sxs-lookup"><span data-stu-id="17102-186">Response body.</span></span> </p>
      return:
        type: 1377799a
        description: <p><span data-ttu-id="17102-187">戻り値としてのメソッド呼び出しの<xref uid="" data-throw-if-not-resolved="false">オブジェクト</xref>です。</span><span class="sxs-lookup"><span data-stu-id="17102-187">Return value of method call as <xref uid="" data-throw-if-not-resolved="false">Object</xref>.</span></span> </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.invoke(int,int,Object)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
    nameWithType: 'ProxyBase.invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
    fullName: 'void microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
    type: Method
    summary: <p><span data-ttu-id="17102-188">リモート オブジェクトにメッセージを送信する、生成されたプロキシ クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="17102-188">Called by the generated proxy class to send the message to the remote object.</span></span> </p>
    syntax:
      content: 'protected void invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
      parameters:
        - id: interfaceId
          type: f75371fa
          description: <p><span data-ttu-id="17102-189">リモート インターフェイスの id です。</span><span class="sxs-lookup"><span data-stu-id="17102-189">Id of the remote interface.</span></span> </p>
        - id: methodId
          type: f75371fa
          description: <p><span data-ttu-id="17102-190">Invokved するリモート メソッドの id です。</span><span class="sxs-lookup"><span data-stu-id="17102-190">Id of the remote method to be invokved.</span></span> </p>
        - id: requestMsgBodyValue
          type: '79317049'
          description: <p><span data-ttu-id="17102-191">リモート オブジェクトに送信されるメッセージの本文。</span><span class="sxs-lookup"><span data-stu-id="17102-191">Message body to be sent to remote object.</span></span> </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,Object,CancellationToken)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
    nameWithType: 'ProxyBase.invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Object> microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
    type: Method
    summary: <p><span data-ttu-id="17102-192">リモート オブジェクトに要求を送信し、応答を受け取るに生成されたプロキシ クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="17102-192">Called by the generated proxy class to send the request to the remote object and get the response back.</span></span> </p>
    syntax:
      content: 'protected CompletableFuture<Object> invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
      parameters:
        - id: interfaceId
          type: f75371fa
          description: <p><span data-ttu-id="17102-193">リモート インターフェイスの id です。</span><span class="sxs-lookup"><span data-stu-id="17102-193">Id of the remote interface.</span></span> </p>
        - id: methodId
          type: f75371fa
          description: <p><span data-ttu-id="17102-194">リモート メソッドを呼び出すの id です。</span><span class="sxs-lookup"><span data-stu-id="17102-194">Id of the remote method to be invoked.</span></span> </p>
        - id: requestMsgBodyValue
          type: '79317049'
          description: <p><span data-ttu-id="17102-195">要求本文です。</span><span class="sxs-lookup"><span data-stu-id="17102-195">Request body.</span></span> </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 55aa5245
        description: <p><span data-ttu-id="17102-196">A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>リモート オブジェクトに非同期操作の非同期呼び出しを表すです。</span><span class="sxs-lookup"><span data-stu-id="17102-196">A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation async call to remote object.</span></span> </p>
  - uid: microsoft.servicefabric.services.remoting.builder._proxy_base.ProxyBase()
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: ProxyBase()
    nameWithType: ProxyBase.ProxyBase()
    fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
    type: Constructor
    summary: <p><span data-ttu-id="17102-197">新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.services.remoting.builder._proxy_base" data-throw-if-not-resolved="false">ProxyBase</xref>クラスです。</span><span class="sxs-lookup"><span data-stu-id="17102-197">Initializes a new instance of the <xref uid="microsoft.servicefabric.services.remoting.builder._proxy_base" data-throw-if-not-resolved="false">ProxyBase</xref> class.</span></span> </p>
    syntax:
      content: protected ProxyBase()
  - uid: microsoft.servicefabric.services.remoting.builder._proxy_base
    parent: microsoft.servicefabric.services.remoting.builder
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: ProxyBase
    nameWithType: ProxyBase
    fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase
    type: Class
    summary: <p><span data-ttu-id="17102-198">リモート インターフェイスのプロキシを生成するコード ジェネレーターのリモート処理によって使用される基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="17102-198">The base class used by remoting code generator to generate the proxy for the remoted interfaces.</span></span> </p>
    syntax:
      content: public class ProxyBase
  - uid: microsoft.servicefabric.actors._actor_proxy
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_proxy.yml
    name: ActorProxy
    nameWithType: ActorProxy
    fullName: microsoft.servicefabric.actors.ActorProxy
    type: Interface
    summary: <p><span data-ttu-id="17102-199">アクター サービスに対するプロキシ アクセスを実装するため、インターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17102-199">Provides the interface for implementation of proxy access for actor service.</span></span> </p>
    syntax:
      content: public interface ActorProxy
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    name: FabricActorProxyFactory
    nameWithType: FabricActorProxyFactory
    fullName: microsoft.servicefabric.actors.FabricActorProxyFactory
    type: Class
    summary: <p><span data-ttu-id="17102-200">リモートのアクターのオブジェクトへのプロキシを作成するファクトリ クラスです。</span><span class="sxs-lookup"><span data-stu-id="17102-200">Factory class to create a proxy to the remote actor objects.</span></span> </p>
    syntax:
      content: public class FabricActorProxyFactory
  - uid: microsoft.servicefabric.actors._actor_id
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_id.yml
    name: ActorId
    nameWithType: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    type: Class
    summary: "<p><span data-ttu-id=\"17102-201\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">ActorId</xref>アクター サービス内でアクターの id を表します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-201\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">ActorId</xref> represents identity of an actor within an actor service.</span></span> <span data-ttu-id=\"17102-202\">アクターによって識別できます<xref uid=\"\" data-throw-if-not-resolved=\"false\">java.lang.String</xref>、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.UUID</xref>か、または長。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-202\">The actors can be identified by <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.lang.String</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.UUID</xref> or long.</span></span> </p>"
    syntax:
      content: public class ActorId
  - uid: microsoft.servicefabric.actors._actor_proxy.getActorId()
    parent: microsoft.servicefabric.actors._actor_proxy
    href: microsoft.servicefabric.actors._actor_proxy.yml
    name: getActorId()
    nameWithType: ActorProxy.getActorId()
    fullName: ActorId microsoft.servicefabric.actors.ActorProxy.getActorId()
    type: Method
    summary: |-
      <p><span data-ttu-id="17102-203">取得<xref uid="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorId</xref>プロキシ オブジェクトに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="17102-203">Gets <xref uid="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorId</xref> associated with the proxy object.</span></span></p>
      <p></p>
    syntax:
      content: public ActorId getActorId()
      return:
        type: microsoft.servicefabric.actors._actor_id
        description: "<p><span data-ttu-id=\"17102-204\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorId</xref>プロキシ オブジェクトに関連付けられています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-204\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorId</xref> associated with the proxy object.</span></span> </p>"
  - uid: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient()
    parent: microsoft.servicefabric.actors._actor_proxy
    href: microsoft.servicefabric.actors._actor_proxy.yml
    name: getActorServicePartitionClient()
    nameWithType: ActorProxy.getActorServicePartitionClient()
    fullName: ActorServicePartitionClientImpl microsoft.servicefabric.actors.ActorProxy.getActorServicePartitionClient()
    type: Method
    summary: |-
      <p><span data-ttu-id="17102-205">取得<xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref>アクターとの通信にこのプロキシを使用しています。</span><span class="sxs-lookup"><span data-stu-id="17102-205">Gets <xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref> that this proxy is using to communicate with the actor.</span></span></p>
      <p></p>
    syntax:
      content: public ActorServicePartitionClientImpl getActorServicePartitionClient()
      return:
        type: ef7224bd
        description: "<p><span data-ttu-id=\"17102-206\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref>アクターとの通信にこのプロキシを使用しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"17102-206\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.ActorServicePartitionClientImpl</xref> that this proxy is using to communicate with the actor.</span></span> </p>"
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p><span data-ttu-id="17102-207">A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。</span><span class="sxs-lookup"><span data-stu-id="17102-207">A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled.</span></span> <span data-ttu-id="17102-208">インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="17102-208">You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method.</span></span> <span data-ttu-id="17102-209">キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。</span><span class="sxs-lookup"><span data-stu-id="17102-209">You then pass the cancellation token to any number of operations that should receive notice of cancellation.</span></span> <span data-ttu-id="17102-210">取り消しを開始するトークンを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="17102-210">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="17102-211">所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。</span><span class="sxs-lookup"><span data-stu-id="17102-211">When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true.</span></span> <span data-ttu-id="17102-212">通知を受信するオブジェクトは、適切な方法で応答できます。</span><span class="sxs-lookup"><span data-stu-id="17102-212">The objects that receive the notification can respond in whatever manner is appropriate.</span></span> </p>'
    syntax:
      content: public class CancellationToken
  - uid: microsoft.servicefabric.actors._actor
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor.yml
    name: Actor
    nameWithType: Actor
    fullName: microsoft.servicefabric.actors.Actor
    type: Interface
    summary: <p><span data-ttu-id="17102-213">信頼できるアクターのインターフェイスを継承するための基本インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="17102-213">Base interface for inheriting reliable actor interfaces.</span></span> </p>
    syntax:
      content: public interface Actor
  - uid: system.fabric._code_package_activation_context
    parent: system.fabric
    href: system.fabric._code_package_activation_context.yml
    name: CodePackageActivationContext
    nameWithType: CodePackageActivationContext
    fullName: system.fabric.CodePackageActivationContext
    type: Interface
    summary: <p><span data-ttu-id="17102-214">Service Fabric サービスのアクティブ化コンテキストを表します。</span><span class="sxs-lookup"><span data-stu-id="17102-214">Represents activation context for the Service Fabric service.</span></span> <span data-ttu-id="17102-215">これは、ファブリックのアクティブ化サービスでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="17102-215">This is valid for fabric activated service only.</span></span> </p>
    syntax:
      content: public interface CodePackageActivationContext
  - uid: system.fabric._code_package_activation_context.getApplicationName()
    parent: system.fabric._code_package_activation_context
    href: system.fabric._code_package_activation_context.yml
    name: getApplicationName()
    nameWithType: CodePackageActivationContext.getApplicationName()
    fullName: String system.fabric.CodePackageActivationContext.getApplicationName()
    type: Method
    summary: |-
      <p><span data-ttu-id="17102-216">アプリケーションの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="17102-216">Gets the name of the application.</span></span></p>
      <p></p>
    syntax:
      content: public String getApplicationName()
      return:
        type: '26831127'
        description: <p><span data-ttu-id="17102-217">アプリケーションの名前です。</span><span class="sxs-lookup"><span data-stu-id="17102-217">The name of the application.</span></span> </p>
  - uid: microsoft.servicefabric.actors._actor_service_attribute
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_service_attribute.yml
    name: ActorServiceAttribute
    nameWithType: ActorServiceAttribute
    fullName: microsoft.servicefabric.actors.ActorServiceAttribute
    type: Interface
    summary: <p><span data-ttu-id="17102-218">この属性は、アクター サービスのプロパティを構成できます。</span><span class="sxs-lookup"><span data-stu-id="17102-218">This attributes allows configuring the properties of the actor service.</span></span> <span data-ttu-id="17102-219">属性は、アクターの型に適用されます。</span><span class="sxs-lookup"><span data-stu-id="17102-219">The attribute is applied on the actor type.</span></span> </p>
    syntax:
      content: public interface ActorServiceAttribute