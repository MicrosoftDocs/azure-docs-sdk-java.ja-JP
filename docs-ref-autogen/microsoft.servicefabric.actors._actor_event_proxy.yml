### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_event_proxy
    id: _actor_event_proxy
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_event_proxy.ActorEventProxy()
      - microsoft.servicefabric.actors._actor_event_proxy.createRequestMessageBody(Object)
      - 'microsoft.servicefabric.actors._actor_event_proxy.deserializeMessage(byte [])'
      - microsoft.servicefabric.actors._actor_event_proxy.getResponseMessageBodyValue(Object)
      - 'microsoft.servicefabric.actors._actor_event_proxy.invoke(int,int,byte [])'
      - 'microsoft.servicefabric.actors._actor_event_proxy.invokeAsync(int,int,byte [])'
      - microsoft.servicefabric.actors._actor_event_proxy.serializeMessage(Object)
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: ActorEventProxy
    nameWithType: ActorEventProxy
    fullName: microsoft.servicefabric.actors.ActorEventProxy
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 15
    package: microsoft.servicefabric.actors
    summary: <p>アクター イベント サブスクライバーでメソッドを呼び出すプロキシの基本実装を提供します。 </p>
    syntax: &ref_1
      content: public class ActorEventProxy extends ProxyBase
    inheritance:
      - java.lang.Object
      - microsoft.servicefabric.services.remoting.builder._proxy_base
    inheritedMembers:
      - microsoft.servicefabric.services.remoting.builder._proxy_base.continueWith(CompletableFuture<Object>)
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.getReturnValue(int,int,Object)'
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.invoke(int,int,Object)'
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,Object,CancellationToken)'
      - 'microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,byte [],CancellationToken)'
      - microsoft.servicefabric.services.remoting.builder._proxy_base.ProxyBase()
  - uid: microsoft.servicefabric.actors._actor_event_proxy.ActorEventProxy()
    id: ActorEventProxy()
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: ActorEventProxy()
    nameWithType: ActorEventProxy.ActorEventProxy()
    fullName: microsoft.servicefabric.actors.ActorEventProxy.ActorEventProxy()
    overload: microsoft.servicefabric.actors._actor_event_proxy.ActorEventProxy*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 23
    package: microsoft.servicefabric.actors
    summary: <p>新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.actors._actor_event_proxy" data-throw-if-not-resolved="false">ActorEventProxy</xref>クラスです。 </p>
    syntax:
      content: protected ActorEventProxy()
  - uid: microsoft.servicefabric.actors._actor_event_proxy.createRequestMessageBody(Object)
    id: createRequestMessageBody(Object)
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: createRequestMessageBody(Object requestMessageBodyValue)
    nameWithType: ActorEventProxy.createRequestMessageBody(Object requestMessageBodyValue)
    fullName: Object microsoft.servicefabric.actors.ActorEventProxy.createRequestMessageBody(Object requestMessageBodyValue)
    overload: microsoft.servicefabric.actors._actor_event_proxy.createRequestMessageBody*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 79
    package: microsoft.servicefabric.actors
    syntax:
      content: protected Object createRequestMessageBody(Object requestMessageBodyValue)
      parameters:
        - id: requestMessageBodyValue
          type: '79317049'
      return:
        type: '79317049'
  - uid: 'microsoft.servicefabric.actors._actor_event_proxy.deserializeMessage(byte [])'
    id: 'deserializeMessage(byte [])'
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: 'deserializeMessage(byte[] msgBodyValue)'
    nameWithType: 'ActorEventProxy.deserializeMessage(byte[] msgBodyValue)'
    fullName: 'Object microsoft.servicefabric.actors.ActorEventProxy.deserializeMessage(byte[] msgBodyValue)'
    overload: microsoft.servicefabric.actors._actor_event_proxy.deserializeMessage*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 75
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected Object deserializeMessage(byte[] msgBodyValue)'
      parameters:
        - id: msgBodyValue
          type: ccd9418d
      return:
        type: '79317049'
  - uid: microsoft.servicefabric.actors._actor_event_proxy.getResponseMessageBodyValue(Object)
    id: getResponseMessageBodyValue(Object)
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: getResponseMessageBodyValue(Object responseMessageBody)
    nameWithType: ActorEventProxy.getResponseMessageBodyValue(Object responseMessageBody)
    fullName: Object microsoft.servicefabric.actors.ActorEventProxy.getResponseMessageBodyValue(Object responseMessageBody)
    overload: microsoft.servicefabric.actors._actor_event_proxy.getResponseMessageBodyValue*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 96
    package: microsoft.servicefabric.actors
    syntax:
      content: protected Object getResponseMessageBodyValue(Object responseMessageBody)
      parameters:
        - id: responseMessageBody
          type: '79317049'
      return:
        type: '79317049'
  - uid: 'microsoft.servicefabric.actors._actor_event_proxy.invoke(int,int,byte [])'
    id: 'invoke(int,int,byte [])'
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: 'invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    nameWithType: 'ActorEventProxy.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    fullName: 'void microsoft.servicefabric.actors.ActorEventProxy.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    overload: microsoft.servicefabric.actors._actor_event_proxy.invoke*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 85
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected void invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
      parameters:
        - id: interfaceId
          type: f75371fa
        - id: methodId
          type: f75371fa
        - id: requestMsgBodyBytes
          type: ccd9418d
  - uid: 'microsoft.servicefabric.actors._actor_event_proxy.invokeAsync(int,int,byte [])'
    id: 'invokeAsync(int,int,byte [])'
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: 'invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    nameWithType: 'ActorEventProxy.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorEventProxy.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
    overload: microsoft.servicefabric.actors._actor_event_proxy.invokeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 91
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected CompletableFuture<byte[]> invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)'
      parameters:
        - id: interfaceId
          type: f75371fa
        - id: methodId
          type: f75371fa
        - id: requestMsgBodyBytes
          type: ccd9418d
      return:
        type: 5fe2dfa4
  - uid: microsoft.servicefabric.actors._actor_event_proxy.serializeMessage(Object)
    id: serializeMessage(Object)
    parent: microsoft.servicefabric.actors._actor_event_proxy
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    langs:
      - java
    name: serializeMessage(Object msgBodyValue)
    nameWithType: ActorEventProxy.serializeMessage(Object msgBodyValue)
    fullName: 'byte [] microsoft.servicefabric.actors.ActorEventProxy.serializeMessage(Object msgBodyValue)'
    overload: microsoft.servicefabric.actors._actor_event_proxy.serializeMessage*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorEventProxy.java
      startLine: 71
    package: microsoft.servicefabric.actors
    syntax:
      content: 'protected byte [] serializeMessage(Object msgBodyValue)'
      parameters:
        - id: msgBodyValue
          type: '79317049'
      return:
        type: ccd9418d
references:
  - uid: microsoft.servicefabric.actors._actor_event_proxy.ActorEventProxy*
    name: ActorEventProxy
    nameWithType: ActorEventProxy.ActorEventProxy
    fullName: microsoft.servicefabric.actors.ActorEventProxy.ActorEventProxy
    package: microsoft.servicefabric.actors
  - uid: '79317049'
    spec.java:
      - name: Object
        fullName: Object
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: microsoft.servicefabric.actors._actor_event_proxy.serializeMessage*
    name: serializeMessage
    nameWithType: ActorEventProxy.serializeMessage
    fullName: 'byte [] microsoft.servicefabric.actors.ActorEventProxy.serializeMessage'
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_event_proxy.deserializeMessage*
    name: deserializeMessage
    nameWithType: ActorEventProxy.deserializeMessage
    fullName: Object microsoft.servicefabric.actors.ActorEventProxy.deserializeMessage
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_event_proxy.createRequestMessageBody*
    name: createRequestMessageBody
    nameWithType: ActorEventProxy.createRequestMessageBody
    fullName: Object microsoft.servicefabric.actors.ActorEventProxy.createRequestMessageBody
    package: microsoft.servicefabric.actors
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: microsoft.servicefabric.actors._actor_event_proxy.invoke*
    name: invoke
    nameWithType: ActorEventProxy.invoke
    fullName: void microsoft.servicefabric.actors.ActorEventProxy.invoke
    package: microsoft.servicefabric.actors
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: microsoft.servicefabric.actors._actor_event_proxy.invokeAsync*
    name: invokeAsync
    nameWithType: ActorEventProxy.invokeAsync
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorEventProxy.invokeAsync'
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_event_proxy.getResponseMessageBodyValue*
    name: getResponseMessageBodyValue
    nameWithType: ActorEventProxy.getResponseMessageBodyValue
    fullName: Object microsoft.servicefabric.actors.ActorEventProxy.getResponseMessageBodyValue
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.services.remoting.builder._proxy_base.continueWith(CompletableFuture<Object>)
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: continueWith(CompletableFuture<Object> future)
    nameWithType: ProxyBase.continueWith(CompletableFuture<Object> future)
    fullName: CompletableFuture<?> microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object> future)
    type: Method
    summary: <p>応答本文を取得する値を持たない後も続行する、生成されたプロキシ クラスによって呼び出されます。 </p>
    syntax:
      content: protected CompletableFuture<?> continueWith(CompletableFuture<Object> future)
      parameters:
        - id: future
          type: 55aa5245
          description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>リモート メソッド呼び出しの非同期操作を表すです。 </p>
      return:
        type: 16409f84
        description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>リモート メソッド呼び出しの非同期操作を表すです。 </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.getReturnValue(int,int,Object)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'getReturnValue(int interfaceId, int methodId, Object responseBody)'
    nameWithType: 'ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)'
    fullName: 'abstract Object microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)'
    type: Method
    summary: <p>キャスト、応答本文を入力して、値を抽出し、派生クラスによって実装されます。 </p>
    syntax:
      content: 'protected abstract Object getReturnValue(int interfaceId, int methodId, Object responseBody)'
      parameters:
        - id: interfaceId
          type: f75371fa
          description: <p>アクター インターフェイスのインターフェイス Id です。 </p>
        - id: methodId
          type: f75371fa
          description: <p>アクター メソッドのメソッドの Id。 </p>
        - id: responseBody
          type: '79317049'
          description: <p>応答本文です。 </p>
      return:
        type: 1377799a
        description: <p>戻り値としてのメソッド呼び出しの<xref uid="" data-throw-if-not-resolved="false">オブジェクト</xref>です。 </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.invoke(int,int,Object)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
    nameWithType: 'ProxyBase.invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
    fullName: 'void microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
    type: Method
    summary: <p>リモート オブジェクトにメッセージを送信する、生成されたプロキシ クラスによって呼び出されます。 </p>
    syntax:
      content: 'protected void invoke(int interfaceId, int methodId, Object requestMsgBodyValue)'
      parameters:
        - id: interfaceId
          type: f75371fa
          description: <p>リモート インターフェイスの id です。 </p>
        - id: methodId
          type: f75371fa
          description: <p>Invokved するリモート メソッドの id です。 </p>
        - id: requestMsgBodyValue
          type: '79317049'
          description: <p>リモート オブジェクトに送信されるメッセージの本文。 </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,Object,CancellationToken)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
    nameWithType: 'ProxyBase.invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Object> microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
    type: Method
    summary: <p>リモート オブジェクトに要求を送信し、応答を受け取るに生成されたプロキシ クラスによって呼び出されます。 </p>
    syntax:
      content: 'protected CompletableFuture<Object> invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)'
      parameters:
        - id: interfaceId
          type: f75371fa
          description: <p>リモート インターフェイスの id です。 </p>
        - id: methodId
          type: f75371fa
          description: <p>リモート メソッドを呼び出すの id です。 </p>
        - id: requestMsgBodyValue
          type: '79317049'
          description: <p>要求本文です。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 55aa5245
        description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>リモート オブジェクトに非同期操作の非同期呼び出しを表すです。 </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,byte [],CancellationToken)'
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: 'invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
    nameWithType: 'ProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
    fullName: 'abstract CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
    type: Method
    syntax:
      content: 'protected abstract CompletableFuture<byte[]> invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)'
      parameters:
        - id: interfaceId
          type: f75371fa
        - id: methodId
          type: f75371fa
        - id: requestMsgBodyBytes
          type: ccd9418d
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: c496e2c5
  - uid: microsoft.servicefabric.services.remoting.builder._proxy_base.ProxyBase()
    parent: microsoft.servicefabric.services.remoting.builder._proxy_base
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: ProxyBase()
    nameWithType: ProxyBase.ProxyBase()
    fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
    type: Constructor
    summary: <p>新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.services.remoting.builder._proxy_base" data-throw-if-not-resolved="false">ProxyBase</xref>クラスです。 </p>
    syntax:
      content: protected ProxyBase()
  - uid: microsoft.servicefabric.services.remoting.builder._proxy_base
    parent: microsoft.servicefabric.services.remoting.builder
    href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
    name: ProxyBase
    nameWithType: ProxyBase
    fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase
    type: Class
    summary: <p>リモート インターフェイスのプロキシを生成するコード ジェネレーターのリモート処理によって使用される基本クラスです。 </p>
    syntax:
      content: public class ProxyBase
  - uid: microsoft.servicefabric.actors._actor_event_proxy
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_event_proxy.yml
    name: ActorEventProxy
    nameWithType: ActorEventProxy
    fullName: microsoft.servicefabric.actors.ActorEventProxy
    type: Class
    summary: <p>アクター イベント サブスクライバーでメソッドを呼び出すプロキシの基本実装を提供します。 </p>
    syntax: *ref_1