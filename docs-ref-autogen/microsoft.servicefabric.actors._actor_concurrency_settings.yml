### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings
    id: _actor_concurrency_settings
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_concurrency_settings.ActorConcurrencySettings()
      - microsoft.servicefabric.actors._actor_concurrency_settings.getLockTimeout()
      - microsoft.servicefabric.actors._actor_concurrency_settings.getReentrancyMode()
      - microsoft.servicefabric.actors._actor_concurrency_settings.setLockTimeout(Duration)
      - microsoft.servicefabric.actors._actor_concurrency_settings.setReentrancyMode(ActorReentrancyMode)
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    langs:
      - java
    name: ActorConcurrencySettings
    nameWithType: ActorConcurrencySettings
    fullName: microsoft.servicefabric.actors.ActorConcurrencySettings
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
      startLine: 9
    package: microsoft.servicefabric.actors
    summary: <p><span data-ttu-id="38b5c-101">論理呼び出しコンテキスト ベースの再入のサポートの順番でディスパッチ アクター メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-101">The method calls on an actor dispatched via in turn with support for logical call context based reentrancy.</span></span> <span data-ttu-id="38b5c-102">このクラスは、アクターをベースにする同時実行のロックを構成する設定を提供します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-102">This class provides the settings to configure the turn based concurrency lock for actors.</span></span> </p>
    syntax: &ref_1
      content: public class ActorConcurrencySettings
    inheritance:
      - java.lang.Object
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.ActorConcurrencySettings()
    id: ActorConcurrencySettings()
    parent: microsoft.servicefabric.actors._actor_concurrency_settings
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    langs:
      - java
    name: ActorConcurrencySettings()
    nameWithType: ActorConcurrencySettings.ActorConcurrencySettings()
    fullName: microsoft.servicefabric.actors.ActorConcurrencySettings.ActorConcurrencySettings()
    overload: microsoft.servicefabric.actors._actor_concurrency_settings.ActorConcurrencySettings*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
      startLine: 18
    package: microsoft.servicefabric.actors
    summary: <p><span data-ttu-id="38b5c-103">新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.actors._actor_concurrency_settings" data-throw-if-not-resolved="false">ActorConcurrencySettings</xref>クラスです。</span><span class="sxs-lookup"><span data-stu-id="38b5c-103">Initializes a new instance of the <xref uid="microsoft.servicefabric.actors._actor_concurrency_settings" data-throw-if-not-resolved="false">ActorConcurrencySettings</xref> class.</span></span> </p>
    syntax:
      content: public ActorConcurrencySettings()
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.getLockTimeout()
    id: getLockTimeout()
    parent: microsoft.servicefabric.actors._actor_concurrency_settings
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    langs:
      - java
    name: getLockTimeout()
    nameWithType: ActorConcurrencySettings.getLockTimeout()
    fullName: Duration microsoft.servicefabric.actors.ActorConcurrencySettings.getLockTimeout()
    overload: microsoft.servicefabric.actors._actor_concurrency_settings.getLockTimeout*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
      startLine: 57
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="38b5c-104">セットのタイムアウトを有効にするには、同時実行のロックが基づいています。</span><span class="sxs-lookup"><span data-stu-id="38b5c-104">sets timeout for the turn based concurrency lock.</span></span> <span data-ttu-id="38b5c-105">スローする場合は、ランタイムは、メソッドの呼び出しをディスパッチするロックを取得できません、 <xref uid="microsoft.servicefabric.actors._actor_concurrency_lock_timeout_exception" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException</xref>例外。</span><span class="sxs-lookup"><span data-stu-id="38b5c-105">If the runtime cannot acquire the lock to dispatch the method call, it will throw <xref uid="microsoft.servicefabric.actors._actor_concurrency_lock_timeout_exception" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException</xref> exception.</span></span> <span data-ttu-id="38b5c-106">この例外は、論理呼び出しチェーンをアンワインドし、呼び出しは、時間の場合は、構成された最大時間を再試行します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-106">This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times.</span></span> <span data-ttu-id="38b5c-107">同時実行のロックの実際のタイムアウト値は、上位のように、ランタイムは、指定された値をランダムな間隔を追加できます。</span><span class="sxs-lookup"><span data-stu-id="38b5c-107">The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to the supplied value.</span></span></p>
      <p></p>
    syntax:
      content: public Duration getLockTimeout()
      return:
        type: e02a2de0
        description: <p><span data-ttu-id="38b5c-108">同時実行のロックを有効にするためのタイムアウトに基づいています。</span><span class="sxs-lookup"><span data-stu-id="38b5c-108">Timeout for the turn based concurrency lock.</span></span> </p>
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.getReentrancyMode()
    id: getReentrancyMode()
    parent: microsoft.servicefabric.actors._actor_concurrency_settings
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    langs:
      - java
    name: getReentrancyMode()
    nameWithType: ActorConcurrencySettings.getReentrancyMode()
    fullName: ActorReentrancyMode microsoft.servicefabric.actors.ActorConcurrencySettings.getReentrancyMode()
    overload: microsoft.servicefabric.actors._actor_concurrency_settings.getReentrancyMode*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
      startLine: 33
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="38b5c-109">アクター メソッド呼び出しの再入モードを取得します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-109">gets Reentrancy mode for actor method calls.</span></span></p>
      <p></p>
    syntax:
      content: public ActorReentrancyMode getReentrancyMode()
      return:
        type: microsoft.servicefabric.actors._actor_reentrancy_mode
        description: "<p><span data-ttu-id=\"38b5c-110\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_reentrancy_mode\" data-throw-if-not-resolved=\"false\">ActorReentrancyMode</xref>アクター メソッドの呼び出しです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"38b5c-110\">\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_reentrancy_mode\" data-throw-if-not-resolved=\"false\">ActorReentrancyMode</xref> for the actor method calls.</span></span> </p>"
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.setLockTimeout(Duration)
    id: setLockTimeout(Duration)
    parent: microsoft.servicefabric.actors._actor_concurrency_settings
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    langs:
      - java
    name: setLockTimeout(Duration timeout)
    nameWithType: ActorConcurrencySettings.setLockTimeout(Duration timeout)
    fullName: void microsoft.servicefabric.actors.ActorConcurrencySettings.setLockTimeout(Duration timeout)
    overload: microsoft.servicefabric.actors._actor_concurrency_settings.setLockTimeout*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
      startLine: 71
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="38b5c-111">セットのタイムアウトを有効にするには、同時実行のロックが基づいています。</span><span class="sxs-lookup"><span data-stu-id="38b5c-111">sets timeout for the turn based concurrency lock.</span></span> <span data-ttu-id="38b5c-112">スローする場合は、ランタイムは、メソッドの呼び出しをディスパッチするロックを取得できません、 <xref uid="microsoft.servicefabric.actors._actor_concurrency_lock_timeout_exception" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException</xref>例外。</span><span class="sxs-lookup"><span data-stu-id="38b5c-112">If the runtime cannot acquire the lock to dispatch the method call, it will throw <xref uid="microsoft.servicefabric.actors._actor_concurrency_lock_timeout_exception" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException</xref> exception.</span></span></p>
      <p></p>
    syntax:
      content: public void setLockTimeout(Duration timeout)
      parameters:
        - id: timeout
          type: e02a2de0
          description: <p><span data-ttu-id="38b5c-113">この例外は、論理呼び出しチェーンをアンワインドし、呼び出しは、時間の場合は、構成された最大時間を再試行します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-113">This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times.</span></span> <span data-ttu-id="38b5c-114">同時実行のロックの実際のタイムアウト値は、上位のように、ランタイムは、指定された値をランダムな間隔を追加できます。</span><span class="sxs-lookup"><span data-stu-id="38b5c-114">The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to the supplied value.</span></span> </p>
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.setReentrancyMode(ActorReentrancyMode)
    id: setReentrancyMode(ActorReentrancyMode)
    parent: microsoft.servicefabric.actors._actor_concurrency_settings
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    langs:
      - java
    name: setReentrancyMode(ActorReentrancyMode mode)
    nameWithType: ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode mode)
    fullName: void microsoft.servicefabric.actors.ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode mode)
    overload: microsoft.servicefabric.actors._actor_concurrency_settings.setReentrancyMode*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorConcurrencySettings.java
      startLine: 43
    package: microsoft.servicefabric.actors
    summary: |-
      <p><span data-ttu-id="38b5c-115">メソッドの呼び出しをアクターの再入モードに設定します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-115">sets Reentrancy mode for actor method calls.</span></span></p>
      <p></p>
    syntax:
      content: public void setReentrancyMode(ActorReentrancyMode mode)
      parameters:
        - id: mode
          type: microsoft.servicefabric.actors._actor_reentrancy_mode
          description: <p><span data-ttu-id="38b5c-116">再入モードです。</span><span class="sxs-lookup"><span data-stu-id="38b5c-116">reentrancy mode.</span></span> <span data-ttu-id="38b5c-117"><xref uid="microsoft.servicefabric.actors._actor_reentrancy_mode" data-throw-if-not-resolved="false">ActorReentrancyMode</xref>アクター メソッドの呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="38b5c-117"><xref uid="microsoft.servicefabric.actors._actor_reentrancy_mode" data-throw-if-not-resolved="false">ActorReentrancyMode</xref> for the actor method calls.</span></span> </p>
references:
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.ActorConcurrencySettings*
    name: ActorConcurrencySettings
    nameWithType: ActorConcurrencySettings.ActorConcurrencySettings
    fullName: microsoft.servicefabric.actors.ActorConcurrencySettings.ActorConcurrencySettings
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.getReentrancyMode*
    name: getReentrancyMode
    nameWithType: ActorConcurrencySettings.getReentrancyMode
    fullName: ActorReentrancyMode microsoft.servicefabric.actors.ActorConcurrencySettings.getReentrancyMode
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.setReentrancyMode*
    name: setReentrancyMode
    nameWithType: ActorConcurrencySettings.setReentrancyMode
    fullName: void microsoft.servicefabric.actors.ActorConcurrencySettings.setReentrancyMode
    package: microsoft.servicefabric.actors
  - uid: e02a2de0
    spec.java:
      - name: Duration
        fullName: Duration
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.getLockTimeout*
    name: getLockTimeout
    nameWithType: ActorConcurrencySettings.getLockTimeout
    fullName: Duration microsoft.servicefabric.actors.ActorConcurrencySettings.getLockTimeout
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings.setLockTimeout*
    name: setLockTimeout
    nameWithType: ActorConcurrencySettings.setLockTimeout
    fullName: void microsoft.servicefabric.actors.ActorConcurrencySettings.setLockTimeout
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_reentrancy_mode
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_reentrancy_mode.yml
    name: ActorReentrancyMode
    nameWithType: ActorReentrancyMode
    fullName: microsoft.servicefabric.actors.ActorReentrancyMode
    type: Enum
    summary: <p><span data-ttu-id="38b5c-118">アクター メソッドの呼び出しのための再入モードを指定します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-118">Specifies Reentrancy mode for actor method calls.</span></span> </p>
    syntax:
      content: public enum ActorReentrancyMode
  - uid: microsoft.servicefabric.actors._actor_concurrency_settings
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_concurrency_settings.yml
    name: ActorConcurrencySettings
    nameWithType: ActorConcurrencySettings
    fullName: microsoft.servicefabric.actors.ActorConcurrencySettings
    type: Class
    summary: <p><span data-ttu-id="38b5c-119">論理呼び出しコンテキスト ベースの再入のサポートの順番でディスパッチ アクター メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-119">The method calls on an actor dispatched via in turn with support for logical call context based reentrancy.</span></span> <span data-ttu-id="38b5c-120">このクラスは、アクターをベースにする同時実行のロックを構成する設定を提供します。</span><span class="sxs-lookup"><span data-stu-id="38b5c-120">This class provides the settings to configure the turn based concurrency lock for actors.</span></span> </p>
    syntax: *ref_1
  - uid: microsoft.servicefabric.actors._actor_concurrency_lock_timeout_exception
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_concurrency_lock_timeout_exception.yml
    name: ActorConcurrencyLockTimeoutException
    nameWithType: ActorConcurrencyLockTimeoutException
    fullName: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException
    type: Class
    summary: <p><span data-ttu-id="38b5c-121">メソッドをディスパッチする同時実行のロックをランタイムが有効にするを取得できない場合に、アクター ランタイムによってスローされる例外に基づいています。</span><span class="sxs-lookup"><span data-stu-id="38b5c-121">Exception thrown by actor runtime when runtime cannot acquire the turn based concurrency lock to dispatch the method.</span></span> </p>
    syntax:
      content: public class ActorConcurrencyLockTimeoutException extends FabricException