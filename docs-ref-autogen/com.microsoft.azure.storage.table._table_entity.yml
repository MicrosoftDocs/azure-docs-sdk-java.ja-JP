### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.storage.table._table_entity
    id: _table_entity
    parent: com.microsoft.azure.storage.table
    children:
      - com.microsoft.azure.storage.table._table_entity.getEtag()
      - com.microsoft.azure.storage.table._table_entity.getPartitionKey()
      - com.microsoft.azure.storage.table._table_entity.getRowKey()
      - com.microsoft.azure.storage.table._table_entity.getTimestamp()
      - 'com.microsoft.azure.storage.table._table_entity.readEntity(HashMap<String, EntityProperty>,OperationContext)'
      - com.microsoft.azure.storage.table._table_entity.setEtag(String)
      - com.microsoft.azure.storage.table._table_entity.setPartitionKey(String)
      - com.microsoft.azure.storage.table._table_entity.setRowKey(String)
      - com.microsoft.azure.storage.table._table_entity.setTimestamp(Date)
      - com.microsoft.azure.storage.table._table_entity.writeEntity(OperationContext)
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: TableEntity
    nameWithType: TableEntity
    fullName: com.microsoft.azure.storage.table.TableEntity
    type: Interface
    source:
      remote: &ref_0
        path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
        branch: master
        repo: 'https://github.com/Azure/azure-storage-java'
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 73
    package: com.microsoft.azure.storage.table
    summary: "<p>テーブルのエンティティ型に必要なインターフェイスです。 <xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>インターフェイスは、共通のエンティティ プロパティの getter および setter メソッドを宣言し、およびシリアル化と逆シリアル化のプロパティ マップを使用してすべてのエンティティ プロパティのメソッドです。 実装するクラスを作成する<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>プロパティの格納、取得、シリアル化および逆シリアル化をカスタマイズして、テーブル エンティティの追加のカスタム ロジックを指定します。 </p>\n<p>ストレージ クライアント ライブラリには 2 つの実装が含まれています<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>単純なプロパティ アクセスとシリアル化を提供します。 </p>\n<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.storage.table._dynamic_table_entity\" data-throw-if-not-resolved=\"false\">DynamicTableEntity</xref>実装<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>し格納およびプロパティを取得する単純なプロパティ マップを提供します。 使用して、 <xref uid=\"com.microsoft.azure.storage.table._dynamic_table_entity\" data-throw-if-not-resolved=\"false\">DynamicTableEntity</xref>簡単なアクセスのプロパティのサブセットのみを返す場合 (たとえば、クエリの select 句) をエンティティのプロパティまたはの場合、クエリが異なる複数のエンティティ型を返すことができますプロパティ。 また、この種類を使用する、プロパティ情報を失うことがなく異種エンティティの一括テーブルの更新を実行することができます。 </p>\n\n<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>の実装は、 <xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>でシリアル化と逆シリアル化をリフレクション ベースで動作を使用する、およびメソッドです。 <xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>-派生クラスの型と名前付けをシリアル化して自動的に逆シリアル化の規則に従っているメソッドを使用します。 </p>\n\n<p>実装するクラス<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>活用できる、自動リフレクション ベースのシリアル化および逆シリアル化の動作で<xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>で静的メソッドを呼び出すことによって、 です。 クラスは、シリアル化しても、自動的に逆シリアル化するには、型および名前付け規則に従うメソッドを提供する必要があります。 Getter メソッドと setter メソッドの両方が指定されたプロパティ名とデータ型の検出、し、適切なメソッドの呼び出しに自動的にデータを逆シリアル化または逆シリアル化します。 リフレクションのコードは次の形式のペア内の get アクセス操作子および set アクセス操作子メソッド </p>\n<p></p>\n<p>and </p>\n<p></p>\n<p>ここで<em>PropertyName</em>テーブル エンティティのプロパティ名と<em>型</em>Java の型、プロパティの EDM データ型と互換性のあります。 クラスの説明の表を参照して<xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> Java 対応するプロパティの型のマップ。 <xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>プロパティの名前規則に従っていない get アクセス操作子および set アクセス操作子メソッドでリフレクションのプロパティ名を指定する属性を持つ注釈を適用することがあります。 メソッド名と属性の<xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>注釈はリフレクションを使用してプロパティ名の照合の大文字小文字を区別します。 使用して、<xref uid=\"com.microsoft.azure.storage.table._ignore\" data-throw-if-not-resolved=\"false\">無視</xref>メソッドが自動のシリアル化および逆シリアル化のリフレクションで使用されていることを防ぐための注釈。 \"PartitionKey\"、\"RowKey\"、\"Timestamp\"、\"Etag\"の名前は予約されており、無視された場合に設定されますなお、 <xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>リフレクション メソッドを使用して、サブクラスで注釈。 </p>\n<p></p>"
    syntax: &ref_1
      content: public interface TableEntity
    see:
      - type: com.microsoft.azure.storage.table._table_service_entity
        description: TableServiceEntity
      - type: com.microsoft.azure.storage.table._dynamic_table_entity
        description: DynamicTableEntity
  - uid: com.microsoft.azure.storage.table._table_entity.getEtag()
    id: getEtag()
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: getEtag()
    nameWithType: TableEntity.getEtag()
    fullName: String com.microsoft.azure.storage.table.TableEntity.getEtag()
    overload: com.microsoft.azure.storage.table._table_entity.getEtag*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 82
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティのことを確認する ETag 値を取得します。 Microsoft Azure storage から読み取った最後後に、テーブル エンティティが変更されたかどうかを決定する、この値が使用されます。 クライアントは、サービス上でこの値を更新できません。</p>
      <p></p>
    syntax:
      content: public String getEtag()
      return:
        type: '26831127'
        description: <p>A<code>String</code>エンティティの ETag を表します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.getPartitionKey()
    id: getPartitionKey()
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: getPartitionKey()
    nameWithType: TableEntity.getPartitionKey()
    fullName: String com.microsoft.azure.storage.table.TableEntity.getPartitionKey()
    overload: com.microsoft.azure.storage.table._table_entity.getPartitionKey*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 90
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティの PartitionKey 値を取得します。</p>
      <p></p>
    syntax:
      content: public String getPartitionKey()
      return:
        type: '26831127'
        description: <p>A<code>String</code>エンティティの PartitionKey 値を表します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.getRowKey()
    id: getRowKey()
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: getRowKey()
    nameWithType: TableEntity.getRowKey()
    fullName: String com.microsoft.azure.storage.table.TableEntity.getRowKey()
    overload: com.microsoft.azure.storage.table._table_entity.getRowKey*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 98
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティの RowKey 値を取得します。</p>
      <p></p>
    syntax:
      content: public String getRowKey()
      return:
        type: '26831127'
        description: <p>A<code>String</code>エンティティの RowKey 値を表します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.getTimestamp()
    id: getTimestamp()
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: getTimestamp()
    nameWithType: TableEntity.getTimestamp()
    fullName: Date com.microsoft.azure.storage.table.TableEntity.getTimestamp()
    overload: com.microsoft.azure.storage.table._table_entity.getTimestamp*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 106
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティのタイムスタンプを取得します。 サーバーでは、変更することはできません、タイムスタンプの値を管理します。</p>
      <p></p>
    syntax:
      content: public Date getTimestamp()
      return:
        type: '12977444'
        description: <p>A<code>java.util.Date</code>エンティティのタイムスタンプ値を表すオブジェクト。 </p>
  - uid: 'com.microsoft.azure.storage.table._table_entity.readEntity(HashMap<String, EntityProperty>,OperationContext)'
    id: 'readEntity(HashMap<String, EntityProperty>,OperationContext)'
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: 'readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)'
    nameWithType: 'TableEntity.readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)'
    fullName: 'void com.microsoft.azure.storage.table.TableEntity.readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)'
    overload: com.microsoft.azure.storage.table._table_entity.readEntity*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 121
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>実装するオブジェクトのインスタンスは追加<xref uid="com.microsoft.azure.storage.table._table_entity" data-throw-if-not-resolved="false">TableEntity</xref>プロパティ名のマップを表す指定されたプロパティのパラメーターを使用して<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型の値。</p>
      <p></p>
    syntax:
      content: 'public void readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)'
      parameters:
        - id: properties
          type: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
          description: <p><code>java.util.HashMap</code>の<code>String</code>に<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型の値を使用してテーブル エンティティ インスタンスを作成します。 </p>
        - id: opContext
          type: com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>操作の実行を追跡するために使用されるオブジェクト。</p>
    exceptions:
      - type: com.microsoft.azure.storage._storage_exception
        description: <p>場合は、操作中にエラーが発生します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.setEtag(String)
    id: setEtag(String)
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: setEtag(String etag)
    nameWithType: TableEntity.setEtag(String etag)
    fullName: void com.microsoft.azure.storage.table.TableEntity.setEtag(String etag)
    overload: com.microsoft.azure.storage.table._table_entity.setEtag*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 131
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティのことを確認する ETag 値を設定します。 Microsoft Azure storage から読み取った最後後に、テーブル エンティティが変更されたかどうかを決定する、この値が使用されます。 クライアントは、サービス上でこの値を更新できません。</p>
      <p></p>
    syntax:
      content: public void setEtag(String etag)
      parameters:
        - id: etag
          type: '26831127'
          description: <p>A<code>String</code>エンティティに設定する ETag を指定します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.setPartitionKey(String)
    id: setPartitionKey(String)
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: setPartitionKey(String partitionKey)
    nameWithType: TableEntity.setPartitionKey(String partitionKey)
    fullName: void com.microsoft.azure.storage.table.TableEntity.setPartitionKey(String partitionKey)
    overload: com.microsoft.azure.storage.table._table_entity.setPartitionKey*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 139
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティの PartitionKey 値を設定します。</p>
      <p></p>
    syntax:
      content: public void setPartitionKey(String partitionKey)
      parameters:
        - id: partitionKey
          type: '26831127'
          description: <p>A<code>String</code>エンティティに設定する PartitionKey 値を指定します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.setRowKey(String)
    id: setRowKey(String)
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: setRowKey(String rowKey)
    nameWithType: TableEntity.setRowKey(String rowKey)
    fullName: void com.microsoft.azure.storage.table.TableEntity.setRowKey(String rowKey)
    overload: com.microsoft.azure.storage.table._table_entity.setRowKey*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 147
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティの RowKey 値を設定します。</p>
      <p></p>
    syntax:
      content: public void setRowKey(String rowKey)
      parameters:
        - id: rowKey
          type: '26831127'
          description: <p>A<code>String</code>エンティティに設定する RowKey 値を指定します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.setTimestamp(Date)
    id: setTimestamp(Date)
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: setTimestamp(Date timeStamp)
    nameWithType: TableEntity.setTimestamp(Date timeStamp)
    fullName: void com.microsoft.azure.storage.table.TableEntity.setTimestamp(Date timeStamp)
    overload: com.microsoft.azure.storage.table._table_entity.setTimestamp*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 156
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>エンティティのタイムスタンプ値を設定します。 そのタイムスタンプは、サービスで読み取り専用プロパティであり、ユーザーによっては設定しないでに注意してください。</p>
      <p></p>
    syntax:
      content: public void setTimestamp(Date timeStamp)
      parameters:
        - id: timeStamp
          type: '12977444'
          description: <p>A<code>java.util.Date</code>エンティティに設定するタイムスタンプ値を指定します。 </p>
  - uid: com.microsoft.azure.storage.table._table_entity.writeEntity(OperationContext)
    id: writeEntity(OperationContext)
    parent: com.microsoft.azure.storage.table._table_entity
    href: com.microsoft.azure.storage.table._table_entity.yml
    langs:
      - java
    name: writeEntity(OperationContext opContext)
    nameWithType: TableEntity.writeEntity(OperationContext opContext)
    fullName: 'HashMap<String, EntityProperty> com.microsoft.azure.storage.table.TableEntity.writeEntity(OperationContext opContext)'
    overload: com.microsoft.azure.storage.table._table_entity.writeEntity*
    type: Method
    source:
      remote: *ref_0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntity.java
      startLine: 172
    package: com.microsoft.azure.storage.table
    summary: |-
      <p>プロパティ名のマップを返します<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型のテーブル エンティティ インスタンスのシリアル化されたコンテンツを表す値です。</p>
      <p></p>
    syntax:
      content: 'public HashMap<String, EntityProperty> writeEntity(OperationContext opContext)'
      parameters:
        - id: opContext
          type: com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>操作の実行を追跡するために使用されるオブジェクト。</p>
      return:
        type: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
        description: <p>A<code>java.util.HashMap</code>の<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型のテーブル エンティティのプロパティを表す値です。</p>
    exceptions:
      - type: com.microsoft.azure.storage._storage_exception
        description: <p>場合は、操作中にエラーが発生します。 </p>
references:
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: com.microsoft.azure.storage.table._table_entity.getEtag*
    name: getEtag
    nameWithType: TableEntity.getEtag
    fullName: String com.microsoft.azure.storage.table.TableEntity.getEtag
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.getPartitionKey*
    name: getPartitionKey
    nameWithType: TableEntity.getPartitionKey
    fullName: String com.microsoft.azure.storage.table.TableEntity.getPartitionKey
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.getRowKey*
    name: getRowKey
    nameWithType: TableEntity.getRowKey
    fullName: String com.microsoft.azure.storage.table.TableEntity.getRowKey
    package: com.microsoft.azure.storage.table
  - uid: '12977444'
    spec.java:
      - name: Date
        fullName: Date
  - uid: com.microsoft.azure.storage.table._table_entity.getTimestamp*
    name: getTimestamp
    nameWithType: TableEntity.getTimestamp
    fullName: Date com.microsoft.azure.storage.table.TableEntity.getTimestamp
    package: com.microsoft.azure.storage.table
  - uid: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
    spec.java:
      - name: 'HashMap<String, '
        fullName: 'HashMap<String, '
      - uid: com.microsoft.azure.storage.table._entity_property
        name: EntityProperty
        fullName: com.microsoft.azure.storage.table.EntityProperty
        href: com.microsoft.azure.storage.table._entity_property.yml
      - name: '>'
        fullName: '>'
  - uid: com.microsoft.azure.storage.table._table_entity.readEntity*
    name: readEntity
    nameWithType: TableEntity.readEntity
    fullName: void com.microsoft.azure.storage.table.TableEntity.readEntity
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.setEtag*
    name: setEtag
    nameWithType: TableEntity.setEtag
    fullName: void com.microsoft.azure.storage.table.TableEntity.setEtag
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.setPartitionKey*
    name: setPartitionKey
    nameWithType: TableEntity.setPartitionKey
    fullName: void com.microsoft.azure.storage.table.TableEntity.setPartitionKey
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.setRowKey*
    name: setRowKey
    nameWithType: TableEntity.setRowKey
    fullName: void com.microsoft.azure.storage.table.TableEntity.setRowKey
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.setTimestamp*
    name: setTimestamp
    nameWithType: TableEntity.setTimestamp
    fullName: void com.microsoft.azure.storage.table.TableEntity.setTimestamp
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_entity.writeEntity*
    name: writeEntity
    nameWithType: TableEntity.writeEntity
    fullName: 'HashMap<String, EntityProperty> com.microsoft.azure.storage.table.TableEntity.writeEntity'
    package: com.microsoft.azure.storage.table
  - uid: com.microsoft.azure.storage.table._table_service_entity
    parent: com.microsoft.azure.storage.table
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: TableServiceEntity
    nameWithType: TableServiceEntity
    fullName: com.microsoft.azure.storage.table.TableServiceEntity
    type: Class
    summary: "<p><xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>クラスは、ストレージ サービス内のテーブル エンティティの基本オブジェクト型を表します。 <xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>の基本実装を提供、 <xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>を提供するインターフェイスとメソッドを既定ではおよびリフレクションを使用してすべてのプロパティを逆シリアル化します。 テーブル エンティティ クラスがこのクラスを拡張し、オーバーライド、および提供するメソッドをカスタマイズしたかより多くのパフォーマンスの高いシリアル化ロジック。 </p>\n<p>リフレクションの使用によりのサブクラス<xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>シリアル化を実装することがなく逆シリアル化およびシリアル化のコードそのものです。 Getter メソッドと setter メソッドの両方が指定されたプロパティ名とデータ型の検出、し、適切なメソッドの呼び出しに自動的にデータを逆シリアル化または逆シリアル化します。 活用するために、自動のシリアル化コード、テーブル エンティティ クラスは、対応するテーブル内のエンティティ Microsoft Azure テーブル ストレージ内の各プロパティの getter および setter メソッドを提供する必要があります。 リフレクションのコードは次の形式のペア内の get アクセス操作子および set アクセス操作子メソッド </p>\n<p></p>\n<p>and </p>\n<p></p>\n<p>ここで<em>PropertyName</em>テーブル エンティティのプロパティ名と<em>型</em>Java の型、プロパティの EDM データ型と互換性のあります。 Java 対応するプロパティの型のマップは、次の表を参照してください。 <xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>プロパティの名前規則に従っていない get アクセス操作子および set アクセス操作子メソッドでリフレクションのプロパティ名を指定する属性を持つ注釈を適用することがあります。 メソッド名と属性の<xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>注釈はリフレクションを使用してプロパティ名の照合の大文字小文字を区別します。 使用して、<xref uid=\"com.microsoft.azure.storage.table._ignore\" data-throw-if-not-resolved=\"false\">無視</xref>メソッドが自動のシリアル化および逆シリアル化のリフレクションで使用されていることを防ぐための注釈。 \"PartitionKey\"、\"RowKey\"、\"Timestamp\"、\"Etag\"の名前は予約されており、無視された場合に設定されますなお、 <xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>サブクラスで注釈。 </p>\n<p>次の表は、Microsoft Azure ストレージでサポートされているプロパティのデータ型と逆シリアル化したときに、対応する Java 型を示します。 <table rows=\"9\" cols=\"4\"><row><entry thead=\"yes\"><p>ストレージの種類 </p></entry><entry thead=\"yes\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type\" data-throw-if-not-resolved=\"false\">EdmType</xref>値 </p></entry><entry thead=\"yes\"><p>Java の型 </p></entry><entry thead=\"yes\"><p>説明  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Binary</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.BINARY\" data-throw-if-not-resolved=\"false\">EdmType #BINARY</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>バイト配列のサイズは最大 64 KB です。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Boolean</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.BOOLEAN\" data-throw-if-not-resolved=\"false\">EdmType #BOOLEAN</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>ブール値。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.DateTime</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.DATE_TIME\" data-throw-if-not-resolved=\"false\">EdmType # 日付 _ 時刻</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>世界協定時刻 (UTC) を表す 64 ビット値。 サポートされている範囲は、西暦 1601 年 1 月 1 日深夜 12時 00分から始まります 始まります。 この範囲は 9999 年 12 月 31 日に終了します。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Double</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.DOUBLE\" data-throw-if-not-resolved=\"false\">EdmType #DOUBLE</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>64 ビット倍精度浮動小数点値。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Guid</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.GUID\" data-throw-if-not-resolved=\"false\">EdmType #GUID</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>グローバルで一意となる 128 ビットの識別子。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Int32</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.INT32\" data-throw-if-not-resolved=\"false\">EdmType # INT32</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>32 ビット整数値。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Int64</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.INT64\" data-throw-if-not-resolved=\"false\">EdmType # INT64</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>64 ビット整数値。  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.String</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table._edm_type.STRING\" data-throw-if-not-resolved=\"false\">EdmType #STRING</xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>UTF-16 エンコードの値。 文字列値には、最大 64 KB の可能性があります。  </p></entry></row></table></p>\n<p>MSDN のトピックを参照してください<ulink url=\"http://msdn.microsoft.com//library/azure/dd179338.aspx\">テーブル サービス データ モデルについて</ulink>テーブル、エンティティ、および Microsoft Azure ストレージ サービスで使用されているプロパティの概要についてはします。 </p>\n<p>使用できる EDM プリミティブ データ型と名前の概要については、次を参照してください、。</p>\n<p>\r\n\r\n  <ulink url=\"http://www.odata.org/developers/protocols/overview#AbstractTypeSystem\">プリミティブ データ型</ulink>のセクションで、 <ulink url=\"http://www.odata.org/developers/protocols/overview\">OData プロトコルの概要</ulink>です。 </p>\n\n<p></p>"
    syntax:
      content: public class TableServiceEntity
  - uid: com.microsoft.azure.storage.table._table_service_entity.getEtag()
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: getEtag()
    nameWithType: TableServiceEntity.getEtag()
    fullName: String com.microsoft.azure.storage.table.TableServiceEntity.getEtag()
    type: Method
    summary: |-
      <p>エンティティのことを確認する ETag 値を取得します。 Microsoft Azure storage から読み取った最後後に、テーブル エンティティが変更されたかどうかを決定する、この値が使用されます。 クライアントは、サービス上でこの値を更新できません。</p>
      <p></p>
    syntax:
      content: public String getEtag()
      return:
        type: '26831127'
        description: <p>A<code>String</code>エンティティの ETag が含まれています。 </p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.getPartitionKey()
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: getPartitionKey()
    nameWithType: TableServiceEntity.getPartitionKey()
    fullName: String com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()
    type: Method
    summary: |-
      <p>エンティティの PartitionKey 値を取得します。</p>
      <p></p>
    syntax:
      content: public String getPartitionKey()
      return:
        type: '26831127'
        description: <p>A<code>String</code>エンティティの PartitionKey 値を格納します。 </p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.getRowKey()
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: getRowKey()
    nameWithType: TableServiceEntity.getRowKey()
    fullName: String com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()
    type: Method
    summary: |-
      <p>エンティティの RowKey 値を取得します。</p>
      <p></p>
    syntax:
      content: public String getRowKey()
      return:
        type: '26831127'
        description: <p>A<code>String</code>エンティティの RowKey 値を格納します。 </p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.getTimestamp()
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: getTimestamp()
    nameWithType: TableServiceEntity.getTimestamp()
    fullName: Date com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()
    type: Method
    summary: |-
      <p>エンティティのタイムスタンプを取得します。 サーバーでは、変更することはできません、タイムスタンプの値を管理します。</p>
      <p></p>
    syntax:
      content: public Date getTimestamp()
      return:
        type: '12977444'
        description: <p>A<code>java.util.Date</code>エンティティのタイムスタンプ値を表すオブジェクト。 </p>
  - uid: 'com.microsoft.azure.storage.table._dynamic_table_entity.readEntity(final HashMap<String, EntityProperty>,final OperationContext)'
    parent: com.microsoft.azure.storage.table._dynamic_table_entity
    href: com.microsoft.azure.storage.table._dynamic_table_entity.yml
    name: 'readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    nameWithType: 'DynamicTableEntity.readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    fullName: 'void com.microsoft.azure.storage.table.DynamicTableEntity.readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    type: Method
    summary: |-
      <p>これは追加<xref uid="com.microsoft.azure.storage.table._dynamic_table_entity" data-throw-if-not-resolved="false">DynamicTableEntity</xref>インスタンスに対するプロパティ名の指定したマップを使用して<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型の値。</p>
      <p></p>
    syntax:
      content: 'public void readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
      parameters:
        - id: properties
          type: 2e8e1cc0com.microsoft.azure.storage.table._entity_propertya08ddfce
          description: <p><code>java.util.HashMap</code>の<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型の値がこれに格納する<xref uid="com.microsoft.azure.storage.table._dynamic_table_entity" data-throw-if-not-resolved="false">DynamicTableEntity</xref>インスタンス。 </p>
        - id: opContext
          type: 93de0ef9com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>操作の実行を追跡するために使用されるオブジェクト。 </p>
  - uid: 'com.microsoft.azure.storage.table._table_service_entity.readEntity(final HashMap<String, EntityProperty>,final OperationContext)'
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: 'readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    nameWithType: 'TableServiceEntity.readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    fullName: 'void com.microsoft.azure.storage.table.TableServiceEntity.readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    type: Method
    summary: |-
      <p>プロパティ名のマップを使用してこのテーブル エンティティ インスタンスを追加<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型の値。 </p>
      <p>このメソッドを呼び出して<xref uid="com.microsoft.azure.storage.table._table_service_entity.readEntityWithReflection(final Object,final HashMap&lt;String, EntityProperty&gt;,final OperationContext)" data-throw-if-not-resolved="false">TableServiceEntity #readEntityWithReflection</xref>メソッドは、リフレクションを使用してテーブル エンティティ インスタンスを作成します。 テーブルのエンティティ クラスを拡張する<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref> Microsoft Azure のストレージ クラスで、テーブル エンティティの特定のプロパティの getter および setter メソッドを実装することによってこの動作の利点を活かすを表すことができます。 </p>
      <p>このメソッドを拡張するクラスでオーバーライド<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref>をカスタムのシリアル化コードを呼び出します。</p>
      <p></p>
    syntax:
      content: 'public void readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
      parameters:
        - id: properties
          type: 2e8e1cc0com.microsoft.azure.storage.table._entity_propertya08ddfce
          description: <p><code>java.util.HashMap</code>の<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ値を逆シリアル化し、このテーブル エンティティ インスタンスに格納します。 </p>
        - id: opContext
          type: 93de0ef9com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>操作の実行を追跡するために使用されるオブジェクト。 </p>
  - uid: com.microsoft.azure.storage.table._entity_property
    parent: com.microsoft.azure.storage.table
    href: com.microsoft.azure.storage.table._entity_property.yml
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: com.microsoft.azure.storage.table.EntityProperty
    type: Class
    summary: "<p>テーブル エンティティの単一の型指定されたプロパティ値を表すクラス。 <xref uid=\"com.microsoft.azure.storage.table._entity_property\" data-throw-if-not-resolved=\"false\">EntityProperty</xref>ストアのデータ型として、 <xref uid=\"com.microsoft.azure.storage.table._edm_type\" data-throw-if-not-resolved=\"false\">EdmType</xref>です。 可能性のあるオブジェクトの型がプリミティブ型ではなく、値がシリアル化およびとして格納されている、します。 </p>\n<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.storage.table._entity_property\" data-throw-if-not-resolved=\"false\">EntityProperty</xref>のサポートされている値の型のオーバー ロードされたコンス トラクターとメソッドのオーバー ロードを提供します。 コンス トラクターまたはメソッドのセットの各オーバー ロードされた、 <xref uid=\"com.microsoft.azure.storage.table._edm_type\" data-throw-if-not-resolved=\"false\">EdmType</xref>とパラメーターの型に基づいて、適切な値をシリアル化します。 </p>\n\n<p>いずれかを使用して、<em>型</em>逆シリアル化する方法、 <xref uid=\"com.microsoft.azure.storage.table._entity_property\" data-throw-if-not-resolved=\"false\">EntityProperty</xref>として適切な Java の型。 メソッドがスローされます、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">ParseException</xref>または<xref uid=\"\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>場合、 <xref uid=\"com.microsoft.azure.storage.table._entity_property\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> Java の型として逆シリアル化することはできません。 </p>"
    syntax:
      content: public class EntityProperty
  - uid: com.microsoft.azure.storage._operation_context
    parent: com.microsoft.azure.storage
    href: com.microsoft.azure.storage._operation_context.yml
    name: OperationContext
    nameWithType: OperationContext
    fullName: com.microsoft.azure.storage.OperationContext
    type: Class
    summary: <p>現在の論理演算を表します。 論理操作では、複数の個別の物理的な要求と一対多リレーションシップがあります。 </p>
    syntax:
      content: public class OperationContext
  - uid: com.microsoft.azure.storage._storage_exception
    parent: com.microsoft.azure.storage
    href: com.microsoft.azure.storage._storage_exception.yml
    name: StorageException
    nameWithType: StorageException
    fullName: com.microsoft.azure.storage.StorageException
    type: Class
    summary: <p>Microsoft Azure ストレージ サービスの例外を表します。 </p>
    syntax:
      content: public class StorageException
  - uid: com.microsoft.azure.storage.table._table_entity
    parent: com.microsoft.azure.storage.table
    href: com.microsoft.azure.storage.table._table_entity.yml
    name: TableEntity
    nameWithType: TableEntity
    fullName: com.microsoft.azure.storage.table.TableEntity
    type: Interface
    summary: "<p>テーブルのエンティティ型に必要なインターフェイスです。 <xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>インターフェイスは、共通のエンティティ プロパティの getter および setter メソッドを宣言し、およびシリアル化と逆シリアル化のプロパティ マップを使用してすべてのエンティティ プロパティのメソッドです。 実装するクラスを作成する<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>プロパティの格納、取得、シリアル化および逆シリアル化をカスタマイズして、テーブル エンティティの追加のカスタム ロジックを指定します。 </p>\n<p>ストレージ クライアント ライブラリには 2 つの実装が含まれています<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>単純なプロパティ アクセスとシリアル化を提供します。 </p>\n<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.storage.table._dynamic_table_entity\" data-throw-if-not-resolved=\"false\">DynamicTableEntity</xref>実装<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>し格納およびプロパティを取得する単純なプロパティ マップを提供します。 使用して、 <xref uid=\"com.microsoft.azure.storage.table._dynamic_table_entity\" data-throw-if-not-resolved=\"false\">DynamicTableEntity</xref>簡単なアクセスのプロパティのサブセットのみを返す場合 (たとえば、クエリの select 句) をエンティティのプロパティまたはの場合、クエリが異なる複数のエンティティ型を返すことができますプロパティ。 また、この種類を使用する、プロパティ情報を失うことがなく異種エンティティの一括テーブルの更新を実行することができます。 </p>\n\n<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>の実装は、 <xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>でシリアル化と逆シリアル化をリフレクション ベースで動作を使用する、およびメソッドです。 <xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>-派生クラスの型と名前付けをシリアル化して自動的に逆シリアル化の規則に従っているメソッドを使用します。 </p>\n\n<p>実装するクラス<xref uid=\"com.microsoft.azure.storage.table._table_entity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>活用できる、自動リフレクション ベースのシリアル化および逆シリアル化の動作で<xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>で静的メソッドを呼び出すことによって、 です。 クラスは、シリアル化しても、自動的に逆シリアル化するには、型および名前付け規則に従うメソッドを提供する必要があります。 Getter メソッドと setter メソッドの両方が指定されたプロパティ名とデータ型の検出、し、適切なメソッドの呼び出しに自動的にデータを逆シリアル化または逆シリアル化します。 リフレクションのコードは次の形式のペア内の get アクセス操作子および set アクセス操作子メソッド </p>\n<p></p>\n<p>and </p>\n<p></p>\n<p>ここで<em>PropertyName</em>テーブル エンティティのプロパティ名と<em>型</em>Java の型、プロパティの EDM データ型と互換性のあります。 クラスの説明の表を参照して<xref uid=\"com.microsoft.azure.storage.table._table_service_entity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> Java 対応するプロパティの型のマップ。 <xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>プロパティの名前規則に従っていない get アクセス操作子および set アクセス操作子メソッドでリフレクションのプロパティ名を指定する属性を持つ注釈を適用することがあります。 メソッド名と属性の<xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>注釈はリフレクションを使用してプロパティ名の照合の大文字小文字を区別します。 使用して、<xref uid=\"com.microsoft.azure.storage.table._ignore\" data-throw-if-not-resolved=\"false\">無視</xref>メソッドが自動のシリアル化および逆シリアル化のリフレクションで使用されていることを防ぐための注釈。 \"PartitionKey\"、\"RowKey\"、\"Timestamp\"、\"Etag\"の名前は予約されており、無視された場合に設定されますなお、 <xref uid=\"com.microsoft.azure.storage.table._store_as\" data-throw-if-not-resolved=\"false\">StoreAs</xref>リフレクション メソッドを使用して、サブクラスで注釈。 </p>\n<p></p>"
    syntax: *ref_1
  - uid: com.microsoft.azure.storage.table._table_service_entity.setEtag(final String)
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: setEtag(final String etag)
    nameWithType: TableServiceEntity.setEtag(final String etag)
    fullName: void com.microsoft.azure.storage.table.TableServiceEntity.setEtag(final String etag)
    type: Method
    summary: |-
      <p>エンティティのことを確認する ETag 値を設定します。 Microsoft Azure storage から読み取った最後後に、テーブル エンティティが変更されたかどうかを決定する、この値が使用されます。 クライアントは、サービス上でこの値を更新できません。</p>
      <p></p>
    syntax:
      content: public void setEtag(final String etag)
      parameters:
        - id: etag
          type: 3d93591e
          description: <p>A<code>String</code>エンティティの ETag が含まれています。 </p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.setPartitionKey(final String)
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: setPartitionKey(final String partitionKey)
    nameWithType: TableServiceEntity.setPartitionKey(final String partitionKey)
    fullName: void com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(final String partitionKey)
    type: Method
    summary: |-
      <p>エンティティの PartitionKey 値を設定します。</p>
      <p></p>
    syntax:
      content: public void setPartitionKey(final String partitionKey)
      parameters:
        - id: partitionKey
          type: 3d93591e
          description: <p>A<code>String</code>エンティティの PartitionKey 値を格納します。 </p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.setRowKey(final String)
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: setRowKey(final String rowKey)
    nameWithType: TableServiceEntity.setRowKey(final String rowKey)
    fullName: void com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(final String rowKey)
    type: Method
    summary: |-
      <p>エンティティの RowKey 値を設定します。</p>
      <p></p>
    syntax:
      content: public void setRowKey(final String rowKey)
      parameters:
        - id: rowKey
          type: 3d93591e
          description: <p>A<code>String</code>エンティティの RowKey 値を格納します。 </p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.setTimestamp(final Date)
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: setTimestamp(final Date timeStamp)
    nameWithType: TableServiceEntity.setTimestamp(final Date timeStamp)
    fullName: void com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(final Date timeStamp)
    type: Method
    summary: |-
      <p>エンティティの値を設定します。 タイムスタンプ プロパティ、サービスでのみ設定、読み取り専用プロパティであることに注意してください。</p>
      <p></p>
    syntax:
      content: public void setTimestamp(final Date timeStamp)
      parameters:
        - id: timeStamp
          type: 970a8f17
          description: <p>A<code>java.util.Date</code>を含む、<code>timeStamp</code>エンティティの値。 </p>
  - uid: com.microsoft.azure.storage.table._dynamic_table_entity.writeEntity(final OperationContext)
    parent: com.microsoft.azure.storage.table._dynamic_table_entity
    href: com.microsoft.azure.storage.table._dynamic_table_entity.yml
    name: writeEntity(final OperationContext opContext)
    nameWithType: DynamicTableEntity.writeEntity(final OperationContext opContext)
    fullName: 'HashMap<String, EntityProperty> com.microsoft.azure.storage.table.DynamicTableEntity.writeEntity(final OperationContext opContext)'
    type: Method
    summary: |-
      <p>プロパティ名のマップを返します<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>これからのデータ値<xref uid="com.microsoft.azure.storage.table._dynamic_table_entity" data-throw-if-not-resolved="false">DynamicTableEntity</xref>インスタンス。</p>
      <p></p>
    syntax:
      content: 'public HashMap<String, EntityProperty> writeEntity(final OperationContext opContext)'
      parameters:
        - id: opContext
          type: 93de0ef9com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>操作の実行を追跡するために使用されるオブジェクト。</p>
      return:
        type: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
        description: <p>A<code>java.util.HashMap</code>のマップを含む<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データ型の値がこれに格納されている<xref uid="com.microsoft.azure.storage.table._dynamic_table_entity" data-throw-if-not-resolved="false">DynamicTableEntity</xref>インスタンス。</p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.writeEntity(final OperationContext)
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: writeEntity(final OperationContext opContext)
    nameWithType: TableServiceEntity.writeEntity(final OperationContext opContext)
    fullName: 'HashMap<String, EntityProperty> com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(final OperationContext opContext)'
    type: Method
    summary: |-
      <p>プロパティ名のマップを返します<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データは、このテーブル エンティティ インスタンスをシリアル化によって作成された値を入力します。 </p>
      <p>このメソッドを呼び出して<xref uid="com.microsoft.azure.storage.table._table_service_entity.writeEntityWithReflection(final Object)" data-throw-if-not-resolved="false">writeEntityWithReflection</xref>メソッドは、リフレクションを使用してテーブル エンティティ インスタンスをシリアル化します。 テーブルのエンティティ クラスを拡張する<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref> Microsoft Azure のストレージ クラスで、テーブル エンティティの特定のプロパティの getter および setter メソッドを実装することによってこの動作の利点を活かすを表すことができます。 プロパティ名は予約されており、場合は無視されます"PartitionKey"、"RowKey"と"Timestamp"の設定を持つ他のメソッドに注意してください、 <xref uid="com.microsoft.azure.storage.table._store_as" data-throw-if-not-resolved="false">StoreAs</xref>注釈。 </p>
      <p>このメソッドを拡張するクラスでオーバーライド<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref>をカスタムのシリアル化コードを呼び出します。</p>
      <p></p>
    syntax:
      content: 'public HashMap<String, EntityProperty> writeEntity(final OperationContext opContext)'
      parameters:
        - id: opContext
          type: 93de0ef9com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>操作の実行を追跡するために使用されるオブジェクト。 </p>
      return:
        type: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
        description: <p>A<code>java.util.HashMap</code>の<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>データは、このテーブル エンティティ インスタンスからシリアル化のプロパティを表す値を入力します。 </p>
  - uid: com.microsoft.azure.storage.table._dynamic_table_entity
    parent: com.microsoft.azure.storage.table
    href: com.microsoft.azure.storage.table._dynamic_table_entity.yml
    name: DynamicTableEntity
    nameWithType: DynamicTableEntity
    fullName: com.microsoft.azure.storage.table.DynamicTableEntity
    type: Class
    summary: <p>A <xref uid="com.microsoft.azure.storage.table._table_entity" data-throw-if-not-resolved="false">TableEntity</xref>呼び出し元のエンティティのプロパティ マップに直接アクセスを許可する型。 このクラスは拡張<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref>をシリアル化と逆シリアル化のリフレクションの使用を排除します。 </p>
    syntax:
      content: public class DynamicTableEntity extends TableServiceEntity
  - uid: 'com.microsoft.azure.storage.table._table_service_entity.readEntityWithReflection(final Object,final HashMap<String, EntityProperty>,final OperationContext)'
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: 'readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    nameWithType: 'TableServiceEntity.readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    fullName: 'static void com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
    type: Method
    summary: |-
      <p>リフレクションを使用して、指定したオブジェクトのインスタンスには、テーブル エンティティのプロパティ マップを逆シリアル化します。 </p>
      <p>この静的メソッドは、テーブル エンティティの種類を表し、そのクラス型でリフレクションを使用して、インスタンスに、プロパティ マップからのデータを逆シリアル化するメソッドを検索するオブジェクト インスタンスを受け取ります。 </p>
      <p>プロパティ マップの各プロパティ名とデータ型は、シリアル化および逆シリアル化に使用するメソッドを get アクセス操作子および set アクセス操作子のペアのクラス型のメソッドと比較されます。 プロパティに一致する名前を持つメソッド名は"get"、および"set"が付加される、またはクラスがスキャンされて、 <xref uid="com.microsoft.azure.storage.table._store_as" data-throw-if-not-resolved="false">StoreAs</xref>注釈、プロパティ名を設定します。 メソッドは、戻り値の型またはパラメーターのデータ型の対応するデータ型に一致する必要があります<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>値。 このようなペアが見つかった場合、データは、インスタンスで set アクセス操作子メソッドを呼び出すことによって、インスタンスのオブジェクトにコピーされます。 名前とデータ型でメソッドのペアに一致しないプロパティはコピーされません。</p>
      <p></p>
    syntax:
      content: 'public static void readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)'
      parameters:
        - id: instance
          type: 1b60ba29
          description: <p><code>Object</code>実装するクラスのインスタンスへの参照を<xref uid="com.microsoft.azure.storage.table._table_entity" data-throw-if-not-resolved="false">TableEntity</xref>内にテーブル エンティティ データを逆シリアル化します。 </p>
        - id: properties
          type: 2e8e1cc0com.microsoft.azure.storage.table._entity_propertya08ddfce
          description: <p>A<code>java.util.HashMap</code>オブジェクトにマップする<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>インスタンス パラメーター オブジェクトに逆シリアル化する型指定されたデータ値を含むオブジェクト。 </p>
        - id: opContext
          type: 93de0ef9com.microsoft.azure.storage._operation_context
          description: <p><xref uid="com.microsoft.azure.storage._operation_context" data-throw-if-not-resolved="false">OperationContext</xref>を現在の操作コンテキストを表すオブジェクト。</p>
  - uid: com.microsoft.azure.storage.table._table_service_entity.writeEntityWithReflection(final Object)
    parent: com.microsoft.azure.storage.table._table_service_entity
    href: com.microsoft.azure.storage.table._table_service_entity.yml
    name: writeEntityWithReflection(final Object instance)
    nameWithType: TableServiceEntity.writeEntityWithReflection(final Object instance)
    fullName: 'static HashMap<String, EntityProperty> com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(final Object instance)'
    type: Method
    summary: |-
      <p>リフレクションを使用して、プロパティ マップにテーブル エンティティ インスタンスからプロパティのデータをシリアル化します。 </p>
      <p>この静的メソッドは、テーブル エンティティの種類を表し、そのクラス型でリフレクションを使用して、プロパティ マップのインスタンスからデータをシリアル化メソッドを検索するオブジェクト インスタンスを受け取ります。 </p>
      <p>プロパティ マップの各プロパティ名とデータ型は、シリアル化および逆シリアル化に使用するメソッドを get アクセス操作子および set アクセス操作子のペアのクラス型のメソッドと比較されます。 プロパティに一致する名前を持つメソッド名は"get"、および"set"が付加される、またはクラスがスキャンされて、 <xref uid="com.microsoft.azure.storage.table._store_as" data-throw-if-not-resolved="false">StoreAs</xref>注釈、プロパティ名を設定します。 メソッドは、戻り値の型またはパラメーターのデータ型の対応するデータ型に一致する必要があります<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>値。 このようなペアが見つかった場合、データは、インスタンスで getter メソッドを呼び出すことによって、インスタンスのオブジェクトからコピーされます。 名前とデータの種類が一致するメソッドのペアを持っていないプロパティはコピーされません。</p>
      <p></p>
    syntax:
      content: 'public static HashMap<String, EntityProperty> writeEntityWithReflection(final Object instance)'
      parameters:
        - id: instance
          type: 1b60ba29
          description: <p><code>Object</code>実装するクラスのインスタンスへの参照を<xref uid="com.microsoft.azure.storage.table._table_entity" data-throw-if-not-resolved="false">TableEntity</xref>からテーブル エンティティのデータをシリアル化します。 </p>
      return:
        type: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
        description: <p>A<code>java.util.HashMap</code>オブジェクトにマップする<code>String</code>プロパティの名前を<xref uid="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false">EntityProperty</xref>インスタンス パラメーター オブジェクトをシリアル化される型指定されたデータ値を含むオブジェクト。</p>
  - uid: com.microsoft.azure.storage.table._store_as
    parent: com.microsoft.azure.storage.table
    href: com.microsoft.azure.storage.table._store_as.yml
    name: StoreAs
    nameWithType: StoreAs
    fullName: com.microsoft.azure.storage.table.StoreAs
    type: Interface
    summary: |-
      <p>注釈名プロパティをオーバーライドするために使用がシリアル化されでリフレクションを使用して逆シリアル化します。 この注釈を使用して、set アクセス操作子メソッドによって保存または実装するクラスの get アクセス操作子メソッドによって取得されたデータに関連付けるプロパティ名を指定<xref uid="com.microsoft.azure.storage.table._table_entity" data-throw-if-not-resolved="false">TableEntity</xref>リフレクション ベースのシリアル化と逆シリアル化を使用します。 名前"PartitionKey"、"RowKey"、"Timestamp"、"Etag"は予約されている場合は無視されますが、注釈設定することに注意してください。 </p>
      <p>例: </p>
      <p></p>
      <p></p>
      <p>この例では、メソッドを取得し、エンティティ プロパティの設定の名前付け方法<em>ObjectPropertyName</em> 、既定のケースを取得し、名前付きエンティティのプロパティを設定する注釈ことができます<em>EntityPropertyName</em>です。 ドキュメントを参照して<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref>詳細についてはリフレクション ベースのシリアル化および逆シリアル化を使用します。</p>
      <p></p>
    syntax:
      content: public interface StoreAs
  - uid: com.microsoft.azure.storage.table._ignore
    parent: com.microsoft.azure.storage.table
    href: com.microsoft.azure.storage.table._ignore.yml
    name: Ignore
    nameWithType: Ignore
    fullName: com.microsoft.azure.storage.table.Ignore
    type: Interface
    summary: |-
      <p>注釈リフレクションによってプロパティをシリアル化または逆の使用を防ぐためのメソッドに設定します。 実装するクラスのメソッドに注釈を適用<xref uid="com.microsoft.azure.storage.table._table_entity" data-throw-if-not-resolved="false">TableEntity</xref>させるはリフレクション ベースのシリアル化および逆シリアル化中に無視されます。 ドキュメントを参照して<xref uid="com.microsoft.azure.storage.table._table_service_entity" data-throw-if-not-resolved="false">TableServiceEntity</xref>詳細についてはリフレクション ベースのシリアル化および逆シリアル化を使用します。</p>
      <p></p>
    syntax:
      content: public interface Ignore