### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    id: _fabric_actor_proxy_factory
    parent: microsoft.servicefabric.actors
    children:
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)'
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)'
      - microsoft.servicefabric.actors._fabric_actor_proxy_factory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
      - microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory()
      - 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)'
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: FabricActorProxyFactory
    nameWithType: FabricActorProxyFactory
    fullName: microsoft.servicefabric.actors.FabricActorProxyFactory
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 17
    package: microsoft.servicefabric.actors
    summary: <p>リモートのアクターのオブジェクトへのプロキシを作成するファクトリ クラスです。 </p>
    syntax:
      content: public class FabricActorProxyFactory implements ActorProxyFactory
    inheritance:
      - java.lang.Object
      - microsoft.servicefabric.actors._actor_proxy_factory
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId)'
    id: 'createActorProxy(Class<T>,ActorId)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
    nameWithType: 'FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 110
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
      return:
        type: 36136266microsoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,ActorId)'
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)'
    id: 'createActorProxy(Class<T>,ActorId,String,String,String)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    nameWithType: 'FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 151
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
        - id: applicationName
          type: '26831127'
          description: <p>アクター オブジェクトをホストするアクター サービスを含む Service Fabric アプリケーションの名前です。 このパラメーターは、クライアントがその同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることはできます。 詳細については、「解説」を参照してください。 </p>
        - id: serviceName
          type: '26831127'
          description: <p>Service Fabric サービスによって構成されたとおりの名前<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>アクターの実装にします。 既定では、サービスの名前は、アクター インターフェイスの名前から派生します。 ただし<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>はアクターが 1 つ以上にアクター インターフェイスを実装するか、serviceName の決定は自動的に加えられることはできません、アクター インターフェイスが別のアクター インターフェイスから派生した場合に必要です。 </p>
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 36136266microsoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)'
    exceptions:
      - type: '44102508'
        description: <p>無効な URI の形式が applicationName として渡されるときに例外がスローされます。 </p>
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)'
    id: 'createActorProxy(Class<T>,URI,ActorId)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
    nameWithType: 'FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 61
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスの型。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>アクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
      return:
        type: 36136266microsoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)'
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)'
    id: 'createActorProxy(Class<T>,URI,ActorId,String)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    nameWithType: 'FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 84
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスの型。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>アクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 36136266microsoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)'
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)'
    id: 'createActorServiceProxy(Class<T>,URI,ActorId)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    nameWithType: 'FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 184
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクターの id です。 作成されたプロキシは、この id を持つアクターをホストするアクター サービスのパーティションに接続されます。 </p>
      return:
        type: 36136266microsoft.servicefabric.services.remoting._service21353812
        description: <p>実装するサービス プロキシ オブジェクト<xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref>と T (サービス インターフェイス)。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)'
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)'
    id: 'createActorServiceProxy(Class<T>,URI,ActorId,String)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    nameWithType: 'FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 213
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクターの id です。 作成されたプロキシは、この id を持つアクターをホストするアクター サービスのパーティションに接続されます。 </p>
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 36136266microsoft.servicefabric.services.remoting._service21353812
        description: <p>実装するサービス プロキシ オブジェクト<xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref>と T (サービス インターフェイス)。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)'
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)'
    id: 'createActorServiceProxy(Class<T>,URI,long)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    nameWithType: 'FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 237
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: partitionKey
          type: 0364520f
          description: <p>接続するアクター サービス パーティションのキー。 </p>
      return:
        type: 36136266microsoft.servicefabric.services.remoting._service21353812
        description: <p>実装するサービス プロキシ オブジェクト<xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref>と T (サービス インターフェイス)。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)'
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)'
    id: 'createActorServiceProxy(Class<T>,URI,long,String)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    nameWithType: 'FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 266
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: partitionKey
          type: 0364520f
          description: <p>接続するアクター サービス パーティションのキー。 </p>
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 36136266microsoft.servicefabric.services.remoting._service21353812
        description: <p>実装するサービス プロキシ オブジェクト<xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref>と T (サービス インターフェイス)。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)'
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
    id: createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
    nameWithType: FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
    fullName: ServiceRemotingClientFactory microsoft.servicefabric.actors.FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createServiceRemotingClientFactory*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 287
    package: microsoft.servicefabric.actors
    summary: |-
      <p>サービスのリモート処理クライアントのファクトリを作成します。</p>
      <p></p>
    syntax:
      content: protected ServiceRemotingClientFactory createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
      parameters:
        - id: callbackClient
          type: microsoft.servicefabric.services.remoting._service_remoting_callback_client
          description: <p>リモート処理リスナーからクライアントにコールバックします。 </p>
      return:
        type: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory
        description: <p>としてサービスのリモート処理クライアントのファクトリを作成した<xref uid="" data-throw-if-not-resolved="false">ServiceRemotingClientFactory</xref>です。 </p>
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory()
    id: FabricActorProxyFactory()
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: FabricActorProxyFactory()
    nameWithType: FabricActorProxyFactory.FabricActorProxyFactory()
    fullName: microsoft.servicefabric.actors.FabricActorProxyFactory.FabricActorProxyFactory()
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 27
    package: microsoft.servicefabric.actors
    summary: <p>新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.actors._actor_proxy_factory" data-throw-if-not-resolved="false">ActorProxyFactory</xref>クラスです。 </p>
    syntax:
      content: public FabricActorProxyFactory()
  - uid: 'microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)'
    id: 'FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)'
    parent: microsoft.servicefabric.actors._fabric_actor_proxy_factory
    href: microsoft.servicefabric.actors._fabric_actor_proxy_factory.yml
    langs:
      - java
    name: 'FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)'
    nameWithType: 'FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)'
    fullName: 'microsoft.servicefabric.actors.FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)'
    overload: microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/FabricActorProxyFactory.java
      startLine: 39
    package: microsoft.servicefabric.actors
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="microsoft.servicefabric.actors._actor_proxy_factory" data-throw-if-not-resolved="false">ActorProxyFactory</xref>クラスです。</p>
      <p></p>
    syntax:
      content: 'public FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)'
      parameters:
        - id: createServiceRemotingClientFactory
          type: 432ffe41microsoft.servicefabric.services.remoting._service_remoting_callback_clientb33c76fcmicrosoft.servicefabric.services.remoting.client._service_remoting_client_factorya08ddfce
          description: <p>リモート処理通信クライアント要素を作成するファクトリ メソッド。 </p>
        - id: retrySettings
          type: microsoft.servicefabric.services.communication.client._operation_retry_settings
          description: <p>プロキシによってリモート オブジェクトへの呼び出しの設定を再試行してください。 </p>
references:
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory.FabricActorProxyFactory*
    name: FabricActorProxyFactory
    nameWithType: FabricActorProxyFactory.FabricActorProxyFactory
    fullName: microsoft.servicefabric.actors.FabricActorProxyFactory.FabricActorProxyFactory
    package: microsoft.servicefabric.actors
  - uid: 432ffe41microsoft.servicefabric.services.remoting._service_remoting_callback_clientb33c76fcmicrosoft.servicefabric.services.remoting.client._service_remoting_client_factorya08ddfce
    spec.java:
      - name: Function<
        fullName: Function<
      - uid: microsoft.servicefabric.services.remoting._service_remoting_callback_client
        name: ServiceRemotingCallbackClient
        fullName: microsoft.servicefabric.services.remoting.ServiceRemotingCallbackClient
        href: microsoft.servicefabric.services.remoting._service_remoting_callback_client.yml
      - name: ', '
        fullName: ', '
      - uid: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory
        name: ServiceRemotingClientFactory
        fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory
        href: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory.yml
      - name: '>'
        fullName: '>'
  - uid: ffb09d2d
    spec.java:
      - name: Class<T>
        fullName: Class<T>
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: 36136266microsoft.servicefabric.actors._actor21353812
    spec.java:
      - name: '<T extends '
        fullName: '<T extends '
      - uid: microsoft.servicefabric.actors._actor
        name: Actor
        fullName: microsoft.servicefabric.actors.Actor
        href: microsoft.servicefabric.actors._actor.yml
      - name: '> T'
        fullName: '> T'
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorProxy*
    name: createActorProxy
    nameWithType: FabricActorProxyFactory.createActorProxy
    fullName: public<T extends Actor> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorProxy
    package: microsoft.servicefabric.actors
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: '44102508'
    spec.java:
      - name: URISyntaxException
        fullName: URISyntaxException
  - uid: 36136266microsoft.servicefabric.services.remoting._service21353812
    spec.java:
      - name: '<T extends '
        fullName: '<T extends '
      - uid: microsoft.servicefabric.services.remoting._service
        name: Service
        fullName: microsoft.servicefabric.services.remoting.Service
        href: microsoft.servicefabric.services.remoting._service.yml
      - name: '> T'
        fullName: '> T'
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createActorServiceProxy*
    name: createActorServiceProxy
    nameWithType: FabricActorProxyFactory.createActorServiceProxy
    fullName: public<T extends Service> T microsoft.servicefabric.actors.FabricActorProxyFactory.createActorServiceProxy
    package: microsoft.servicefabric.actors
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: microsoft.servicefabric.actors._fabric_actor_proxy_factory.createServiceRemotingClientFactory*
    name: createServiceRemotingClientFactory
    nameWithType: FabricActorProxyFactory.createServiceRemotingClientFactory
    fullName: ServiceRemotingClientFactory microsoft.servicefabric.actors.FabricActorProxyFactory.createServiceRemotingClientFactory
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_proxy_factory
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: ActorProxyFactory
    nameWithType: ActorProxyFactory
    fullName: microsoft.servicefabric.actors.ActorProxyFactory
    type: Interface
    summary: <p>アクター プロキシ ファクトリ クラスを作成するメソッドを含むインターフェイスを定義します。 </p>
    syntax:
      content: public interface ActorProxyFactory
  - uid: microsoft.servicefabric.services.remoting._service_remoting_callback_client
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_callback_client.yml
    name: ServiceRemotingCallbackClient
    nameWithType: ServiceRemotingCallbackClient
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingCallbackClient
    type: Interface
    summary: <p>クライアントにリモート処理リスナーからのコールバック機構を提供するために実装する必要があります、インターフェイスを定義します。 </p>
    syntax:
      content: public interface ServiceRemotingCallbackClient
  - uid: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory
    parent: microsoft.servicefabric.services.remoting.client
    href: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory.yml
    name: ServiceRemotingClientFactory
    nameWithType: ServiceRemotingClientFactory
    fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory
    type: Interface
    summary: <p>クライアント ファクトリには、リモート処理の通信を提供するために実装する必要がありますのあるインターフェイスを定義します。 </p>
    syntax:
      content: public interface ServiceRemotingClientFactory
  - uid: microsoft.servicefabric.services.communication.client._operation_retry_settings
    parent: microsoft.servicefabric.services.communication.client
    href: microsoft.servicefabric.services.communication.client._operation_retry_settings.yml
    name: OperationRetrySettings
    nameWithType: OperationRetrySettings
    fullName: microsoft.servicefabric.services.communication.client.OperationRetrySettings
    type: Class
    syntax:
      content: public class OperationRetrySettings
  - uid: microsoft.servicefabric.actors._actor
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor.yml
    name: Actor
    nameWithType: Actor
    fullName: microsoft.servicefabric.actors.Actor
    type: Interface
    summary: <p>信頼できるアクターのインターフェイスを継承するための基本インターフェイスです。 </p>
    syntax:
      content: public interface Actor
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
    nameWithType: 'ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
    type: Method
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>アクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
      return:
        type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
  - uid: microsoft.servicefabric.actors._actor_id
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_id.yml
    name: ActorId
    nameWithType: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    type: Class
    summary: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">ActorId</xref>アクター サービス内でアクターの id を表します。 アクターによって識別できます<xref uid=\"\" data-throw-if-not-resolved=\"false\">java.lang.String</xref>、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.UUID</xref>か、または長。 </p>"
    syntax:
      content: public class ActorId
  - uid: microsoft.servicefabric.actors._actor_proxy
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_proxy.yml
    name: ActorProxy
    nameWithType: ActorProxy
    fullName: microsoft.servicefabric.actors.ActorProxy
    type: Interface
    summary: <p>アクター サービスに対するプロキシ アクセスを実装するため、インターフェイスを提供します。 </p>
    syntax:
      content: public interface ActorProxy
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    nameWithType: 'ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    type: Method
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>アクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,ActorId)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
    nameWithType: 'ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
    type: Method
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
      return:
        type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    nameWithType: 'ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    fullName: 'public<T extends Actor> T microsoft.servicefabric.actors.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
    type: Method
    summary: |-
      <p>アクター インターフェイスを実装するアクター オブジェクトへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)'
      parameters:
        - id: actorInterfaceType
          type: ffb09d2d
          description: <p>リモートのアクター オブジェクトによって実装されるアクター インターフェイスです。 返されるプロキシ オブジェクトでは、このインターフェイスを実装します。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>プロキシ アクター オブジェクトの Id。 このプロキシで呼び出されるメソッドは、この id を持つアクターに送信される要求になります。 </p>"
        - id: applicationName
          type: '26831127'
          description: <p>アクター オブジェクトをホストするアクター サービスを含む Service Fabric アプリケーションの名前です。 このパラメーターは、クライアントがその同じ Service Fabric アプリケーションの一部として実行されている場合は null にすることはできます。 詳細については、「解説」を参照してください。 </p>
        - id: serviceName
          type: '26831127'
          description: <p>Service Fabric サービスによって構成されたとおりの名前<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>アクターの実装にします。 既定では、サービスの名前は、アクター インターフェイスの名前から派生します。 ただし<xref uid="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false">ActorServiceAttribute</xref>はアクターが 1 つ以上にアクター インターフェイスを実装するか、serviceName の決定は自動的に加えられることはできません、アクター インターフェイスが別のアクター インターフェイスから派生した場合に必要です。 </p>
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
        description: <p>実装するアクター プロキシ オブジェクト<xref uid="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref>と<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>インターフェイスです。 </p>
  - uid: microsoft.servicefabric.actors._actor_service_attribute
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_service_attribute.yml
    name: ActorServiceAttribute
    nameWithType: ActorServiceAttribute
    fullName: microsoft.servicefabric.actors.ActorServiceAttribute
    type: Interface
    summary: <p>この属性は、アクター サービスのプロパティを構成できます。 属性は、アクターの型に適用されます。 </p>
    syntax:
      content: public interface ActorServiceAttribute
  - uid: microsoft.servicefabric.services.remoting._service
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service.yml
    name: Service
    nameWithType: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    type: Interface
    summary: <p>これは、サービスのインターフェイスのリモート処理を有効にするためのマーカー インターフェイスです。 <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref>このインターフェイスから派生する、サービスによって実装されたすべてのインターフェイスのリモート処理を提供します。 リモート インターフェイスは、クライアント側プロキシを経由してアクセスできます。 </p>
    syntax:
      content: public interface Service
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    nameWithType: 'ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
    type: Method
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクターの id です。 作成されたプロキシは、この id を持つアクターをホストするアクター サービスのパーティションに接続されます。 </p>
      return:
        type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
        description: "<p>実装するサービス プロキシ オブジェクト<xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref>と<code>&lt;T&gt; \r\n\r\n    </code>です。 </p>"
  - uid: microsoft.servicefabric.services.remoting.client._service_proxy_base
    parent: microsoft.servicefabric.services.remoting.client
    href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
    name: ServiceProxyBase
    nameWithType: ServiceProxyBase
    fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase
    type: Class
    summary: <p>プロキシをリモート IService インターフェイスの基本実装を提供します。 </p>
    syntax:
      content: public class ServiceProxyBase
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    nameWithType: 'ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
    type: Method
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクターの id です。 作成されたプロキシは、この id を持つアクターをホストするアクター サービスのパーティションに接続されます。 </p>
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
        description: "<p>実装するサービス プロキシ オブジェクト<xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref>と<code>&lt;T&gt; \r\n\r\n    </code>です。 </p>"
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    nameWithType: 'ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
    type: Method
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: partitionKey
          type: 0364520f
          description: <p>接続するアクター サービス パーティションのキー。 </p>
      return:
        type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
        description: "<p>実装するサービス プロキシ オブジェクト<xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref>と<code>&lt;T&gt; \r\n\r\n    </code>です。 </p>"
  - uid: 'microsoft.servicefabric.actors._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)'
    parent: microsoft.servicefabric.actors._actor_proxy_factory
    href: microsoft.servicefabric.actors._actor_proxy_factory.yml
    name: 'createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    nameWithType: 'ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    fullName: 'public<T extends Service> T microsoft.servicefabric.actors.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
    type: Method
    summary: |-
      <p>指定したアクターの id をホストしているおよび指定した種類のサービス インターフェイスを実装しているアクター サービスへのプロキシを作成します。</p>
      <p></p>
    syntax:
      content: 'public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)'
      parameters:
        - id: serviceInterfaceType
          type: ffb09d2d
          description: <p>アクター サービスによって実装されるサービス インターフェイスの型。 </p>
        - id: serviceUri
          type: '62304784'
          description: <p>接続するアクター サービスの Uri。 </p>
        - id: partitionKey
          type: 0364520f
          description: <p>接続するアクター サービス パーティションのキー。 </p>
        - id: listenerName
          type: '26831127'
          description: <p>既定では、アクター サービスは、1 つだけリスナーに接続して通信するクライアントを持ちます。 複数のリスナーをアクター サービスを構成することは、listenerName パラメーターへの接続にリスナーの名前を指定します。 </p>
      return:
        type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
        description: "<p>実装するサービス プロキシ オブジェクト<xref uid=\"microsoft.servicefabric.services.remoting.client._service_proxy\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref>と<code>&lt;T&gt; \r\n\r\n    </code>です。 </p>"