### YamlMime:ManagedReference
items:
  - uid: system.fabric._deployed_application_health_query_description
    id: _deployed_application_health_query_description
    parent: system.fabric
    children:
      - 'system.fabric._deployed_application_health_query_description.DeployedApplicationHealthQueryDescription(URI,String)'
      - system.fabric._deployed_application_health_query_description.getApplicationHealthPolicy()
      - system.fabric._deployed_application_health_query_description.getApplicationName()
      - system.fabric._deployed_application_health_query_description.getDeployedServicePackageHealthStatesFilter()
      - system.fabric._deployed_application_health_query_description.getHealthEventsFilter()
      - system.fabric._deployed_application_health_query_description.getNodeName()
      - system.fabric._deployed_application_health_query_description.setApplicationHealthPolicy(ApplicationHealthPolicy)
      - system.fabric._deployed_application_health_query_description.setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter)
      - system.fabric._deployed_application_health_query_description.setHealthEventsFilter(HealthEventsFilter)
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: DeployedApplicationHealthQueryDescription
    nameWithType: DeployedApplicationHealthQueryDescription
    fullName: system.fabric.DeployedApplicationHealthQueryDescription
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 11
    package: system.fabric
    summary: '<p>説明を取得するためのクエリ入力<xref uid="system.fabric.health._deployed_application_health" data-throw-if-not-resolved="false">system.fabric.health.DeployedApplicationHealth</xref>です。 によって使用される<xref uid="system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)" data-throw-if-not-resolved="false">system.fabric.HealthClient#getDeployedApplicationHealthAsync(system.fabric.DeployedApplicationHealthQueryDescription)</xref></p>'
    syntax:
      content: public class DeployedApplicationHealthQueryDescription
    inheritance:
      - java.lang.Object
  - uid: 'system.fabric._deployed_application_health_query_description.DeployedApplicationHealthQueryDescription(URI,String)'
    id: 'DeployedApplicationHealthQueryDescription(URI,String)'
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: 'DeployedApplicationHealthQueryDescription(URI applicationName, String nodeName)'
    nameWithType: 'DeployedApplicationHealthQueryDescription.DeployedApplicationHealthQueryDescription(URI applicationName, String nodeName)'
    fullName: 'system.fabric.DeployedApplicationHealthQueryDescription.DeployedApplicationHealthQueryDescription(URI applicationName, String nodeName)'
    overload: system.fabric._deployed_application_health_query_description.DeployedApplicationHealthQueryDescription*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 35
    package: system.fabric
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.DeployedApplicationHealthQueryDescription</xref>クラスです。</p>
      <p></p>
    syntax:
      content: 'public DeployedApplicationHealthQueryDescription(URI applicationName, String nodeName)'
      parameters:
        - id: applicationName
          type: '62304784'
          description: <p>アプリケーション名。 Null にすることはできません。 </p>
        - id: nodeName
          type: '26831127'
          description: <p>ノード名。 Null または空にすることはできません。 </p>
  - uid: system.fabric._deployed_application_health_query_description.getApplicationHealthPolicy()
    id: getApplicationHealthPolicy()
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: getApplicationHealthPolicy()
    nameWithType: DeployedApplicationHealthQueryDescription.getApplicationHealthPolicy()
    fullName: ApplicationHealthPolicy system.fabric.DeployedApplicationHealthQueryDescription.getApplicationHealthPolicy()
    overload: system.fabric._deployed_application_health_query_description.getApplicationHealthPolicy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 88
    package: system.fabric
    summary: |-
      <p>取得、 <xref uid="system.fabric._application_health_policy" data-throw-if-not-resolved="false">system.fabric.ApplicationHealthPolicy</xref>展開済みアプリケーションの正常性を評価するために使用します。</p>
      <p></p>
    syntax:
      content: public ApplicationHealthPolicy getApplicationHealthPolicy()
      return:
        type: system.fabric._application_health_policy
        description: <p><xref uid="system.fabric._application_health_policy" data-throw-if-not-resolved="false">system.fabric.ApplicationHealthPolicy</xref>展開済みアプリケーションの正常性を評価するために使用します。 </p>
  - uid: system.fabric._deployed_application_health_query_description.getApplicationName()
    id: getApplicationName()
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: getApplicationName()
    nameWithType: DeployedApplicationHealthQueryDescription.getApplicationName()
    fullName: URI system.fabric.DeployedApplicationHealthQueryDescription.getApplicationName()
    overload: system.fabric._deployed_application_health_query_description.getApplicationName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 68
    package: system.fabric
    summary: |-
      <p>アプリケーションの名前を取得します。</p>
      <p></p>
    syntax:
      content: public URI getApplicationName()
      return:
        type: '62304784'
        description: <p>アプリケーションの名前です。 </p>
  - uid: system.fabric._deployed_application_health_query_description.getDeployedServicePackageHealthStatesFilter()
    id: getDeployedServicePackageHealthStatesFilter()
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: getDeployedServicePackageHealthStatesFilter()
    nameWithType: DeployedApplicationHealthQueryDescription.getDeployedServicePackageHealthStatesFilter()
    fullName: DeployedServicePackageHealthStatesFilter system.fabric.DeployedApplicationHealthQueryDescription.getDeployedServicePackageHealthStatesFilter()
    overload: system.fabric._deployed_application_health_query_description.getDeployedServicePackageHealthStatesFilter*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 148
    package: system.fabric
    summary: "<p>フィルターを取得<xref uid=\"system.fabric.health._deployed_service_package_health_state\" data-throw-if-not-resolved=\"false\">system.fabric.health.DeployedServicePackageHealthState</xref>子。 フィルターに一致する子のみが返されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>フィルターに一致する子のみが返されます。 すべての子は、展開されたアプリケーションで集計された正常性状態の評価に使用されます。 フィルターが指定されていない場合は、展開済みアプリケーションの展開済みサービス パッケージのすべての子が返されます。 </p>"
    syntax:
      content: public DeployedServicePackageHealthStatesFilter getDeployedServicePackageHealthStatesFilter()
      return:
        type: system.fabric._deployed_service_package_health_states_filter
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric._deployed_service_package_health_states_filter\" data-throw-if-not-resolved=\"false\">system.fabric.DeployedServicePackageHealthStatesFilter</xref>返された展開済みサービス パッケージをフィルター処理するために使用します。 </p>"
  - uid: system.fabric._deployed_application_health_query_description.getHealthEventsFilter()
    id: getHealthEventsFilter()
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: getHealthEventsFilter()
    nameWithType: DeployedApplicationHealthQueryDescription.getHealthEventsFilter()
    fullName: HealthEventsFilter system.fabric.DeployedApplicationHealthQueryDescription.getHealthEventsFilter()
    overload: system.fabric._deployed_application_health_query_description.getHealthEventsFilter*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 115
    package: system.fabric
    summary: "<p>コレクションのフィルターを取得<xref uid=\"system.fabric.health._health_event\" data-throw-if-not-resolved=\"false\">system.fabric.health.HealthEvent</xref>配置したアプリケーションで報告します。 フィルターに一致するイベントのみが返されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>フィルターに一致するイベントのみが返されます。 すべてのイベントは、アプリケーションで集計された正常性状態の評価に使用されます。 フィルターが指定されていない場合は、すべてのイベントが返されます。 </p>"
    syntax:
      content: public HealthEventsFilter getHealthEventsFilter()
      return:
        type: system.fabric._health_events_filter
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric._health_events_filter\" data-throw-if-not-resolved=\"false\">system.fabric.HealthEventsFilter</xref>返されるイベントをフィルター処理するために使用します。 </p>"
  - uid: system.fabric._deployed_application_health_query_description.getNodeName()
    id: getNodeName()
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: getNodeName()
    nameWithType: DeployedApplicationHealthQueryDescription.getNodeName()
    fullName: String system.fabric.DeployedApplicationHealthQueryDescription.getNodeName()
    overload: system.fabric._deployed_application_health_query_description.getNodeName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 77
    package: system.fabric
    summary: |-
      <p>ノード名を取得します。</p>
      <p></p>
    syntax:
      content: public String getNodeName()
      return:
        type: '26831127'
        description: <p>ノード名。 </p>
  - uid: system.fabric._deployed_application_health_query_description.setApplicationHealthPolicy(ApplicationHealthPolicy)
    id: setApplicationHealthPolicy(ApplicationHealthPolicy)
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy)
    nameWithType: DeployedApplicationHealthQueryDescription.setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy)
    fullName: void system.fabric.DeployedApplicationHealthQueryDescription.setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy)
    overload: system.fabric._deployed_application_health_query_description.setApplicationHealthPolicy*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 100
    package: system.fabric
    summary: |-
      <p>セット、 <xref uid="system.fabric._application_health_policy" data-throw-if-not-resolved="false">system.fabric.ApplicationHealthPolicy</xref>展開済みアプリケーションの正常性を評価するために使用します。</p>
      <p></p>
    syntax:
      content: public void setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy)
      parameters:
        - id: applicationHealthPolicy
          type: system.fabric._application_health_policy
          description: <p><xref uid="system.fabric._application_health_policy" data-throw-if-not-resolved="false">system.fabric.ApplicationHealthPolicy</xref>展開済みアプリケーションの正常性を評価するために使用します。 </p>
  - uid: system.fabric._deployed_application_health_query_description.setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter)
    id: setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter)
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter deployedServicePackageHealthStatesFilter)
    nameWithType: DeployedApplicationHealthQueryDescription.setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter deployedServicePackageHealthStatesFilter)
    fullName: void system.fabric.DeployedApplicationHealthQueryDescription.setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter deployedServicePackageHealthStatesFilter)
    overload: system.fabric._deployed_application_health_query_description.setDeployedServicePackageHealthStatesFilter*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 165
    package: system.fabric
    summary: "<p>フィルター設定<xref uid=\"system.fabric.health._deployed_service_package_health_state\" data-throw-if-not-resolved=\"false\">system.fabric.health.DeployedServicePackageHealthState</xref>子。 フィルターに一致する子のみが返されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>フィルターに一致するイベントのみが返されます。 すべてのイベントは、アプリケーションで集計された正常性状態の評価に使用されます。 フィルターが指定されていない場合は、すべてのイベントが返されます。 </p>"
    syntax:
      content: public void setDeployedServicePackageHealthStatesFilter(DeployedServicePackageHealthStatesFilter deployedServicePackageHealthStatesFilter)
      parameters:
        - id: deployedServicePackageHealthStatesFilter
          type: system.fabric._deployed_service_package_health_states_filter
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._deployed_service_package_health_states_filter\" data-throw-if-not-resolved=\"false\">system.fabric.DeployedServicePackageHealthStatesFilter</xref>返された展開済みサービス パッケージをフィルター処理するために使用します。 </p>"
  - uid: system.fabric._deployed_application_health_query_description.setHealthEventsFilter(HealthEventsFilter)
    id: setHealthEventsFilter(HealthEventsFilter)
    parent: system.fabric._deployed_application_health_query_description
    href: system.fabric._deployed_application_health_query_description.yml
    langs:
      - java
    name: setHealthEventsFilter(HealthEventsFilter healthEventsFilter)
    nameWithType: DeployedApplicationHealthQueryDescription.setHealthEventsFilter(HealthEventsFilter healthEventsFilter)
    fullName: void system.fabric.DeployedApplicationHealthQueryDescription.setHealthEventsFilter(HealthEventsFilter healthEventsFilter)
    overload: system.fabric._deployed_application_health_query_description.setHealthEventsFilter*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/DeployedApplicationHealthQueryDescription.java
      startLine: 131
    package: system.fabric
    summary: "<p>コレクションのフィルター設定<xref uid=\"system.fabric.health._health_event\" data-throw-if-not-resolved=\"false\">system.fabric.health.HealthEvent</xref>配置したアプリケーションで報告します。 フィルターに一致するイベントのみが返されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>フィルターに一致するイベントのみが返されます。 すべてのイベントは、アプリケーションで集計された正常性状態の評価に使用されます。 フィルターが指定されていない場合は、すべてのイベントが返されます。 </p>"
    syntax:
      content: public void setHealthEventsFilter(HealthEventsFilter healthEventsFilter)
      parameters:
        - id: healthEventsFilter
          type: system.fabric._health_events_filter
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._health_events_filter\" data-throw-if-not-resolved=\"false\">system.fabric.HealthEventsFilter</xref>返されるイベントをフィルター処理するために使用します。 </p>"
references:
  - uid: '62304784'
    spec.java:
      - name: URI
        fullName: URI
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: system.fabric._deployed_application_health_query_description.DeployedApplicationHealthQueryDescription*
    name: DeployedApplicationHealthQueryDescription
    nameWithType: DeployedApplicationHealthQueryDescription.DeployedApplicationHealthQueryDescription
    fullName: system.fabric.DeployedApplicationHealthQueryDescription.DeployedApplicationHealthQueryDescription
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.getApplicationName*
    name: getApplicationName
    nameWithType: DeployedApplicationHealthQueryDescription.getApplicationName
    fullName: URI system.fabric.DeployedApplicationHealthQueryDescription.getApplicationName
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.getNodeName*
    name: getNodeName
    nameWithType: DeployedApplicationHealthQueryDescription.getNodeName
    fullName: String system.fabric.DeployedApplicationHealthQueryDescription.getNodeName
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.getApplicationHealthPolicy*
    name: getApplicationHealthPolicy
    nameWithType: DeployedApplicationHealthQueryDescription.getApplicationHealthPolicy
    fullName: ApplicationHealthPolicy system.fabric.DeployedApplicationHealthQueryDescription.getApplicationHealthPolicy
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.setApplicationHealthPolicy*
    name: setApplicationHealthPolicy
    nameWithType: DeployedApplicationHealthQueryDescription.setApplicationHealthPolicy
    fullName: void system.fabric.DeployedApplicationHealthQueryDescription.setApplicationHealthPolicy
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.getHealthEventsFilter*
    name: getHealthEventsFilter
    nameWithType: DeployedApplicationHealthQueryDescription.getHealthEventsFilter
    fullName: HealthEventsFilter system.fabric.DeployedApplicationHealthQueryDescription.getHealthEventsFilter
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.setHealthEventsFilter*
    name: setHealthEventsFilter
    nameWithType: DeployedApplicationHealthQueryDescription.setHealthEventsFilter
    fullName: void system.fabric.DeployedApplicationHealthQueryDescription.setHealthEventsFilter
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.getDeployedServicePackageHealthStatesFilter*
    name: getDeployedServicePackageHealthStatesFilter
    nameWithType: DeployedApplicationHealthQueryDescription.getDeployedServicePackageHealthStatesFilter
    fullName: DeployedServicePackageHealthStatesFilter system.fabric.DeployedApplicationHealthQueryDescription.getDeployedServicePackageHealthStatesFilter
    package: system.fabric
  - uid: system.fabric._deployed_application_health_query_description.setDeployedServicePackageHealthStatesFilter*
    name: setDeployedServicePackageHealthStatesFilter
    nameWithType: DeployedApplicationHealthQueryDescription.setDeployedServicePackageHealthStatesFilter
    fullName: void system.fabric.DeployedApplicationHealthQueryDescription.setDeployedServicePackageHealthStatesFilter
    package: system.fabric
  - uid: system.fabric._application_health_policy
    parent: system.fabric
    href: system.fabric._application_health_policy.yml
    name: ApplicationHealthPolicy
    nameWithType: ApplicationHealthPolicy
    fullName: system.fabric.ApplicationHealthPolicy
    type: Class
    summary: <p>アプリケーションまたはその子エンティティを 1 つの正常性を評価する正常性ポリシーを定義します。 </p>
    syntax:
      content: public class ApplicationHealthPolicy
  - uid: system.fabric._health_events_filter
    parent: system.fabric
    href: system.fabric._health_events_filter.yml
    name: HealthEventsFilter
    nameWithType: HealthEventsFilter
    fullName: system.fabric.HealthEventsFilter
    type: Class
    syntax:
      content: public class HealthEventsFilter
  - uid: system.fabric._deployed_service_package_health_states_filter
    parent: system.fabric
    href: system.fabric._deployed_service_package_health_states_filter.yml
    name: DeployedServicePackageHealthStatesFilter
    nameWithType: DeployedServicePackageHealthStatesFilter
    fullName: system.fabric.DeployedServicePackageHealthStatesFilter
    type: Class
    syntax:
      content: public class DeployedServicePackageHealthStatesFilter
  - uid: system.fabric._pin_collection
    parent: system.fabric
    href: system.fabric._pin_collection.yml
    name: PinCollection
    nameWithType: PinCollection
    fullName: system.fabric.PinCollection
    type: Class
    syntax:
      content: public class PinCollection
  - uid: system.fabric.health._health_event
    parent: system.fabric.health
    href: system.fabric.health._health_event.yml
    name: HealthEvent
    nameWithType: HealthEvent
    fullName: system.fabric.health.HealthEvent
    type: Class
    summary: <p>A <xref uid="system.fabric.health._health_event" data-throw-if-not-resolved="false">HealthEvent</xref>オブジェクトは ReportHealth API を使用してエンティティのヘルスをレポート中に使用される正常性の情報を含む構造体 </p>
    syntax:
      content: public class HealthEvent
  - uid: system.fabric.health._deployed_service_package_health_state
    parent: system.fabric.health
    href: system.fabric.health._deployed_service_package_health_state.yml
    name: DeployedServicePackageHealthState
    nameWithType: DeployedServicePackageHealthState
    fullName: system.fabric.health.DeployedServicePackageHealthState
    type: Class
    summary: <p>エンティティの識別子と、集計された正常性状態を含む、展開済みサービス パッケージのヘルス状態を表します。 </p>
    syntax:
      content: public class DeployedServicePackageHealthState
  - uid: system.fabric.health._deployed_application_health
    parent: system.fabric.health
    href: system.fabric.health._deployed_application_health.yml
    name: DeployedApplicationHealth
    nameWithType: DeployedApplicationHealth
    fullName: system.fabric.health.DeployedApplicationHealth
    type: Class
    summary: '<p>によって返されるノードにデプロイされたアプリケーションの正常性について説明します<xref uid="system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)" data-throw-if-not-resolved="false">system.fabric.HealthClient#getDeployedApplicationHealthAsync(system.fabric.DeployedApplicationHealthQueryDescription)</xref></p>'
    syntax:
      content: public class DeployedApplicationHealth extends EntityHealth
  - uid: system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)
    parent: system.fabric._health_client
    href: system.fabric._health_client.yml
    name: getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
    nameWithType: HealthClient.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
    fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
    type: Method
    summary: |-
      <p>指定されたノードで、展開済みの Service Fabric アプリケーションの正常性を非同期に取得します。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
      parameters:
        - id: queryDescription
          type: system.fabric._deployed_application_health_query_description
          description: <p>クエリの説明 </p>
      return:
        type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
        description: <p>展開済みの Service Fabric アプリケーションの正常性。 </p>