### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher
    id: _reactor_dispatcher
    parent: com.microsoft.azure.eventhubs.amqp
    children:
      - com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke(final DispatchHandler)
      - 'com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke(final int,final DispatchHandler)'
      - com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.ReactorDispatcher(final Reactor)
    href: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.yml
    langs:
      - java
    name: ReactorDispatcher
    nameWithType: ReactorDispatcher
    fullName: com.microsoft.azure.eventhubs.amqp.ReactorDispatcher
    type: Class
    source:
      remote: &ref_0
        path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/amqp/ReactorDispatcher.java
        branch: master
        repo: 'https://github.com/Azure/azure-event-hubs-java'
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/amqp/ReactorDispatcher.java
      startLine: 28
    package: com.microsoft.azure.eventhubs.amqp
    summary: "<p><span data-ttu-id=\"de908-101\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>スレッド セーフであるのではないすべての呼び出しを<xref uid=\"\" data-throw-if-not-resolved=\"false\">Proton</xref>リアクター スレッドでの API がする必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-101\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> is not thread-safe - all calls to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Proton</xref> API's should be - on the Reactor Thread.</span></span> <span data-ttu-id=\"de908-102\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref> ex - すべてのイベント駆動型 API 用の非インボックスの動作: onReceive で-onSocketRead 時に生じる可能性があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-102\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead.</span></span> <span data-ttu-id=\"de908-103\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref> Send() - インボックス - リアクターの別のスレッドで実行できなかった可能性がありますするなどの API をサポートしていませんでした。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-103\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> didn't support API's like Send() out-of-box - which could potentially run on different thread to that of Reactor.</span></span> <span data-ttu-id=\"de908-104\">フックするイベントを生成する、次のユーティリティ クラスを使用するように、<xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>のイベント委任パターン。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-104\">So, the following utility class is used to generate an Event to hook into <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>'s event delegation pattern.</span></span> <span data-ttu-id=\"de908-105\">使用して、<xref uid=\"\" data-throw-if-not-resolved=\"false\">パイプ</xref>をリアクター リッスンで IO として。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-105\">It uses a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Pipe</xref> as the IO on which Reactor Listens to.</span></span> <span data-ttu-id=\"de908-106\">基数: 複数<xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref>の 1 に接続できなかった<xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-106\">Cardinality: multiple <xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref>'s could be attached to 1 <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>.</span></span> <span data-ttu-id=\"de908-107\">各<xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref> API を呼び出すことは、同期的に - 初期化する必要があります<xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>これはスレッド セーフではありません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-107\">Each <xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref> should be initialized Synchronously - as it calls API in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> which is not thread-safe.</span></span> </p>"
    syntax: &ref_1
      content: public class ReactorDispatcher
    inheritance:
      - java.lang.Object
  - uid: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke(final DispatchHandler)
    id: invoke(final DispatchHandler)
    parent: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher
    href: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.yml
    langs:
      - java
    name: invoke(final DispatchHandler timerCallback)
    nameWithType: ReactorDispatcher.invoke(final DispatchHandler timerCallback)
    fullName: void com.microsoft.azure.eventhubs.amqp.ReactorDispatcher.invoke(final DispatchHandler timerCallback)
    overload: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/amqp/ReactorDispatcher.java
      startLine: 54
    package: com.microsoft.azure.eventhubs.amqp
    syntax:
      content: public void invoke(final DispatchHandler timerCallback)
      parameters:
        - id: timerCallback
          type: 93de0ef9com.microsoft.azure.eventhubs.amqp._dispatch_handler
  - uid: 'com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke(final int,final DispatchHandler)'
    id: 'invoke(final int,final DispatchHandler)'
    parent: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher
    href: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.yml
    langs:
      - java
    name: 'invoke(final int delay, final DispatchHandler timerCallback)'
    nameWithType: 'ReactorDispatcher.invoke(final int delay, final DispatchHandler timerCallback)'
    fullName: 'void com.microsoft.azure.eventhubs.amqp.ReactorDispatcher.invoke(final int delay, final DispatchHandler timerCallback)'
    overload: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/amqp/ReactorDispatcher.java
      startLine: 59
    package: com.microsoft.azure.eventhubs.amqp
    syntax:
      content: 'public void invoke(final int delay, final DispatchHandler timerCallback)'
      parameters:
        - id: delay
          type: cd225469
        - id: timerCallback
          type: 93de0ef9com.microsoft.azure.eventhubs.amqp._dispatch_handler
  - uid: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.ReactorDispatcher(final Reactor)
    id: ReactorDispatcher(final Reactor)
    parent: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher
    href: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.yml
    langs:
      - java
    name: ReactorDispatcher(final Reactor reactor)
    nameWithType: ReactorDispatcher.ReactorDispatcher(final Reactor reactor)
    fullName: com.microsoft.azure.eventhubs.amqp.ReactorDispatcher.ReactorDispatcher(final Reactor reactor)
    overload: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.ReactorDispatcher*
    type: Constructor
    source:
      remote: *ref_0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/amqp/ReactorDispatcher.java
      startLine: 34
    package: com.microsoft.azure.eventhubs.amqp
    syntax:
      content: public ReactorDispatcher(final Reactor reactor)
      parameters:
        - id: reactor
          type: 723aaf67
references:
  - uid: 723aaf67
    spec.java:
      - name: final Reactor
        fullName: final Reactor
  - uid: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.ReactorDispatcher*
    name: ReactorDispatcher
    nameWithType: ReactorDispatcher.ReactorDispatcher
    fullName: com.microsoft.azure.eventhubs.amqp.ReactorDispatcher.ReactorDispatcher
    package: com.microsoft.azure.eventhubs.amqp
  - uid: 93de0ef9com.microsoft.azure.eventhubs.amqp._dispatch_handler
    spec.java:
      - name: 'final '
        fullName: 'final '
      - uid: com.microsoft.azure.eventhubs.amqp._dispatch_handler
        name: DispatchHandler
        fullName: com.microsoft.azure.eventhubs.amqp.DispatchHandler
        href: com.microsoft.azure.eventhubs.amqp._dispatch_handler.yml
  - uid: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.invoke*
    name: invoke
    nameWithType: ReactorDispatcher.invoke
    fullName: void com.microsoft.azure.eventhubs.amqp.ReactorDispatcher.invoke
    package: com.microsoft.azure.eventhubs.amqp
  - uid: cd225469
    spec.java:
      - name: final int
        fullName: final int
  - uid: com.microsoft.azure.eventhubs.amqp._dispatch_handler
    parent: com.microsoft.azure.eventhubs.amqp
    href: com.microsoft.azure.eventhubs.amqp._dispatch_handler.yml
    name: DispatchHandler
    nameWithType: DispatchHandler
    fullName: com.microsoft.azure.eventhubs.amqp.DispatchHandler
    type: Class
    syntax:
      content: public class DispatchHandler
  - uid: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher
    parent: com.microsoft.azure.eventhubs.amqp
    href: com.microsoft.azure.eventhubs.amqp._reactor_dispatcher.yml
    name: ReactorDispatcher
    nameWithType: ReactorDispatcher
    fullName: com.microsoft.azure.eventhubs.amqp.ReactorDispatcher
    type: Class
    summary: "<p><span data-ttu-id=\"de908-108\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>スレッド セーフであるのではないすべての呼び出しを<xref uid=\"\" data-throw-if-not-resolved=\"false\">Proton</xref>リアクター スレッドでの API がする必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-108\">\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> is not thread-safe - all calls to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Proton</xref> API's should be - on the Reactor Thread.</span></span> <span data-ttu-id=\"de908-109\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref> ex - すべてのイベント駆動型 API 用の非インボックスの動作: onReceive で-onSocketRead 時に生じる可能性があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-109\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead.</span></span> <span data-ttu-id=\"de908-110\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref> Send() - インボックス - リアクターの別のスレッドで実行できなかった可能性がありますするなどの API をサポートしていませんでした。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-110\"><xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> didn't support API's like Send() out-of-box - which could potentially run on different thread to that of Reactor.</span></span> <span data-ttu-id=\"de908-111\">フックするイベントを生成する、次のユーティリティ クラスを使用するように、<xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>のイベント委任パターン。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-111\">So, the following utility class is used to generate an Event to hook into <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>'s event delegation pattern.</span></span> <span data-ttu-id=\"de908-112\">使用して、<xref uid=\"\" data-throw-if-not-resolved=\"false\">パイプ</xref>をリアクター リッスンで IO として。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-112\">It uses a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Pipe</xref> as the IO on which Reactor Listens to.</span></span> <span data-ttu-id=\"de908-113\">基数: 複数<xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref>の 1 に接続できなかった<xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-113\">Cardinality: multiple <xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref>'s could be attached to 1 <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref>.</span></span> <span data-ttu-id=\"de908-114\">各<xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref> API を呼び出すことは、同期的に - 初期化する必要があります<xref uid=\"\" data-throw-if-not-resolved=\"false\">リアクター</xref>これはスレッド セーフではありません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"de908-114\">Each <xref uid=\"com.microsoft.azure.eventhubs.amqp._reactor_dispatcher\" data-throw-if-not-resolved=\"false\">ReactorDispatcher</xref> should be initialized Synchronously - as it calls API in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Reactor</xref> which is not thread-safe.</span></span> </p>"
    syntax: *ref_1