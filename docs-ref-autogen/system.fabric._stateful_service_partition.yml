### YamlMime:ManagedReference
items:
  - uid: system.fabric._stateful_service_partition
    id: _stateful_service_partition
    parent: system.fabric
    children:
      - 'system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)'
      - 'system.fabric._stateful_service_partition.createTransactionalReplicator(ReplicatorSettings,TransactionalReplicatorSettings,KtlLoggerSharedLogSettings)'
      - system.fabric._stateful_service_partition.getReadStatus()
      - system.fabric._stateful_service_partition.getwriteStatus()
      - system.fabric._stateful_service_partition.reportReplicaHealth(HealthInformation)
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: StatefulServicePartition
    nameWithType: StatefulServicePartition
    fullName: system.fabric.StatefulServicePartition
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 5
    package: system.fabric
    syntax:
      content: public interface StatefulServicePartition extends ServicePartition
    inheritedMembers:
      - system.fabric._service_partition.getPartitionInfo()
      - system.fabric._service_partition.reportFault(FaultType)
      - system.fabric._service_partition.reportLoad(Collection<LoadMetric>)
      - system.fabric._service_partition.reportMoveCost(MoveCost)
      - system.fabric._service_partition.reportPartitionHealth(HealthInformation)
  - uid: 'system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)'
    id: 'createReplicator(StateProvider,ReplicatorSettings)'
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: 'createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    nameWithType: 'StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    fullName: 'FabricReplicator system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    overload: system.fabric._stateful_service_partition.createReplicator*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 51
    package: system.fabric
    summary: "<p>作成、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>指定された設定で、レプリカに返します。</p>\n<p>\r\n\r\n  <b>注釈:</b>の作成にこのメソッドを使用する必要があります、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>サービスとして、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref> を実装するステートフルなサービス<xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>です。 </p>"
    syntax:
      content: 'public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
      parameters:
        - id: stateProvider
          type: system.fabric._state_provider
          description: <p><xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">System.fabric.StateProvider</xref>いる、返された<xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>関連付けする必要があります。 これは、多くの場合、同じオブジェクトを実装する<xref uid="system.fabric._stateful_service_replica" data-throw-if-not-resolved="false">system.fabric.StatefulServiceReplica</xref>、特定のサービスを異なる方法で考慮することがありますが、します。 </p>
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._replicator_settings\" data-throw-if-not-resolved=\"false\">system.fabric.ReplicatorSettings</xref>いる、返された<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>構成する必要があります。 </p>"
      return:
        type: system.fabric._fabric_replicator
        description: <p>返します<xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>です。 </p>
  - uid: 'system.fabric._stateful_service_partition.createTransactionalReplicator(ReplicatorSettings,TransactionalReplicatorSettings,KtlLoggerSharedLogSettings)'
    id: 'createTransactionalReplicator(ReplicatorSettings,TransactionalReplicatorSettings,KtlLoggerSharedLogSettings)'
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: 'createTransactionalReplicator(ReplicatorSettings replicatorSettings, TransactionalReplicatorSettings txReplicatorSettings, KtlLoggerSharedLogSettings ktLogSettings)'
    nameWithType: 'StatefulServicePartition.createTransactionalReplicator(ReplicatorSettings replicatorSettings, TransactionalReplicatorSettings txReplicatorSettings, KtlLoggerSharedLogSettings ktLogSettings)'
    fullName: 'FabricReplicator system.fabric.StatefulServicePartition.createTransactionalReplicator(ReplicatorSettings replicatorSettings, TransactionalReplicatorSettings txReplicatorSettings, KtlLoggerSharedLogSettings ktLogSettings)'
    overload: system.fabric._stateful_service_partition.createTransactionalReplicator*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 53
    package: system.fabric
    syntax:
      content: 'public FabricReplicator createTransactionalReplicator(ReplicatorSettings replicatorSettings, TransactionalReplicatorSettings txReplicatorSettings, KtlLoggerSharedLogSettings ktLogSettings)'
      parameters:
        - id: replicatorSettings
          type: system.fabric._replicator_settings
        - id: txReplicatorSettings
          type: system.fabric._transactional_replicator_settings
        - id: ktLogSettings
          type: system.fabric._ktl_logger_shared_log_settings
      return:
        type: system.fabric._fabric_replicator
  - uid: system.fabric._stateful_service_partition.getReadStatus()
    id: getReadStatus()
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: getReadStatus()
    nameWithType: StatefulServicePartition.getReadStatus()
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getReadStatus()
    overload: system.fabric._stateful_service_partition.getReadStatus*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 17
    package: system.fabric
    summary: "<p>読み取り操作に関して、レプリカの準備の確認に使用されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>レプリカが読み取り操作は、顧客の要求を処理する前に、readStatus をチェックする必要があります。 </p>"
    syntax:
      content: public PartitionAccessStatus getReadStatus()
      return:
        type: system.fabric._partition_access_status
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric._partition_access_status\" data-throw-if-not-resolved=\"false\">system.fabric.PartitionAccessStatus</xref>です。 </p>"
    exceptions:
      - type: system.fabric.exception._fabric_object_closed_exception
        description: <p>これは、パーティション オブジェクトが閉じていることを示します。 レプリカ/レプリケーター/インスタンスが閉じられたか、またはは閉じられます。 </p>
  - uid: system.fabric._stateful_service_partition.getwriteStatus()
    id: getwriteStatus()
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: getwriteStatus()
    nameWithType: StatefulServicePartition.getwriteStatus()
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getwriteStatus()
    overload: system.fabric._stateful_service_partition.getwriteStatus*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 30
    package: system.fabric
    summary: "<p>書き込み操作についてそのパーティションの準備の確認に使用されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>レプリカは、書き込み操作は、顧客の要求をサービスする前に、WriteStatus をチェックする必要があります。 </p>"
    syntax:
      content: public PartitionAccessStatus getwriteStatus()
      return:
        type: system.fabric._partition_access_status
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric._partition_access_status\" data-throw-if-not-resolved=\"false\">system.fabric.PartitionAccessStatus</xref>です。 </p>"
    exceptions:
      - type: system.fabric.exception._fabric_object_closed_exception
        description: <p>これは、パーティション オブジェクトが閉じていることを示します。 レプリカ/レプリケーター/インスタンスが閉じられたか、またはは閉じられます。 </p>
  - uid: system.fabric._stateful_service_partition.reportReplicaHealth(HealthInformation)
    id: reportReplicaHealth(HealthInformation)
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    langs:
      - java
    name: reportReplicaHealth(HealthInformation healthInfo)
    nameWithType: StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
    fullName: void system.fabric.StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
    overload: system.fabric._stateful_service_partition.reportReplicaHealth*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      startLine: 61
    package: system.fabric
    summary: |-
      <p>このパーティションに関連付けられている現在のレプリカの正常性を報告します。</p>
      <p></p>
    syntax:
      content: public void reportReplicaHealth(HealthInformation healthInfo)
      parameters:
        - id: healthInfo
          type: system.fabric.health._health_information
          description: <p>ヘルス情報をレポートします。 </p>
references:
  - uid: system.fabric._stateful_service_partition.getReadStatus*
    name: getReadStatus
    nameWithType: StatefulServicePartition.getReadStatus
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getReadStatus
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.getwriteStatus*
    name: getwriteStatus
    nameWithType: StatefulServicePartition.getwriteStatus
    fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getwriteStatus
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.createReplicator*
    name: createReplicator
    nameWithType: StatefulServicePartition.createReplicator
    fullName: FabricReplicator system.fabric.StatefulServicePartition.createReplicator
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.createTransactionalReplicator*
    name: createTransactionalReplicator
    nameWithType: StatefulServicePartition.createTransactionalReplicator
    fullName: FabricReplicator system.fabric.StatefulServicePartition.createTransactionalReplicator
    package: system.fabric
  - uid: system.fabric._stateful_service_partition.reportReplicaHealth*
    name: reportReplicaHealth
    nameWithType: StatefulServicePartition.reportReplicaHealth
    fullName: void system.fabric.StatefulServicePartition.reportReplicaHealth
    package: system.fabric
  - uid: system.fabric._service_partition.getPartitionInfo()
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: getPartitionInfo()
    nameWithType: ServicePartition.getPartitionInfo()
    fullName: ServicePartitionInformation system.fabric.ServicePartition.getPartitionInfo()
    type: Method
    summary: |-
      <p>アクセスできるように、 <xref uid="system.fabric._service_partition_information" data-throw-if-not-resolved="false">system.fabric.ServicePartitionInformation</xref>パーティションの種類および ID を格納する、サービスの</p>
      <p></p>
    syntax:
      content: public ServicePartitionInformation getPartitionInfo()
      return:
        type: system.fabric._service_partition_information
        description: <p>返します<xref uid="system.fabric._service_partition_information" data-throw-if-not-resolved="false">system.fabric.ServicePartitionInformation</xref>です。 </p>
  - uid: system.fabric._service_partition.reportFault(FaultType)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportFault(FaultType faultType)
    nameWithType: ServicePartition.reportFault(FaultType faultType)
    fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
    type: Method
    summary: "<p>負荷分散のメトリックのセットの負荷を報告します。 いつでも、負荷を報告することができます、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Collection</xref>の<xref uid=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\">LoadMetric</xref>メソッドの 1 つまたは複数のプロパティを提供し、 <xref uid=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\">system.fabric.LoadMetric</xref>メソッド.</p>\n<p>\r\n\r\n  <b>注釈:</b>エラーは通常報告サービス コードが検出したときに回復できませんから一部を発行します。 </p>"
    syntax:
      content: public void reportFault(FaultType faultType)
      parameters:
        - id: faultType
          type: system.fabric._fault_type
          description: <p><xref uid="system.fabric._load_metric" data-throw-if-not-resolved="false">System.fabric.LoadMetric</xref>サービスで検出されました。 </p>
  - uid: system.fabric._service_partition.reportLoad(Collection<LoadMetric>)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportLoad(Collection<LoadMetric> metrics)
    nameWithType: ServicePartition.reportLoad(Collection<LoadMetric> metrics)
    fullName: void system.fabric.ServicePartition.reportLoad(Collection<LoadMetric> metrics)
    type: Method
    summary: "<p>負荷分散のメトリックのセットの負荷を報告します。 いつでも、負荷を報告することができます、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Collection</xref>の<xref uid=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\">LoadMetric</xref>メソッドの 1 つまたは複数のプロパティを提供し、 <xref uid=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\">system.fabric.LoadMetric</xref>メソッド.</p>\n<p>\r\n\r\n  <b>注釈:</b>に用意されているものに対応する、報告されたメトリック、 <xref uid=\"system.fabric._service_load_metric_description\" data-throw-if-not-resolved=\"false\">system.fabric.ServiceLoadMetricDescription</xref>の一部として、 <xref uid=\"system.fabric._service_description\" data-throw-if-not-resolved=\"false\">system.fabric.ServiceDescription</xref>サービスの作成に使用されます。 説明には存在しない負荷メトリックは無視されます。 カスタム メトリックを報告機能では、サービスを分散させる追加のカスタム情報を基にした Service Fabric を使用します。 </p>"
    syntax:
      content: public void reportLoad(Collection<LoadMetric> metrics)
      parameters:
        - id: metrics
          type: 12ebb11asystem.fabric._load_metrica08ddfce
          description: <p>コレクション<xref uid="system.fabric._load_metric" data-throw-if-not-resolved="false">system.fabric.LoadMetric</xref>の負荷を報告します。 </p>
  - uid: system.fabric._service_partition.reportMoveCost(MoveCost)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportMoveCost(MoveCost moveCost)
    nameWithType: ServicePartition.reportMoveCost(MoveCost moveCost)
    fullName: void system.fabric.ServicePartition.reportMoveCost(MoveCost moveCost)
    type: Method
    summary: "<p>レプリカの移動コストを報告します。</p>\n<p>\r\n\r\n  <b>注釈:</b>Services は、このメソッドを使用してレプリカの移動コストをレポートできます。 サービス ファブリック リソース残高は、クラスター内の最適なバランスを検索するときに、読み込み情報と、各レプリカの移動コストの両方を調べます。 リソースの残高は分散を実現するために低コストでレプリカを移動たいとします。 </p>"
    syntax:
      content: public void reportMoveCost(MoveCost moveCost)
      parameters:
        - id: moveCost
          type: system.fabric._move_cost
          description: <p>報告<xref uid="system.fabric._move_cost" data-throw-if-not-resolved="false">system.fabric.MoveCost</xref>です。 </p>
  - uid: system.fabric._service_partition.reportPartitionHealth(HealthInformation)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportPartitionHealth(HealthInformation healthInfo)
    nameWithType: ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
    fullName: void system.fabric.ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
    type: Method
    summary: |-
      <p>現在のパーティションの正常性を報告します。</p>
      <p></p>
    syntax:
      content: public void reportPartitionHealth(HealthInformation healthInfo)
      parameters:
        - id: healthInfo
          type: system.fabric.health._health_information
          description: <p><xref uid="" data-throw-if-not-resolved="false">HealthInformation</xref></p>
  - uid: system.fabric._service_partition
    parent: system.fabric
    href: system.fabric._service_partition.yml
    name: ServicePartition
    nameWithType: ServicePartition
    fullName: system.fabric.ServicePartition
    type: Interface
    summary: <p>パーティションに属しを実行時に、システムとの対話をサービスのメソッドを提供に関する情報をサービスを提供します。 </p>
    syntax:
      content: public interface ServicePartition
  - uid: system.fabric._partition_access_status
    parent: system.fabric
    href: system.fabric._partition_access_status.yml
    name: PartitionAccessStatus
    nameWithType: PartitionAccessStatus
    fullName: system.fabric.PartitionAccessStatus
    type: Enum
    syntax:
      content: public enum PartitionAccessStatus
  - uid: system.fabric.exception._fabric_object_closed_exception
    parent: system.fabric.exception
    href: system.fabric.exception._fabric_object_closed_exception.yml
    name: FabricObjectClosedException
    nameWithType: FabricObjectClosedException
    fullName: system.fabric.exception.FabricObjectClosedException
    type: Class
    syntax:
      content: public class FabricObjectClosedException extends FabricException
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>高可用性と信頼性のレプリケート状態です。 </p>\n<p>\r\n\r\n  <b>注釈:</b>の既定の実装を提供、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>、 <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>、および<xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator</xref>インターフェイスの実装と共に、ユーザーのサービスが使用できる、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>インターフェイスです。 インスタンス、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスが経由で取得した、 <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator (system.fabric.StateProvider、system.fabric.ReplicatorSettings)</xref>メソッドにキャストできる<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>使用します。 </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: <p>サービスが対話するために実装する必要がありますの動作を定義、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>です。 </p>
    syntax:
      content: public interface StateProvider
  - uid: system.fabric._replicator_settings
    parent: system.fabric
    href: system.fabric._replicator_settings.yml
    name: ReplicatorSettings
    nameWithType: ReplicatorSettings
    fullName: system.fabric.ReplicatorSettings
    type: Class
    syntax:
      content: public class ReplicatorSettings
  - uid: system.fabric._stateful_service_replica
    parent: system.fabric
    href: system.fabric._stateful_service_replica.yml
    name: StatefulServiceReplica
    nameWithType: StatefulServiceReplica
    fullName: system.fabric.StatefulServiceReplica
    type: Interface
    summary: "<p>スタートアップ、初期化、ロールの変更、およびシャット ダウンなど、レプリカのライフ サイクルを制御する動作を定義します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>ステートフル サービスの種類は、このインターフェイスを実装する必要があります。 ステートフルなサービスの種類のロジックには、プライマリ レプリカ上で呼び出される動作とセカンダリ レプリカで呼び出される動作が含まれています。 サービスの作成者が作成する場合は、指定された使用<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>、サービスを実装する必要がありますも、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref> の実装を使用する<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>はによって提供される<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref></p>"
    syntax:
      content: public interface StatefulServiceReplica
  - uid: system.fabric._state_replicator
    parent: system.fabric
    href: system.fabric._state_replicator.yml
    name: StateReplicator
    nameWithType: StateReplicator
    fullName: system.fabric.StateReplicator
    type: Interface
    summary: <p>公開のレプリケーション関連の機能、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>クラスによって使用されている<xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref>を高可用性を保証する状態をレプリケートします。 </p>
    syntax:
      content: public interface StateReplicator
  - uid: system.fabric._transactional_replicator_settings
    parent: system.fabric
    href: system.fabric._transactional_replicator_settings.yml
    name: TransactionalReplicatorSettings
    nameWithType: TransactionalReplicatorSettings
    fullName: system.fabric.TransactionalReplicatorSettings
    type: Class
    syntax:
      content: public class TransactionalReplicatorSettings
  - uid: system.fabric._ktl_logger_shared_log_settings
    parent: system.fabric
    href: system.fabric._ktl_logger_shared_log_settings.yml
    name: KtlLoggerSharedLogSettings
    nameWithType: KtlLoggerSharedLogSettings
    fullName: system.fabric.KtlLoggerSharedLogSettings
    type: Class
    syntax:
      content: public class KtlLoggerSharedLogSettings
  - uid: system.fabric.health._health_information
    parent: system.fabric.health
    href: system.fabric.health._health_information.yml
    name: HealthInformation
    nameWithType: HealthInformation
    fullName: system.fabric.health.HealthInformation
    type: Class
    summary: <p>エンティティのヘルス情報が含まれています。 この情報は、正常性レポートに含まれています。 正常性イベントの一部としても提供されます。 </p>
    syntax:
      content: public class HealthInformation