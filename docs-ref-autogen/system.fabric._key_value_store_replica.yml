### YamlMime:ManagedReference
items:
  - uid: system.fabric._key_value_store_replica
    id: _key_value_store_replica
    parent: system.fabric
    children:
      - system.fabric._key_value_store_replica.abort()
      - 'system.fabric._key_value_store_replica.add(TransactionBase,String,byte [])'
      - 'system.fabric._key_value_store_replica.backupAsync(String,StoreBackupOption,Function<StoreBackupInfo, CompletableFuture<Boolean>>)'
      - 'system.fabric._key_value_store_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
      - system.fabric._key_value_store_replica.closeAsync(CancellationToken)
      - 'system.fabric._key_value_store_replica.contains(TransactionBase,String)'
      - system.fabric._key_value_store_replica.createTransaction()
      - system.fabric._key_value_store_replica.createTransaction(KeyValueStoreTransactionSettings)
      - system.fabric._key_value_store_replica.enumerate(TransactionBase)
      - 'system.fabric._key_value_store_replica.enumerate(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.enumerate(TransactionBase,String,boolean)'
      - system.fabric._key_value_store_replica.enumerateMetadata(TransactionBase)
      - 'system.fabric._key_value_store_replica.enumerateMetadata(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.enumerateMetadata(TransactionBase,String,boolean)'
      - 'system.fabric._key_value_store_replica.get(TransactionBase,String)'
      - system.fabric._key_value_store_replica.getCurrentEpoch()
      - system.fabric._key_value_store_replica.getDataLossHandler()
      - 'system.fabric._key_value_store_replica.getMetadata(TransactionBase,String)'
      - system.fabric._key_value_store_replica.getReplicatorSettings()
      - system.fabric._key_value_store_replica.getStoreName()
      - 'system.fabric._key_value_store_replica.getValue(TransactionBase,String)'
      - system.fabric._key_value_store_replica.initialize(StatefulServiceInitializationParameters)
      - system.fabric._key_value_store_replica.KeyValueStoreReplica(String)
      - 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings)'
      - 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings)'
      - 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings,KeyValueStoreReplicaSettings)'
      - 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings,SecondaryNotificationMode)'
      - 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,ReplicatorSettings)'
      - system.fabric._key_value_store_replica.onAbort()
      - 'system.fabric._key_value_store_replica.onChangeRoleAsync(ReplicaRole,CancellationToken)'
      - system.fabric._key_value_store_replica.onCloseAsync(CancellationToken)
      - system.fabric._key_value_store_replica.onCopyComplete(KeyValueStoreEnumerator)
      - system.fabric._key_value_store_replica.onDataLossAsync(CancellationToken)
      - system.fabric._key_value_store_replica.onDatalossReported()
      - system.fabric._key_value_store_replica.onInitialize(StatefulServiceInitializationParameters)
      - 'system.fabric._key_value_store_replica.onOpenAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
      - system.fabric._key_value_store_replica.onReplicationOperation(Enumeration<KeyValueStoreNotification>)
      - 'system.fabric._key_value_store_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
      - 'system.fabric._key_value_store_replica.remove(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.remove(TransactionBase,String,long)'
      - system.fabric._key_value_store_replica.restoreAsync(String)
      - 'system.fabric._key_value_store_replica.restoreAsync(String,RestoreSettings)'
      - system.fabric._key_value_store_replica.serviceCloseAsync(CancellationToken)
      - system.fabric._key_value_store_replica.setReplicatorSettings(ReplicatorSettings)
      - 'system.fabric._key_value_store_replica.tryAdd(TransactionBase,String,byte [])'
      - 'system.fabric._key_value_store_replica.tryGet(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.tryGetMetadata(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.tryGetValue(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.tryRemove(TransactionBase,String)'
      - 'system.fabric._key_value_store_replica.tryRemove(TransactionBase,String,long)'
      - 'system.fabric._key_value_store_replica.tryUpdate(TransactionBase,String,byte [])'
      - 'system.fabric._key_value_store_replica.tryUpdate(TransactionBase,String,byte [],long)'
      - 'system.fabric._key_value_store_replica.update(TransactionBase,String,byte [])'
      - 'system.fabric._key_value_store_replica.update(TransactionBase,String,byte [],long)'
      - system.fabric._key_value_store_replica.updateReplicatorSettings(ReplicatorSettings)
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: KeyValueStoreReplica
    nameWithType: KeyValueStoreReplica
    fullName: system.fabric.KeyValueStoreReplica
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 23
    package: system.fabric
    summary: <p>」のサービスのライターに、レプリケートされたトランザクション関連のデータ記憶域を提供"任意の Service Fabric サービスに統合するための準備ができています。 </p>
    syntax: &ref_1
      content: public class KeyValueStoreReplica implements StatefulServiceReplica
    inheritance:
      - java.lang.Object
      - system.fabric._stateful_service_replica
  - uid: system.fabric._key_value_store_replica.abort()
    id: abort()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: abort()
    nameWithType: KeyValueStoreReplica.abort()
    fullName: void system.fabric.KeyValueStoreReplica.abort()
    overload: system.fabric._key_value_store_replica.abort*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1210
    package: system.fabric
    summary: <p>このインスタンスを中止、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>クラスです。 </p>
    syntax:
      content: public void abort()
    overridden: system.fabric._stateful_service_replica.abort()
  - uid: 'system.fabric._key_value_store_replica.add(TransactionBase,String,byte [])'
    id: 'add(TransactionBase,String,byte [])'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'add(TransactionBase transactionBase, String key, byte[] value)'
    nameWithType: 'KeyValueStoreReplica.add(TransactionBase transactionBase, String key, byte[] value)'
    fullName: 'void system.fabric.KeyValueStoreReplica.add(TransactionBase transactionBase, String key, byte[] value)'
    overload: system.fabric._key_value_store_replica.add*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 360
    package: system.fabric
    summary: |-
      <p>キー/値のストアを指定したキーによってインデックス設定される値を追加します。</p>
      <p></p>
    syntax:
      content: 'public void add(TransactionBase transactionBase, String key, byte[] value)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列) として追加する値のインデックス。 800 文字の長さに制限されます。 </p>
        - id: value
          type: ccd9418d
          description: <p>(バイト配列) として値を格納する 2 GB までの長さは制限されます。 </p>
  - uid: 'system.fabric._key_value_store_replica.backupAsync(String,StoreBackupOption,Function<StoreBackupInfo, CompletableFuture<Boolean>>)'
    id: 'backupAsync(String,StoreBackupOption,Function<StoreBackupInfo, CompletableFuture<Boolean>>)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'backupAsync(String backupDirectory, StoreBackupOption backupOption, Function<StoreBackupInfo, CompletableFuture<Boolean>> postBackupAsyncFunc)'
    nameWithType: 'KeyValueStoreReplica.backupAsync(String backupDirectory, StoreBackupOption backupOption, Function<StoreBackupInfo, CompletableFuture<Boolean>> postBackupAsyncFunc)'
    fullName: 'CompletableFuture<?> system.fabric.KeyValueStoreReplica.backupAsync(String backupDirectory, StoreBackupOption backupOption, Function<StoreBackupInfo, CompletableFuture<Boolean>> postBackupAsyncFunc)'
    overload: system.fabric._key_value_store_replica.backupAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 908
    package: system.fabric
    summary: "<p>非同期的にキー値ストアのバックアップを作成します。</p>\n<p>\r\n\r\n  <b>注釈:</b> 、 <b>postBackupAsyncFunc</b>バックアップ中にエラーがある場合は呼び出されません。 また、ときに呼び出されました<b>backupOption</b>は<xref uid=\"system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY\" data-throw-if-not-resolved=\"false\">StoreBackupOption #FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY</xref>ここでは完了する、ユーザーから必要な追加の操作が存在しないため、バックアップ サイクルが 1 つ。 </p>"
    syntax:
      content: 'public CompletableFuture<?> backupAsync(String backupDirectory, StoreBackupOption backupOption, Function<StoreBackupInfo, CompletableFuture<Boolean>> postBackupAsyncFunc)'
      parameters:
        - id: backupDirectory
          type: '26831127'
          description: '<p>バックアップが格納されるディレクトリです。 場合<b>backupOption</b>は<xref uid="system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY" data-throw-if-not-resolved="false">StoreBackupOption #FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY</xref>、このパラメーターは null である必要があります。 それ以外の場合、このパラメーターが null にすることはできませんを空または空白のみが含まれています。 UNC パスも指定することがあります。 ディレクトリが存在しない場合は作成されます。 増分バックアップが失敗したかどうかは、存在し、空でない<xref uid="system.fabric.exception._fabric_backup_directory_not_empty_exception" data-throw-if-not-resolved="false">system.fabric.exception.FabricBackupDirectoryNotEmptyException</xref>です。 </p>'
        - id: backupOption
          type: system.fabric._store_backup_option
          description: <p>バックアップのオプションです。 </p>
        - id: postBackupAsyncFunc
          type: 432ffe41system.fabric._store_backup_info774bd4f0
          description: <p>投稿では、Windows Fabric を使用するシステムに制御を返す前に、バックアップ後のアクティビティを完了するユーザーによって呼び出される非同期のメソッドをバックアップします。 場合<b>null</b>が渡されたこれは、増分バックアップは許可されません。 バックアップ後のメソッドが false を返す場合は、増分バックアップは許可されません。 </p>
      return:
        type: 16409f84
        description: <p>非同期のバックアップ操作を表すタスク。 </p>
    exceptions:
      - type: 3c87bd19
        description: '<p>バックアップ ディレクトリには<b>null</b> backupOption がないとき<xref uid="system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY" data-throw-if-not-resolved="false">StoreBackupOption #FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY</xref>です。 </p>'
      - type: 3c87bd19
        description: '<p>空か backupOption がない場合にだけである空白文字が含まれています、backupDirectory <xref uid="system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY" data-throw-if-not-resolved="false">StoreBackupOption #FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY</xref>か backupDirectory ではありません<b>null</b>ときbackupOption は<xref uid="system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY" data-throw-if-not-resolved="false">StoreBackupOption #FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY</xref>です。 </p>'
      - type: system.fabric.exception._fabric_backup_directory_not_empty_exception
        description: '<p>BackupOption が場合<xref uid="system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL" data-throw-if-not-resolved="false">StoreBackupOption #FABRIC_STORE_BACKUP_OPTION_INCREMENTAL</xref>バックアップ ディレクトリには既にファイルまたはサブディレクトリが含まれています。 </p>'
      - type: system.fabric.exception._fabric_backup_in_progress_exception
        description: <p>ときに、以前に開始されたバックアップが現在進行中です。 </p>
  - uid: 'system.fabric._key_value_store_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    id: 'changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.KeyValueStoreReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    overload: system.fabric._key_value_store_replica.changeRoleAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1128
    package: system.fabric
    summary: "<p>レプリカとそのレプリケーターのレプリカのロールを変更します。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的に呼び出すのアプリケーション レプリカがから派生している場合は、このメソッドは必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 ここでは、アプリケーションのレプリカをオーバーライドする必要があります<xref uid=\"system.fabric._key_value_store_replica.onChangeRoleAsync(ReplicaRole,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onChangeRoleAsync (system.fabric.ReplicaRole、system.fabric.CancellationToken)</xref>代わりにします。 </p>"
    syntax:
      content: 'public CompletableFuture<String> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>ターゲット レプリカのロール。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 06be942d
        description: <p>このレプリカのアドレスを結果タスク。 </p>
    overridden: 'system.fabric._stateful_service_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
  - uid: system.fabric._key_value_store_replica.closeAsync(CancellationToken)
    id: closeAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.closeAsync(CancellationToken cancellationToken)
    overload: system.fabric._key_value_store_replica.closeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1180
    package: system.fabric
    summary: "<p>レプリカおよびレプリカ セットからオフラインになっているに備えて、レプリケーターを閉じます。 現在は使用しません。 将来使用するために予約されています。</p>\n<p>\r\n\r\n  <b>注釈:</b>レプリカが必ずしもから削除されていない永続的に、レプリカ セットと、後で再度開くことができます。 レプリカを閉じるための一般的な原因は、アップグレードまたは負荷分散の準備として正常にシャット ダウンします。 このメソッドは明示的に呼び出す場合は、アプリケーションのレプリカがから派生する必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 ここでは、アプリケーションのレプリカをオーバーライドする必要があります<xref uid=\"system.fabric._key_value_store_replica.onCloseAsync(CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onCloseAsync(system.fabric.CancellationToken)</xref>代わりにします。 </p>"
    syntax:
      content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: db03ee24
        description: <p>非同期操作を表すタスク。 </p>
    overridden: system.fabric._stateful_service_replica.closeAsync(CancellationToken)
  - uid: 'system.fabric._key_value_store_replica.contains(TransactionBase,String)'
    id: 'contains(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'contains(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.contains(TransactionBase transactionBase, String key)'
    fullName: 'boolean system.fabric.KeyValueStoreReplica.contains(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.contains*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 702
    package: system.fabric
    summary: |-
      <p>キー/値のストアに値が含まれているかどうかを示すフラグを決定します。</p>
      <p></p>
    syntax:
      content: 'public boolean contains(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列として) を検索する値のインデックス。 800 文字の長さに制限されます。 </p>
      return:
        type: 4fc6e284
        description: <p>キー/値のストア; に値が含まれている場合は true。false の場合、それ以外の場合。 </p>
  - uid: system.fabric._key_value_store_replica.createTransaction()
    id: createTransaction()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: createTransaction()
    nameWithType: KeyValueStoreReplica.createTransaction()
    fullName: Transaction system.fabric.KeyValueStoreReplica.createTransaction()
    overload: system.fabric._key_value_store_replica.createTransaction*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 317
    package: system.fabric
    summary: |-
      <p>一意な作成<xref uid="system.fabric._transaction" data-throw-if-not-resolved="false">system.fabric.Transaction</xref>ストア操作をコミットに使用されるインスタンス、またはキー/値のグループをロールバックします。</p>
      <p></p>
    syntax:
      content: public Transaction createTransaction()
      return:
        type: system.fabric._transaction
        description: <p>A <xref uid="system.fabric._transaction" data-throw-if-not-resolved="false">system.fabric.Transaction</xref>トランザクションを表すオブジェクト。 </p>
  - uid: system.fabric._key_value_store_replica.createTransaction(KeyValueStoreTransactionSettings)
    id: createTransaction(KeyValueStoreTransactionSettings)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: createTransaction(KeyValueStoreTransactionSettings settings)
    nameWithType: KeyValueStoreReplica.createTransaction(KeyValueStoreTransactionSettings settings)
    fullName: Transaction system.fabric.KeyValueStoreReplica.createTransaction(KeyValueStoreTransactionSettings settings)
    overload: system.fabric._key_value_store_replica.createTransaction*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 337
    package: system.fabric
    summary: |-
      <p>一意な作成<xref uid="system.fabric._transaction" data-throw-if-not-resolved="false">system.fabric.Transaction</xref>ストア操作をコミットに使用されるインスタンス、またはキー/値のグループをロールバックします。</p>
      <p></p>
    syntax:
      content: public Transaction createTransaction(KeyValueStoreTransactionSettings settings)
      parameters:
        - id: settings
          type: system.fabric._key_value_store_transaction_settings
          description: <p>トランザクションの設定。 </p>
      return:
        type: system.fabric._transaction
        description: <p>A <xref uid="system.fabric._transaction" data-throw-if-not-resolved="false">system.fabric.Transaction</xref>トランザクションを表すオブジェクト。 </p>
  - uid: system.fabric._key_value_store_replica.enumerate(TransactionBase)
    id: enumerate(TransactionBase)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: enumerate(TransactionBase transactionBase)
    nameWithType: KeyValueStoreReplica.enumerate(TransactionBase transactionBase)
    fullName: Enumeration<KeyValueStoreItem> system.fabric.KeyValueStoreReplica.enumerate(TransactionBase transactionBase)
    overload: system.fabric._key_value_store_replica.enumerate*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 721
    package: system.fabric
    summary: |-
      <p>反復処理する列挙子を返します、 <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>キー/値のストア内の値。</p>
      <p></p>
    syntax:
      content: public Enumeration<KeyValueStoreItem> enumerate(TransactionBase transactionBase)
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
      return:
        type: 29771a6asystem.fabric._key_value_store_itema08ddfce
        description: <p>A <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>列挙子。 </p>
  - uid: 'system.fabric._key_value_store_replica.enumerate(TransactionBase,String)'
    id: 'enumerate(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'enumerate(TransactionBase transactionBase, String keyPrefix)'
    nameWithType: 'KeyValueStoreReplica.enumerate(TransactionBase transactionBase, String keyPrefix)'
    fullName: 'Enumeration<KeyValueStoreItem> system.fabric.KeyValueStoreReplica.enumerate(TransactionBase transactionBase, String keyPrefix)'
    overload: system.fabric._key_value_store_replica.enumerate*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 743
    package: system.fabric
    summary: |-
      <p>反復処理する列挙子を返します、 <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>値のキーが指定されたキーのプレフィックスに一致するキー/値の値が格納されます。</p>
      <p></p>
    syntax:
      content: 'public Enumeration<KeyValueStoreItem> enumerate(TransactionBase transactionBase, String keyPrefix)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: keyPrefix
          type: '26831127'
          description: <p>(文字列) と一致するように、キーまたはインデックスをプレフィックスします。 800 文字の長さに制限されます。 </p>
      return:
        type: 29771a6asystem.fabric._key_value_store_itema08ddfce
        description: <p>A <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>列挙子。 </p>
  - uid: 'system.fabric._key_value_store_replica.enumerate(TransactionBase,String,boolean)'
    id: 'enumerate(TransactionBase,String,boolean)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'enumerate(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
    nameWithType: 'KeyValueStoreReplica.enumerate(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
    fullName: 'Enumeration<KeyValueStoreItem> system.fabric.KeyValueStoreReplica.enumerate(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
    overload: system.fabric._key_value_store_replica.enumerate*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 769
    package: system.fabric
    summary: |-
      <p>反復処理する列挙子を返します、 <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>キー/値のストア内の値。</p>
      <p></p>
    syntax:
      content: 'public Enumeration<KeyValueStoreItem> enumerate(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: keyPrefix
          type: '26831127'
          description: <p>(文字列) と一致するように、キーまたはインデックスをプレフィックスします。 800 文字の長さに制限されます。 </p>
        - id: strictPrefix
          type: 4fc6e284
          description: <p>True の場合、"keyPrefix"に指定された値を付けたキーのみが返されます。 それ以外の場合、列挙型は一致する、または辞書"keyPrefix"より大きい最初のキーから開始し、それ以上の行があるまで続きます。 既定値は true です。 </p>
      return:
        type: 29771a6asystem.fabric._key_value_store_itema08ddfce
        description: <p>A <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>列挙子。 </p>
  - uid: system.fabric._key_value_store_replica.enumerateMetadata(TransactionBase)
    id: enumerateMetadata(TransactionBase)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: enumerateMetadata(TransactionBase transactionBase)
    nameWithType: KeyValueStoreReplica.enumerateMetadata(TransactionBase transactionBase)
    fullName: Enumeration<KeyValueStoreItemMetadata> system.fabric.KeyValueStoreReplica.enumerateMetadata(TransactionBase transactionBase)
    overload: system.fabric._key_value_store_replica.enumerateMetadata*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 795
    package: system.fabric
    summary: |-
      <p>反復処理する列挙子を返します、 <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>キー/値のストア内の値。</p>
      <p></p>
    syntax:
      content: public Enumeration<KeyValueStoreItemMetadata> enumerateMetadata(TransactionBase transactionBase)
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
      return:
        type: 29771a6asystem.fabric._key_value_store_item_metadataa08ddfce
        description: <p>A <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>列挙子。 </p>
  - uid: 'system.fabric._key_value_store_replica.enumerateMetadata(TransactionBase,String)'
    id: 'enumerateMetadata(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'enumerateMetadata(TransactionBase transactionBase, String keyPrefix)'
    nameWithType: 'KeyValueStoreReplica.enumerateMetadata(TransactionBase transactionBase, String keyPrefix)'
    fullName: 'Enumeration<KeyValueStoreItemMetadata> system.fabric.KeyValueStoreReplica.enumerateMetadata(TransactionBase transactionBase, String keyPrefix)'
    overload: system.fabric._key_value_store_replica.enumerateMetadata*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 818
    package: system.fabric
    summary: |-
      <p>反復処理する列挙子を返します、 <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>値のキーが指定されたキーのプレフィックスに一致するキー/値の値が格納されます。</p>
      <p></p>
    syntax:
      content: 'public Enumeration<KeyValueStoreItemMetadata> enumerateMetadata(TransactionBase transactionBase, String keyPrefix)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: keyPrefix
          type: '26831127'
          description: <p>(文字列) と一致するように、キーまたはインデックスをプレフィックスします。 800 文字の長さに制限されます。 </p>
      return:
        type: 29771a6asystem.fabric._key_value_store_item_metadataa08ddfce
        description: <p>A <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>列挙子。 </p>
  - uid: 'system.fabric._key_value_store_replica.enumerateMetadata(TransactionBase,String,boolean)'
    id: 'enumerateMetadata(TransactionBase,String,boolean)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'enumerateMetadata(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
    nameWithType: 'KeyValueStoreReplica.enumerateMetadata(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
    fullName: 'Enumeration<KeyValueStoreItemMetadata> system.fabric.KeyValueStoreReplica.enumerateMetadata(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
    overload: system.fabric._key_value_store_replica.enumerateMetadata*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 848
    package: system.fabric
    summary: |-
      <p>反復処理する列挙子を返します、 <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>キー/値のストア内の値。</p>
      <p></p>
    syntax:
      content: 'public Enumeration<KeyValueStoreItemMetadata> enumerateMetadata(TransactionBase transactionBase, String keyPrefix, boolean strictPrefix)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: keyPrefix
          type: '26831127'
          description: <p>(文字列) と一致するように、キーまたはインデックスをプレフィックスします。 800 文字の長さに制限されます。 </p>
        - id: strictPrefix
          type: 4fc6e284
          description: <p>True の場合、"keyPrefix"に指定された値を付けたキーのみが返されます。 それ以外の場合、列挙型は一致する、または辞書"keyPrefix"より大きい最初のキーから開始し、それ以上の行があるまで続きます。 既定値は true です。 </p>
      return:
        type: 29771a6asystem.fabric._key_value_store_item_metadataa08ddfce
        description: <p>A <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>列挙子。 </p>
  - uid: 'system.fabric._key_value_store_replica.get(TransactionBase,String)'
    id: 'get(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'get(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.get(TransactionBase transactionBase, String key)'
    fullName: 'KeyValueStoreItem system.fabric.KeyValueStoreReplica.get(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.get*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 573
    package: system.fabric
    summary: |-
      <p>として格納されている値を取得、 <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>指定されたキーに関連付けられているオブジェクト。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreItem get(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列) として取得する値のインデックス。 800 文字の長さに制限されます。 </p>
      return:
        type: system.fabric._key_value_store_item
        description: <p>A <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>格納されている値を表すオブジェクト。 </p>
  - uid: system.fabric._key_value_store_replica.getCurrentEpoch()
    id: getCurrentEpoch()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: getCurrentEpoch()
    nameWithType: KeyValueStoreReplica.getCurrentEpoch()
    fullName: Epoch system.fabric.KeyValueStoreReplica.getCurrentEpoch()
    overload: system.fabric._key_value_store_replica.getCurrentEpoch*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 281
    package: system.fabric
    summary: |-
      <p>キー/値のストアの現在のエポックを取得します。</p>
      <p></p>
    syntax:
      content: public Epoch getCurrentEpoch()
      return:
        type: system.fabric._epoch
        description: <p>キー/値のストアの現在のエポックです。 </p>
  - uid: system.fabric._key_value_store_replica.getDataLossHandler()
    id: getDataLossHandler()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: getDataLossHandler()
    nameWithType: KeyValueStoreReplica.getDataLossHandler()
    fullName: Observable system.fabric.KeyValueStoreReplica.getDataLossHandler()
    overload: system.fabric._key_value_store_replica.getDataLossHandler*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 271
    package: system.fabric
    syntax:
      content: public Observable getDataLossHandler()
      return:
        type: system.fabric._observable
  - uid: 'system.fabric._key_value_store_replica.getMetadata(TransactionBase,String)'
    id: 'getMetadata(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'getMetadata(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.getMetadata(TransactionBase transactionBase, String key)'
    fullName: 'KeyValueStoreItemMetadata system.fabric.KeyValueStoreReplica.getMetadata(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.getMetadata*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 660
    package: system.fabric
    summary: |-
      <p>として、メタデータを取得、 <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>オブジェクト、指定されたキーに関連付けられている値。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreItemMetadata getMetadata(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列) として取得する値のインデックス。 800 文字の長さに制限されます。 </p>
      return:
        type: system.fabric._key_value_store_item_metadata
        description: <p>A <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>指定した値に関連付けられているメタデータを表すオブジェクト。 </p>
  - uid: system.fabric._key_value_store_replica.getReplicatorSettings()
    id: getReplicatorSettings()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: getReplicatorSettings()
    nameWithType: KeyValueStoreReplica.getReplicatorSettings()
    fullName: ReplicatorSettings system.fabric.KeyValueStoreReplica.getReplicatorSettings()
    overload: system.fabric._key_value_store_replica.getReplicatorSettings*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1502
    package: system.fabric
    summary: |-
      <p>キー/値のストア レプリケーターのオプションの設定を取得します。</p>
      <p></p>
    syntax:
      content: public ReplicatorSettings getReplicatorSettings()
      return:
        type: system.fabric._replicator_settings
        description: <p>ストアのレプリケーター オプションの設定。 </p>
  - uid: system.fabric._key_value_store_replica.getStoreName()
    id: getStoreName()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: getStoreName()
    nameWithType: KeyValueStoreReplica.getStoreName()
    fullName: String system.fabric.KeyValueStoreReplica.getStoreName()
    overload: system.fabric._key_value_store_replica.getStoreName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1453
    package: system.fabric
    summary: "<p>キー/値のストアの名前を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>店舗名が有効なファイル名の文字に従う必要があります。 </p>"
    syntax:
      content: public String getStoreName()
      return:
        type: '26831127'
        description: <p>キー/値のストアの名前。 </p>
  - uid: 'system.fabric._key_value_store_replica.getValue(TransactionBase,String)'
    id: 'getValue(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'getValue(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.getValue(TransactionBase transactionBase, String key)'
    fullName: 'byte [] system.fabric.KeyValueStoreReplica.getValue(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.getValue*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 615
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられているバイト配列として格納されている値を取得します。</p>
      <p></p>
    syntax:
      content: 'public byte [] getValue(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列) として取得する値のインデックス。 800 文字の長さに制限されます。 </p>
      return:
        type: ccd9418d
        description: <p>格納されている値を表すバイト配列。 </p>
  - uid: system.fabric._key_value_store_replica.initialize(StatefulServiceInitializationParameters)
    id: initialize(StatefulServiceInitializationParameters)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: KeyValueStoreReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.KeyValueStoreReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    overload: system.fabric._key_value_store_replica.initialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1004
    package: system.fabric
    summary: "<p>開くのための準備でレプリカを初期化します。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的に呼び出すのアプリケーション レプリカがから派生している場合は、このメソッドは必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 ここでは、アプリケーションのレプリカをオーバーライドする必要があります<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onInitialize(system.fabric.StatefulServiceInitializationParameters)</xref>代わりにします。 </p>"
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p>レプリカの初期化情報。 </p>
    overridden: system.fabric._stateful_service_replica.initialize(StatefulServiceInitializationParameters)
  - uid: system.fabric._key_value_store_replica.KeyValueStoreReplica(String)
    id: KeyValueStoreReplica(String)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: KeyValueStoreReplica(String storeName)
    nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String storeName)
    fullName: system.fabric.KeyValueStoreReplica.KeyValueStoreReplica(String storeName)
    overload: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 164
    package: system.fabric
    summary: "<p>新しいインスタンスを初期化、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>指定したキー/値のクラス名を格納します。</p>\n<p>\r\n\r\n  <b>注釈:</b>店舗名が有効なファイル名の文字に従う必要があります。 </p>"
    syntax:
      content: public KeyValueStoreReplica(String storeName)
      parameters:
        - id: storeName
          type: '26831127'
          description: <p>キー/値のストアの名前。 </p>
  - uid: 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings)'
    id: 'KeyValueStoreReplica(String,LocalStoreSettings)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings)'
    nameWithType: 'KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings)'
    fullName: 'system.fabric.KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings)'
    overload: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 177
    package: system.fabric
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>指定したキー/値のクラス名とローカル ストアの設定を格納します。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings)'
      parameters:
        - id: storeName
          type: '26831127'
          description: <p>キー/値のストアの名前。 </p>
        - id: localStoreSettings
          type: system.fabric._local_store_settings
          description: <p>ローカル ストア用のオプションの設定。 </p>
  - uid: 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings)'
    id: 'KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings)'
    nameWithType: 'KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings)'
    fullName: 'system.fabric.KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings)'
    overload: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 208
    package: system.fabric
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>指定したキー/値のクラス名、ローカル ストアの設定、および複製物作成会社設定を格納します。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings)'
      parameters:
        - id: storeName
          type: '26831127'
          description: <p>キー/値のストアの名前。 </p>
        - id: localStoreSettings
          type: system.fabric._local_store_settings
          description: <p>ローカル ストア用のオプションの設定。 </p>
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>キー/値のオプションの設定は、レプリケーターを格納します。 </p>
  - uid: 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings,KeyValueStoreReplicaSettings)'
    id: 'KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings,KeyValueStoreReplicaSettings)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplicaSettings kvsSettings)'
    nameWithType: 'KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplicaSettings kvsSettings)'
    fullName: 'system.fabric.KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplicaSettings kvsSettings)'
    overload: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 254
    package: system.fabric
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="system.fabric._key_value_store_replica" data-throw-if-not-resolved="false">KeyValueStoreReplica</xref>指定したキー/値のクラス名、ローカル ストアの設定で複製物作成会社設定、およびレプリカの設定を格納します。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplicaSettings kvsSettings)'
      parameters:
        - id: storeName
          type: '26831127'
          description: <p>キー/値のストアの名前。 </p>
        - id: localStoreSettings
          type: system.fabric._local_store_settings
          description: <p>ローカル ストア用のオプションの設定。 </p>
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>キー/値の省略可能な設定には、レプリケーターが格納されます。 </p>
        - id: kvsSettings
          type: system.fabric._key_value_store_replica_settings
          description: <p>キー/値の省略可能な設定には、レプリカが格納されます。 </p>
  - uid: 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings,SecondaryNotificationMode)'
    id: 'KeyValueStoreReplica(String,LocalStoreSettings,ReplicatorSettings,SecondaryNotificationMode)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, SecondaryNotificationMode notificationMode)'
    nameWithType: 'KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, SecondaryNotificationMode notificationMode)'
    fullName: 'system.fabric.KeyValueStoreReplica.KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, SecondaryNotificationMode notificationMode)'
    overload: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 233
    package: system.fabric
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>指定したキー/値のクラス名、ローカル ストアの設定、および複製物作成会社設定を格納します。 セカンダリ レプリカの通知は通知モードを使用して有効にします。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreReplica(String storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, SecondaryNotificationMode notificationMode)'
      parameters:
        - id: storeName
          type: '26831127'
          description: <p>キー/値のストアの名前。 </p>
        - id: localStoreSettings
          type: system.fabric._local_store_settings
          description: <p>ローカル ストア用のオプションの設定。 </p>
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>キー/値のオプションの設定は、レプリケーターを格納します。 </p>
        - id: notificationMode
          type: system.fabric._secondary_notification_mode
          description: '<p>セカンダリ通知モードを有効にする<xref uid="system.fabric._key_value_store_replica.onCopyComplete(KeyValueStoreEnumerator)" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onCopyComplete(system.fabric.KeyValueStoreEnumerator)</xref>と<xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onReplicationOperation(java.util.Enumeration)</xref>このレプリカでのコールバック。 </p>'
  - uid: 'system.fabric._key_value_store_replica.KeyValueStoreReplica(String,ReplicatorSettings)'
    id: 'KeyValueStoreReplica(String,ReplicatorSettings)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'KeyValueStoreReplica(String storeName, ReplicatorSettings replicatorSettings)'
    nameWithType: 'KeyValueStoreReplica.KeyValueStoreReplica(String storeName, ReplicatorSettings replicatorSettings)'
    fullName: 'system.fabric.KeyValueStoreReplica.KeyValueStoreReplica(String storeName, ReplicatorSettings replicatorSettings)'
    overload: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 193
    package: system.fabric
    summary: "<p>新しいインスタンスを初期化、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>指定したキー/値のストアの名前を持つクラスし、複製物作成会社の設定を保存します。</p>\n<p>\r\n\r\n  <b>注釈:</b>店舗名が有効なファイル名の文字に従う必要があります。 </p>"
    syntax:
      content: 'public KeyValueStoreReplica(String storeName, ReplicatorSettings replicatorSettings)'
      parameters:
        - id: storeName
          type: '26831127'
          description: <p>キー/値のストアの名前。 </p>
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>キー/値のオプションの設定は、レプリケーターを格納します。 </p>
  - uid: system.fabric._key_value_store_replica.onAbort()
    id: onAbort()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onAbort()
    nameWithType: KeyValueStoreReplica.onAbort()
    fullName: void system.fabric.KeyValueStoreReplica.onAbort()
    overload: system.fabric._key_value_store_replica.onAbort*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1291
    package: system.fabric
    summary: <p>このインスタンスをシャット ダウンに呼び出されます。 </p>
    syntax:
      content: protected void onAbort()
  - uid: 'system.fabric._key_value_store_replica.onChangeRoleAsync(ReplicaRole,CancellationToken)'
    id: 'onChangeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.KeyValueStoreReplica.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    overload: system.fabric._key_value_store_replica.onChangeRoleAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1360
    package: system.fabric
    summary: "<p>このレプリカのロールが変更されることを示します。</p>\n<p>\r\n\r\n  <b>注釈:</b>から派生している場合、アプリケーションのレプリカはこのメソッドをオーバーライドする必要があります<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 アプリケーションのレプリカは、このレプリカのアドレスを結果のタスクを返す必要があります。 同様に、取得できる、システムでこのレプリカのアドレスが格納されている (変更されていない) ResolveServiceAsync を使用します。 アプリケーションは、未処理の変更の役割のすべての呼び出しの完了の背後にあるレプリカ セットの再構成がブロックされるため、適切なタイミングでロールの変更を終了する注意する必要があります。 </p>"
    syntax: &ref_3
      content: 'protected CompletableFuture<String> onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>ターゲットのロール。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 06be942d
        description: <p>このレプリカの解決可能なアドレスを結果タスク. </p>
  - uid: system.fabric._key_value_store_replica.onCloseAsync(CancellationToken)
    id: onCloseAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onCloseAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.onCloseAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.onCloseAsync(CancellationToken cancellationToken)
    overload: system.fabric._key_value_store_replica.onCloseAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1310
    package: system.fabric
    summary: |-
      <p>このサービス レプリカがシャット ダウンを閉じる必要があるときに呼び出されます。</p>
      <p></p>
    syntax: &ref_4
      content: protected CompletableFuture<Void> onCloseAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: db03ee24
        description: <p>非同期操作です。 </p>
  - uid: system.fabric._key_value_store_replica.onCopyComplete(KeyValueStoreEnumerator)
    id: onCopyComplete(KeyValueStoreEnumerator)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onCopyComplete(KeyValueStoreEnumerator enumerator)
    nameWithType: KeyValueStoreReplica.onCopyComplete(KeyValueStoreEnumerator enumerator)
    fullName: void system.fabric.KeyValueStoreReplica.onCopyComplete(KeyValueStoreEnumerator enumerator)
    overload: system.fabric._key_value_store_replica.onCopyComplete*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1261
    package: system.fabric
    summary: "<p>プライマリからのビルドが完了したら、レプリケーション操作の適用を開始する準備が整いましたときに、セカンダリ レプリカで、システムによって呼び出されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>、 <xref uid=\"system.fabric._key_value_store_enumerator\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreEnumerator</xref>オブジェクトは、レプリケーション操作が適用される前にこのメソッドのコンテキスト内で、セカンダリ上のデータの読み取りに使用できます。 <xref uid=\"system.fabric._key_value_store_enumerator\" data-throw-if-not-resolved=\"false\">System.fabric.KeyValueStoreEnumerator</xref>オブジェクトが正しく不要になった後、このメソッドを返し、このメソッドのコンテキストの外部で使用することはできません。 アプリケーションは、レプリケーション操作が、セカンダリ レプリカでキューに登録されているが、このメソッドが戻るまでに適用されるを取得するには開始されませんので、適切なタイミングでこのコールバックを完了する注意する必要があります。 <xref uid=\"system.fabric._key_value_store_enumerator\" data-throw-if-not-resolved=\"false\">System.fabric.KeyValueStoreEnumerator</xref>オブジェクトは 1 つの基になるローカル トランザクションによってバックアップされ、スレッド セーフではありません。 </p>"
    syntax: &ref_2
      content: protected void onCopyComplete(KeyValueStoreEnumerator enumerator)
      parameters:
        - id: enumerator
          type: system.fabric._key_value_store_enumerator
          description: <p>セカンダリ上のデータの読み取りに使用される列挙子。 </p>
  - uid: system.fabric._key_value_store_replica.onDataLossAsync(CancellationToken)
    id: onDataLossAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onDataLossAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.onDataLossAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Boolean> system.fabric.KeyValueStoreReplica.onDataLossAsync(CancellationToken cancellationToken)
    overload: system.fabric._key_value_store_replica.onDataLossAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1229
    package: system.fabric
    summary: |-
      <p>レプリカ セットのことを通知で、データの損失が発生した可能性があります。 アプリケーション イベントを非同期的に処理またはを使用するには、このメソッドをオーバーライドするか、 <xref uid="system.fabric._key_value_store_replica.onDatalossReported()" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onDatalossReported()</xref>同期的に処理するイベントです。 両方は、同じイベントを表します。</p>
      <p></p>
    syntax: &ref_6
      content: protected CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 7e53ac82
        description: "<p>\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">CompletableFuture</xref>復旧中にそのデータを示すために将来が変更され、レプリカ セットの再同期する必要があります。 データが変更されていないことを示すためにそれ以外の場合、false になります。 </p>"
  - uid: system.fabric._key_value_store_replica.onDatalossReported()
    id: onDatalossReported()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onDatalossReported()
    nameWithType: KeyValueStoreReplica.onDatalossReported()
    fullName: void system.fabric.KeyValueStoreReplica.onDatalossReported()
    overload: system.fabric._key_value_store_replica.onDatalossReported*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1239
    package: system.fabric
    summary: '<p>レプリカ セットのことを通知で、データの損失が発生した可能性があります。 アプリケーションのこのイベントをリッスンまたはオーバーライドできます<xref uid="system.fabric._key_value_store_replica.onDataLossAsync(CancellationToken)" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onDataLossAsync(CancellationToken)</xref>です。 両方は、同じイベントを表します。 </p>'
    syntax: &ref_5
      content: protected void onDatalossReported()
  - uid: system.fabric._key_value_store_replica.onInitialize(StatefulServiceInitializationParameters)
    id: onInitialize(StatefulServiceInitializationParameters)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onInitialize(StatefulServiceInitializationParameters parameters)
    nameWithType: KeyValueStoreReplica.onInitialize(StatefulServiceInitializationParameters parameters)
    fullName: void system.fabric.KeyValueStoreReplica.onInitialize(StatefulServiceInitializationParameters parameters)
    overload: system.fabric._key_value_store_replica.onInitialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1295
    package: system.fabric
    syntax:
      content: protected void onInitialize(StatefulServiceInitializationParameters parameters)
      parameters:
        - id: parameters
          type: system.fabric._stateful_service_initialization_parameters
  - uid: 'system.fabric._key_value_store_replica.onOpenAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    id: 'onOpenAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'onOpenAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.onOpenAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Void> system.fabric.KeyValueStoreReplica.onOpenAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    overload: system.fabric._key_value_store_replica.onOpenAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1331
    package: system.fabric
    summary: |-
      <p>開くには追加のアクションを実行できるように、初期化されたサービス レプリカに対して呼び出されます。</p>
      <p></p>
    syntax:
      content: 'protected CompletableFuture<Void> onOpenAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p>A <xref uid="system.fabric._replica_open_mode" data-throw-if-not-resolved="false">system.fabric.ReplicaOpenMode</xref>このレプリカに対して新しいまたは回復であるかどうかを指定するオブジェクト。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p>A <xref uid="system.fabric._stateful_service_partition" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition</xref>このレプリカのステートフルなサービス パーティション情報を表すオブジェクト。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: db03ee24
        description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>非同期操作を表すオブジェクト。 </p>
  - uid: system.fabric._key_value_store_replica.onReplicationOperation(Enumeration<KeyValueStoreNotification>)
    id: onReplicationOperation(Enumeration<KeyValueStoreNotification>)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: onReplicationOperation(Enumeration<KeyValueStoreNotification> enumerator)
    nameWithType: KeyValueStoreReplica.onReplicationOperation(Enumeration<KeyValueStoreNotification> enumerator)
    fullName: void system.fabric.KeyValueStoreReplica.onReplicationOperation(Enumeration<KeyValueStoreNotification> enumerator)
    overload: system.fabric._key_value_store_replica.onReplicationOperation*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1288
    package: system.fabric
    summary: "<p>入力方向のレプリケーション操作のセカンダリ レプリカで、システムによって呼び出されます。 各<xref uid=\"system.fabric._key_value_store_notification\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreNotification</xref>オブジェクトには、1 つの分割不可能なレプリケーション操作のすべてのデータが含まれています。</p>\n<p>\r\n\r\n  <b>注釈:</b> BlockSecondaryAck モードを指定したかどうか、入力方向のレプリケーション操作は、セカンダリ レプリカ上でローカルに適用されず、メソッドが戻るまで、プライマリを確認します。 これは、アプリケーションがレプリケーション ストリームをブロックしないようにして、適切なタイミングでこのメソッドから返される注意する必要があることを意味します。 想定できないため、このメソッドが戻るまで、受信確認がプライマリに送信されないこと、計測されたレプリケーション操作は既に (または、後であることが保証) によって適用レプリカ セットのレプリカのクォーラムです。 NonBlockingQuorumAcked モードが指定されている場合、レプリカ セットのレプリカのクォーラムを適用済みに計測されたレプリケーション操作が保証されます。 さらに、計測されたレプリケーション操作可能性がありますが既にこのセカンダリでローカルに適用され、システムによって、メソッドが呼び出される時点で、プライマリに受信確認します。 メソッドのコールバックではこのモードでは、レプリケーション ストリームはブロックされませんが、レプリケーション操作の通知ストリームもブロックされます。 つまり、のみあります未処理 OnReplicationOperation メソッド コールバックは 1 つ特定の時点。 </p>"
    syntax:
      content: protected void onReplicationOperation(Enumeration<KeyValueStoreNotification> enumerator)
      parameters:
        - id: enumerator
          type: 29771a6asystem.fabric._key_value_store_notificationa08ddfce
          description: <p>このレプリケーション操作のデータの読み取りに使用される列挙子。 </p>
  - uid: 'system.fabric._key_value_store_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    id: 'openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.KeyValueStoreReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    overload: system.fabric._key_value_store_replica.openAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1069
    package: system.fabric
    summary: "<p>オンライン レプリカ セット内の前に、レプリカとそのレプリケーターを開きます。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的に呼び出すのアプリケーション レプリカがから派生している場合は、このメソッドは必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 この場合、アプリケーションのレプリカでは、OnOpenAsync を代わりにオーバーライドする必要があります。 </p>"
    syntax:
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p>このレプリカを開始するコンテキストが開くように指定します。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p>このレプリカが属しているセットのレプリカを説明する情報が含まれています。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: <p>Open の完了を示すために CompletableFuture <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref>です。 </p>
    overridden: 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
  - uid: 'system.fabric._key_value_store_replica.remove(TransactionBase,String)'
    id: 'remove(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'remove(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.remove(TransactionBase transactionBase, String key)'
    fullName: 'void system.fabric.KeyValueStoreReplica.remove(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.remove*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 404
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を削除します。</p>
      <p></p>
    syntax:
      content: 'public void remove(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
  - uid: 'system.fabric._key_value_store_replica.remove(TransactionBase,String,long)'
    id: 'remove(TransactionBase,String,long)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'remove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
    nameWithType: 'KeyValueStoreReplica.remove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
    fullName: 'void system.fabric.KeyValueStoreReplica.remove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
    overload: system.fabric._key_value_store_replica.remove*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 434
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を削除しようとしています。</p>
      <p></p>
    syntax:
      content: 'public void remove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
        - id: checkSequenceNumber
          type: 0364520f
          description: <p>削除するキーの現在のシーケンス番号。 </p>
  - uid: system.fabric._key_value_store_replica.restoreAsync(String)
    id: restoreAsync(String)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: restoreAsync(String backupDirectory)
    nameWithType: KeyValueStoreReplica.restoreAsync(String backupDirectory)
    fullName: CompletableFuture<?> system.fabric.KeyValueStoreReplica.restoreAsync(String backupDirectory)
    overload: system.fabric._key_value_store_replica.restoreAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 962
    package: system.fabric
    summary: "<p>キー値ストア レプリカを非同期的に復元します。</p>\n<p>\r\n\r\n  <b>注釈:</b>ストアをバックアップ ディレクトリ内のファイルから復元すると、更新されたデータが失われるので、復元は進行中に、キー値ストアへの任意の書き込み操作を実行しないようにお勧めします。 </p>"
    syntax:
      content: public CompletableFuture<?> restoreAsync(String backupDirectory)
      parameters:
        - id: backupDirectory
          type: '26831127'
          description: <p>レプリカがから復元するディレクトリ。 このパラメーターを null にすることはできませんを空または空白のみが含まれています。 UNC パスも指定することがあります。 </p>
      return:
        type: 16409f84
        description: <p>非同期の復元操作を表すタスク。 </p>
    exceptions:
      - type: 3c87bd19
        description: <p>バックアップ ディレクトリには<b>null</b>です。 </p>
      - type: 3c87bd19
        description: <p>バックアップ ディレクトリが空か、単なる空白文字が含まれています。 </p>
  - uid: 'system.fabric._key_value_store_replica.restoreAsync(String,RestoreSettings)'
    id: 'restoreAsync(String,RestoreSettings)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'restoreAsync(String backupDirectory, RestoreSettings settings)'
    nameWithType: 'KeyValueStoreReplica.restoreAsync(String backupDirectory, RestoreSettings settings)'
    fullName: 'CompletableFuture<?> system.fabric.KeyValueStoreReplica.restoreAsync(String backupDirectory, RestoreSettings settings)'
    overload: system.fabric._key_value_store_replica.restoreAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 967
    package: system.fabric
    syntax:
      content: 'public CompletableFuture<?> restoreAsync(String backupDirectory, RestoreSettings settings)'
      parameters:
        - id: backupDirectory
          type: '26831127'
        - id: settings
          type: system.fabric._restore_settings
      return:
        type: 16409f84
  - uid: system.fabric._key_value_store_replica.serviceCloseAsync(CancellationToken)
    id: serviceCloseAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: serviceCloseAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.serviceCloseAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.serviceCloseAsync(CancellationToken cancellationToken)
    overload: system.fabric._key_value_store_replica.serviceCloseAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1297
    package: system.fabric
    syntax:
      content: protected CompletableFuture<Void> serviceCloseAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: db03ee24
  - uid: system.fabric._key_value_store_replica.setReplicatorSettings(ReplicatorSettings)
    id: setReplicatorSettings(ReplicatorSettings)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: setReplicatorSettings(ReplicatorSettings replicatorSettings)
    nameWithType: KeyValueStoreReplica.setReplicatorSettings(ReplicatorSettings replicatorSettings)
    fullName: void system.fabric.KeyValueStoreReplica.setReplicatorSettings(ReplicatorSettings replicatorSettings)
    overload: system.fabric._key_value_store_replica.setReplicatorSettings*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 1512
    package: system.fabric
    summary: |-
      <p>キー/値のストア レプリケーターのオプションの設定を設定します。</p>
      <p></p>
    syntax:
      content: public void setReplicatorSettings(ReplicatorSettings replicatorSettings)
      parameters:
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>ストアのレプリケーター オプションの設定。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryAdd(TransactionBase,String,byte [])'
    id: 'tryAdd(TransactionBase,String,byte [])'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryAdd(TransactionBase transactionBase, String key, byte[] value)'
    nameWithType: 'KeyValueStoreReplica.tryAdd(TransactionBase transactionBase, String key, byte[] value)'
    fullName: 'boolean system.fabric.KeyValueStoreReplica.tryAdd(TransactionBase transactionBase, String key, byte[] value)'
    overload: system.fabric._key_value_store_replica.tryAdd*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 384
    package: system.fabric
    summary: |-
      <p>キーと値を指定したキーによってインデックス設定される値を追加する操作を格納します。</p>
      <p></p>
    syntax:
      content: 'public boolean tryAdd(TransactionBase transactionBase, String key, byte[] value)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
        - id: value
          type: ccd9418d
          description: <p>(バイト配列) として値を格納する 2 GB までの長さは制限されます。 </p>
      return:
        type: 4fc6e284
        description: <p>指定したキーが見つかり、追加されていない場合は true。 指定したキーが既に存在する場合は false です。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryGet(TransactionBase,String)'
    id: 'tryGet(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryGet(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.tryGet(TransactionBase transactionBase, String key)'
    fullName: 'KeyValueStoreItem system.fabric.KeyValueStoreReplica.tryGet(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.tryGet*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 595
    package: system.fabric
    summary: |-
      <p>として格納されている値を取得しようとしています、 <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>指定されたキーに関連付けられているオブジェクト。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreItem tryGet(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
      return:
        type: system.fabric._key_value_store_item
        description: <p>A <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>格納されている値を表すオブジェクト、または指定したキーが存在しない場合は null です。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryGetMetadata(TransactionBase,String)'
    id: 'tryGetMetadata(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryGetMetadata(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.tryGetMetadata(TransactionBase transactionBase, String key)'
    fullName: 'KeyValueStoreItemMetadata system.fabric.KeyValueStoreReplica.tryGetMetadata(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.tryGetMetadata*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 682
    package: system.fabric
    summary: |-
      <p>としてのメタデータの取得を試みます、 <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>オブジェクト、指定されたキーに関連付けられている値。</p>
      <p></p>
    syntax:
      content: 'public KeyValueStoreItemMetadata tryGetMetadata(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
      return:
        type: system.fabric._key_value_store_item_metadata
        description: <p>A <xref uid="system.fabric._key_value_store_item_metadata" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItemMetadata</xref>オブジェクトのメタデータを表す、指定された値に関連付けられているか、指定したキーが存在しない場合は null です。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryGetValue(TransactionBase,String)'
    id: 'tryGetValue(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryGetValue(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.tryGetValue(TransactionBase transactionBase, String key)'
    fullName: 'byte [] system.fabric.KeyValueStoreReplica.tryGetValue(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.tryGetValue*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 636
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられているバイト配列として格納されている値を取得しようとします。</p>
      <p></p>
    syntax:
      content: 'public byte [] tryGetValue(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
      return:
        type: ccd9418d
        description: <p>指定したキーが存在しない場合に、格納されている値または null を表すバイト配列。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryRemove(TransactionBase,String)'
    id: 'tryRemove(TransactionBase,String)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryRemove(TransactionBase transactionBase, String key)'
    nameWithType: 'KeyValueStoreReplica.tryRemove(TransactionBase transactionBase, String key)'
    fullName: 'boolean system.fabric.KeyValueStoreReplica.tryRemove(TransactionBase transactionBase, String key)'
    overload: system.fabric._key_value_store_replica.tryRemove*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 419
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を削除しようとしています。</p>
      <p></p>
    syntax:
      content: 'public boolean tryRemove(TransactionBase transactionBase, String key)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
      return:
        type: 4fc6e284
        description: <p>指定したキーが見つかり削除された場合は true。 指定したキーが存在しない場合は false。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryRemove(TransactionBase,String,long)'
    id: 'tryRemove(TransactionBase,String,long)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryRemove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
    nameWithType: 'KeyValueStoreReplica.tryRemove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
    fullName: 'boolean system.fabric.KeyValueStoreReplica.tryRemove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
    overload: system.fabric._key_value_store_replica.tryRemove*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 457
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を削除しようとしています。</p>
      <p></p>
    syntax:
      content: 'public boolean tryRemove(TransactionBase transactionBase, String key, long checkSequenceNumber)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
        - id: checkSequenceNumber
          type: 0364520f
          description: <p>削除するキーの現在のシーケンス番号。 </p>
      return:
        type: 4fc6e284
        description: <p>指定したキーが見つかり削除された場合は true。 指定したキーが存在しない場合は false。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryUpdate(TransactionBase,String,byte [])'
    id: 'tryUpdate(TransactionBase,String,byte [])'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryUpdate(TransactionBase transactionBase, String key, byte[] value)'
    nameWithType: 'KeyValueStoreReplica.tryUpdate(TransactionBase transactionBase, String key, byte[] value)'
    fullName: 'boolean system.fabric.KeyValueStoreReplica.tryUpdate(TransactionBase transactionBase, String key, byte[] value)'
    overload: system.fabric._key_value_store_replica.tryUpdate*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 526
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を更新しようとしています。</p>
      <p></p>
    syntax:
      content: 'public boolean tryUpdate(TransactionBase transactionBase, String key, byte[] value)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
        - id: value
          type: ccd9418d
          description: <p>(バイト配列) として値を格納する 2 GB までの長さは制限されます。 </p>
      return:
        type: 4fc6e284
        description: <p>指定したキーが見つかり、更新された場合のブール値 True。 指定したキーが存在しない場合は false。 </p>
  - uid: 'system.fabric._key_value_store_replica.tryUpdate(TransactionBase,String,byte [],long)'
    id: 'tryUpdate(TransactionBase,String,byte [],long)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'tryUpdate(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
    nameWithType: 'KeyValueStoreReplica.tryUpdate(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
    fullName: 'boolean system.fabric.KeyValueStoreReplica.tryUpdate(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
    overload: system.fabric._key_value_store_replica.tryUpdate*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 545
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を更新しようとしています。</p>
      <p></p>
    syntax:
      content: 'public boolean tryUpdate(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたはインデックス、(文字列) として削除する値。 800 文字の長さに制限されます。 </p>
        - id: value
          type: ccd9418d
          description: <p>(バイト配列) として値を格納する 2 GB までの長さは制限されます。 </p>
        - id: checkSequenceNumber
          type: 0364520f
          description: <p>削除するキーの現在のシーケンス番号。 </p>
      return:
        type: 4fc6e284
        description: <p>指定したキーが見つかり、更新された場合は true。 指定したキーが存在しない場合は false。 </p>
  - uid: 'system.fabric._key_value_store_replica.update(TransactionBase,String,byte [])'
    id: 'update(TransactionBase,String,byte [])'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'update(TransactionBase transactionBase, String key, byte[] value)'
    nameWithType: 'KeyValueStoreReplica.update(TransactionBase transactionBase, String key, byte[] value)'
    fullName: 'void system.fabric.KeyValueStoreReplica.update(TransactionBase transactionBase, String key, byte[] value)'
    overload: system.fabric._key_value_store_replica.update*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 479
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を更新します。</p>
      <p></p>
    syntax:
      content: 'public void update(TransactionBase transactionBase, String key, byte[] value)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列) として更新する値のインデックス。 800 文字の長さに制限されます。 </p>
        - id: value
          type: ccd9418d
          description: <p>(バイト配列) として値を格納する 2 GB までの長さは制限されます。 </p>
  - uid: 'system.fabric._key_value_store_replica.update(TransactionBase,String,byte [],long)'
    id: 'update(TransactionBase,String,byte [],long)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: 'update(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
    nameWithType: 'KeyValueStoreReplica.update(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
    fullName: 'void system.fabric.KeyValueStoreReplica.update(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
    overload: system.fabric._key_value_store_replica.update*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 496
    package: system.fabric
    summary: |-
      <p>指定したキーに関連付けられている格納されている値を更新します。</p>
      <p></p>
    syntax:
      content: 'public void update(TransactionBase transactionBase, String key, byte[] value, long checkSequenceNumber)'
      parameters:
        - id: transactionBase
          type: system.fabric._transaction_base
          description: <p>トランザクションのインスタンス。 </p>
        - id: key
          type: '26831127'
          description: <p>キーまたは (文字列) として更新する値のインデックス。 800 文字の長さに制限されます。 </p>
        - id: value
          type: ccd9418d
          description: <p>(バイト配列) として値を格納する 2 GB までの長さは制限されます。 </p>
        - id: checkSequenceNumber
          type: 0364520f
          description: <p>long 型の値 </p>
  - uid: system.fabric._key_value_store_replica.updateReplicatorSettings(ReplicatorSettings)
    id: updateReplicatorSettings(ReplicatorSettings)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    langs:
      - java
    name: updateReplicatorSettings(ReplicatorSettings replicatorSettings)
    nameWithType: KeyValueStoreReplica.updateReplicatorSettings(ReplicatorSettings replicatorSettings)
    fullName: void system.fabric.KeyValueStoreReplica.updateReplicatorSettings(ReplicatorSettings replicatorSettings)
    overload: system.fabric._key_value_store_replica.updateReplicatorSettings*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/KeyValueStoreReplica.java
      startLine: 298
    package: system.fabric
    summary: |-
      <p>指定した設定でキーと値のストアのレプリケーターを更新<xref uid="system.fabric._replicator_settings" data-throw-if-not-resolved="false">system.fabric.ReplicatorSettings</xref>オブジェクト。</p>
      <p></p>
    syntax:
      content: public void updateReplicatorSettings(ReplicatorSettings replicatorSettings)
      parameters:
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>使用して、キー/値の更新設定には、レプリケーターが格納されます。 </p>
references:
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: system.fabric._key_value_store_replica.KeyValueStoreReplica*
    name: KeyValueStoreReplica
    nameWithType: KeyValueStoreReplica.KeyValueStoreReplica
    fullName: system.fabric.KeyValueStoreReplica.KeyValueStoreReplica
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.getDataLossHandler*
    name: getDataLossHandler
    nameWithType: KeyValueStoreReplica.getDataLossHandler
    fullName: Observable system.fabric.KeyValueStoreReplica.getDataLossHandler
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.getCurrentEpoch*
    name: getCurrentEpoch
    nameWithType: KeyValueStoreReplica.getCurrentEpoch
    fullName: Epoch system.fabric.KeyValueStoreReplica.getCurrentEpoch
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.updateReplicatorSettings*
    name: updateReplicatorSettings
    nameWithType: KeyValueStoreReplica.updateReplicatorSettings
    fullName: void system.fabric.KeyValueStoreReplica.updateReplicatorSettings
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.createTransaction*
    name: createTransaction
    nameWithType: KeyValueStoreReplica.createTransaction
    fullName: Transaction system.fabric.KeyValueStoreReplica.createTransaction
    package: system.fabric
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: system.fabric._key_value_store_replica.add*
    name: add
    nameWithType: KeyValueStoreReplica.add
    fullName: void system.fabric.KeyValueStoreReplica.add
    package: system.fabric
  - uid: 4fc6e284
    spec.java:
      - name: boolean
        fullName: boolean
  - uid: system.fabric._key_value_store_replica.tryAdd*
    name: tryAdd
    nameWithType: KeyValueStoreReplica.tryAdd
    fullName: boolean system.fabric.KeyValueStoreReplica.tryAdd
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.remove*
    name: remove
    nameWithType: KeyValueStoreReplica.remove
    fullName: void system.fabric.KeyValueStoreReplica.remove
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.tryRemove*
    name: tryRemove
    nameWithType: KeyValueStoreReplica.tryRemove
    fullName: boolean system.fabric.KeyValueStoreReplica.tryRemove
    package: system.fabric
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: system.fabric._key_value_store_replica.update*
    name: update
    nameWithType: KeyValueStoreReplica.update
    fullName: void system.fabric.KeyValueStoreReplica.update
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.tryUpdate*
    name: tryUpdate
    nameWithType: KeyValueStoreReplica.tryUpdate
    fullName: boolean system.fabric.KeyValueStoreReplica.tryUpdate
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.get*
    name: get
    nameWithType: KeyValueStoreReplica.get
    fullName: KeyValueStoreItem system.fabric.KeyValueStoreReplica.get
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.tryGet*
    name: tryGet
    nameWithType: KeyValueStoreReplica.tryGet
    fullName: KeyValueStoreItem system.fabric.KeyValueStoreReplica.tryGet
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.getValue*
    name: getValue
    nameWithType: KeyValueStoreReplica.getValue
    fullName: 'byte [] system.fabric.KeyValueStoreReplica.getValue'
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.tryGetValue*
    name: tryGetValue
    nameWithType: KeyValueStoreReplica.tryGetValue
    fullName: 'byte [] system.fabric.KeyValueStoreReplica.tryGetValue'
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.getMetadata*
    name: getMetadata
    nameWithType: KeyValueStoreReplica.getMetadata
    fullName: KeyValueStoreItemMetadata system.fabric.KeyValueStoreReplica.getMetadata
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.tryGetMetadata*
    name: tryGetMetadata
    nameWithType: KeyValueStoreReplica.tryGetMetadata
    fullName: KeyValueStoreItemMetadata system.fabric.KeyValueStoreReplica.tryGetMetadata
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.contains*
    name: contains
    nameWithType: KeyValueStoreReplica.contains
    fullName: boolean system.fabric.KeyValueStoreReplica.contains
    package: system.fabric
  - uid: 29771a6asystem.fabric._key_value_store_itema08ddfce
    spec.java:
      - name: Enumeration<
        fullName: Enumeration<
      - uid: system.fabric._key_value_store_item
        name: KeyValueStoreItem
        fullName: system.fabric.KeyValueStoreItem
        href: system.fabric._key_value_store_item.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._key_value_store_replica.enumerate*
    name: enumerate
    nameWithType: KeyValueStoreReplica.enumerate
    fullName: Enumeration<KeyValueStoreItem> system.fabric.KeyValueStoreReplica.enumerate
    package: system.fabric
  - uid: 29771a6asystem.fabric._key_value_store_item_metadataa08ddfce
    spec.java:
      - name: Enumeration<
        fullName: Enumeration<
      - uid: system.fabric._key_value_store_item_metadata
        name: KeyValueStoreItemMetadata
        fullName: system.fabric.KeyValueStoreItemMetadata
        href: system.fabric._key_value_store_item_metadata.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._key_value_store_replica.enumerateMetadata*
    name: enumerateMetadata
    nameWithType: KeyValueStoreReplica.enumerateMetadata
    fullName: Enumeration<KeyValueStoreItemMetadata> system.fabric.KeyValueStoreReplica.enumerateMetadata
    package: system.fabric
  - uid: 3c87bd19
    spec.java:
      - name: IllegalArgumentException
        fullName: IllegalArgumentException
  - uid: 432ffe41system.fabric._store_backup_info774bd4f0
    spec.java:
      - name: Function<
        fullName: Function<
      - uid: system.fabric._store_backup_info
        name: StoreBackupInfo
        fullName: system.fabric.StoreBackupInfo
        href: system.fabric._store_backup_info.yml
      - name: ', CompletableFuture<Boolean>>'
        fullName: ', CompletableFuture<Boolean>>'
  - uid: 16409f84
    spec.java:
      - name: CompletableFuture<?>
        fullName: CompletableFuture<?>
  - uid: system.fabric._key_value_store_replica.backupAsync*
    name: backupAsync
    nameWithType: KeyValueStoreReplica.backupAsync
    fullName: CompletableFuture<?> system.fabric.KeyValueStoreReplica.backupAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.restoreAsync*
    name: restoreAsync
    nameWithType: KeyValueStoreReplica.restoreAsync
    fullName: CompletableFuture<?> system.fabric.KeyValueStoreReplica.restoreAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.initialize*
    name: initialize
    nameWithType: KeyValueStoreReplica.initialize
    fullName: void system.fabric.KeyValueStoreReplica.initialize
    package: system.fabric
  - uid: 9cdf14d0system.fabric._replicatora08ddfce
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: system.fabric._replicator
        name: Replicator
        fullName: system.fabric.Replicator
        href: system.fabric._replicator.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._key_value_store_replica.openAsync*
    name: openAsync
    nameWithType: KeyValueStoreReplica.openAsync
    fullName: CompletableFuture<Replicator> system.fabric.KeyValueStoreReplica.openAsync
    package: system.fabric
  - uid: 06be942d
    spec.java:
      - name: CompletableFuture<String>
        fullName: CompletableFuture<String>
  - uid: system.fabric._key_value_store_replica.changeRoleAsync*
    name: changeRoleAsync
    nameWithType: KeyValueStoreReplica.changeRoleAsync
    fullName: CompletableFuture<String> system.fabric.KeyValueStoreReplica.changeRoleAsync
    package: system.fabric
  - uid: db03ee24
    spec.java:
      - name: CompletableFuture<Void>
        fullName: CompletableFuture<Void>
  - uid: system.fabric._key_value_store_replica.closeAsync*
    name: closeAsync
    nameWithType: KeyValueStoreReplica.closeAsync
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.closeAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.abort*
    name: abort
    nameWithType: KeyValueStoreReplica.abort
    fullName: void system.fabric.KeyValueStoreReplica.abort
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.getStoreName*
    name: getStoreName
    nameWithType: KeyValueStoreReplica.getStoreName
    fullName: String system.fabric.KeyValueStoreReplica.getStoreName
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.getReplicatorSettings*
    name: getReplicatorSettings
    nameWithType: KeyValueStoreReplica.getReplicatorSettings
    fullName: ReplicatorSettings system.fabric.KeyValueStoreReplica.getReplicatorSettings
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.setReplicatorSettings*
    name: setReplicatorSettings
    nameWithType: KeyValueStoreReplica.setReplicatorSettings
    fullName: void system.fabric.KeyValueStoreReplica.setReplicatorSettings
    package: system.fabric
  - uid: 7e53ac82
    spec.java:
      - name: CompletableFuture<Boolean>
        fullName: CompletableFuture<Boolean>
  - uid: system.fabric._key_value_store_replica.onDataLossAsync*
    name: onDataLossAsync
    nameWithType: KeyValueStoreReplica.onDataLossAsync
    fullName: CompletableFuture<Boolean> system.fabric.KeyValueStoreReplica.onDataLossAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onDatalossReported*
    name: onDatalossReported
    nameWithType: KeyValueStoreReplica.onDatalossReported
    fullName: void system.fabric.KeyValueStoreReplica.onDatalossReported
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onCopyComplete*
    name: onCopyComplete
    nameWithType: KeyValueStoreReplica.onCopyComplete
    fullName: void system.fabric.KeyValueStoreReplica.onCopyComplete
    package: system.fabric
  - uid: 29771a6asystem.fabric._key_value_store_notificationa08ddfce
    spec.java:
      - name: Enumeration<
        fullName: Enumeration<
      - uid: system.fabric._key_value_store_notification
        name: KeyValueStoreNotification
        fullName: system.fabric.KeyValueStoreNotification
        href: system.fabric._key_value_store_notification.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._key_value_store_replica.onReplicationOperation*
    name: onReplicationOperation
    nameWithType: KeyValueStoreReplica.onReplicationOperation
    fullName: void system.fabric.KeyValueStoreReplica.onReplicationOperation
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onAbort*
    name: onAbort
    nameWithType: KeyValueStoreReplica.onAbort
    fullName: void system.fabric.KeyValueStoreReplica.onAbort
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onInitialize*
    name: onInitialize
    nameWithType: KeyValueStoreReplica.onInitialize
    fullName: void system.fabric.KeyValueStoreReplica.onInitialize
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.serviceCloseAsync*
    name: serviceCloseAsync
    nameWithType: KeyValueStoreReplica.serviceCloseAsync
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.serviceCloseAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onCloseAsync*
    name: onCloseAsync
    nameWithType: KeyValueStoreReplica.onCloseAsync
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.onCloseAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onOpenAsync*
    name: onOpenAsync
    nameWithType: KeyValueStoreReplica.onOpenAsync
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.onOpenAsync
    package: system.fabric
  - uid: system.fabric._key_value_store_replica.onChangeRoleAsync*
    name: onChangeRoleAsync
    nameWithType: KeyValueStoreReplica.onChangeRoleAsync
    fullName: CompletableFuture<String> system.fabric.KeyValueStoreReplica.onChangeRoleAsync
    package: system.fabric
  - uid: system.fabric._stateful_service_replica
    parent: system.fabric
    href: system.fabric._stateful_service_replica.yml
    name: StatefulServiceReplica
    nameWithType: StatefulServiceReplica
    fullName: system.fabric.StatefulServiceReplica
    type: Interface
    summary: "<p>スタートアップ、初期化、ロールの変更、およびシャット ダウンなど、レプリカのライフ サイクルを制御する動作を定義します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>ステートフル サービスの種類は、このインターフェイスを実装する必要があります。 ステートフルなサービスの種類のロジックには、プライマリ レプリカ上で呼び出される動作とセカンダリ レプリカで呼び出される動作が含まれています。 サービスの作成者が作成する場合は、指定された使用<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>、サービスを実装する必要がありますも、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref> の実装を使用する<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>はによって提供される<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref></p>"
    syntax:
      content: public interface StatefulServiceReplica
  - uid: system.fabric._replica_role
    parent: system.fabric
    href: system.fabric._replica_role.yml
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: system.fabric.ReplicaRole
    type: Enum
    summary: <p>レプリカのロールを定義します。 </p>
    syntax:
      content: public enum ReplicaRole
  - uid: system.fabric._replicator_settings
    parent: system.fabric
    href: system.fabric._replicator_settings.yml
    name: ReplicatorSettings
    nameWithType: ReplicatorSettings
    fullName: system.fabric.ReplicatorSettings
    type: Class
    syntax:
      content: public class ReplicatorSettings
  - uid: system.fabric._local_store_settings
    parent: system.fabric
    href: system.fabric._local_store_settings.yml
    name: LocalStoreSettings
    nameWithType: LocalStoreSettings
    fullName: system.fabric.LocalStoreSettings
    type: Class
    summary: <p>ローカル ストアのオプションの設定を表します。 </p>
    syntax:
      content: public class LocalStoreSettings
  - uid: system.fabric._key_value_store_replica_settings
    parent: system.fabric
    href: system.fabric._key_value_store_replica_settings.yml
    name: KeyValueStoreReplicaSettings
    nameWithType: KeyValueStoreReplicaSettings
    fullName: system.fabric.KeyValueStoreReplicaSettings
    type: Class
    summary: <p>キー/値のストア レプリカの設定を表します。 </p>
    syntax:
      content: public class KeyValueStoreReplicaSettings
  - uid: system.fabric._stateful_service_initialization_parameters
    parent: system.fabric
    href: system.fabric._stateful_service_initialization_parameters.yml
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: system.fabric.StatefulServiceInitializationParameters
    type: Class
    summary: <p>ステートフルなサービスのサービスの初期化パラメーターを定義します。 </p>
    syntax:
      content: public class StatefulServiceInitializationParameters
  - uid: system.fabric._observable
    parent: system.fabric
    href: system.fabric._observable.yml
    name: Observable<T>
    nameWithType: Observable<T>
    fullName: system.fabric.Observable<T>
    type: Class
    syntax:
      content: public class Observable<T>
      typeParameters:
        - type: 8ce1ecb9
  - uid: system.fabric._key_value_store_replica
    parent: system.fabric
    href: system.fabric._key_value_store_replica.yml
    name: KeyValueStoreReplica
    nameWithType: KeyValueStoreReplica
    fullName: system.fabric.KeyValueStoreReplica
    type: Class
    summary: <p>」のサービスのライターに、レプリケートされたトランザクション関連のデータ記憶域を提供"任意の Service Fabric サービスに統合するための準備ができています。 </p>
    syntax: *ref_1
  - uid: system.fabric.interop._native_async_callback
    parent: system.fabric.interop
    href: system.fabric.interop._native_async_callback.yml
    name: NativeAsyncCallback
    nameWithType: NativeAsyncCallback
    fullName: system.fabric.interop.NativeAsyncCallback
    type: Interface
    syntax:
      content: public interface NativeAsyncCallback
  - uid: system.fabric._epoch
    parent: system.fabric
    href: system.fabric._epoch.yml
    name: Epoch
    nameWithType: Epoch
    fullName: system.fabric.Epoch
    type: Class
    summary: "<p>Service Fabric でパーティションの現在のバージョンを表します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>パーティション全体の構成番号です。 レプリカの構成は、たとえば、プライマリ レプリカが変更されたときに、変更を設定すると、新しいプライマリ レプリカからレプリケートされた操作と呼ばれます新しい<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>、古いプライマリによって送信された 1 つからレプリカです。 プライマリが変更されたというは、通常、元のプライマリ レプリカの影響を受ける失敗によって影響を受けませんセカンダリ レプリカに直接表示されません。 プライマリ レプリカが変更されたことを追跡するために、セカンダリ レプリカに伝達するがします。 使用してこのような通信が発生した、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#updateEpochAsync (system.fabric.Epoch、system.fabric.SequenceNumber、system.fabric.CancellationToken)</xref>メソッドです。 ほとんどのサービスがの内部フィールドの詳細を無視することができます、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>ことを知っておく通常で十分ですので、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>が変更されたと操作の相対順序を判別するエポックを比較してシステム内のイベント。 比較操作は、この目的で提供されます。 </p>"
    syntax:
      content: public class Epoch
  - uid: system.fabric._key_value_store_item
    parent: system.fabric
    href: system.fabric._key_value_store_item.yml
    name: KeyValueStoreItem
    nameWithType: KeyValueStoreItem
    fullName: system.fabric.KeyValueStoreItem
    type: Class
    summary: <p>キー/値のストア内の項目を表します。 </p>
    syntax:
      content: public class KeyValueStoreItem
  - uid: system.fabric._key_value_store_item_metadata
    parent: system.fabric
    href: system.fabric._key_value_store_item_metadata.yml
    name: KeyValueStoreItemMetadata
    nameWithType: KeyValueStoreItemMetadata
    fullName: system.fabric.KeyValueStoreItemMetadata
    type: Class
    summary: <p>関連付けられているメタデータを表す、 <xref uid="system.fabric._key_value_store_item" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreItem</xref>キー/値のストア内のオブジェクト。 </p>
    syntax:
      content: public class KeyValueStoreItemMetadata
  - uid: system.fabric._secondary_notification_mode
    parent: system.fabric
    href: system.fabric._secondary_notification_mode.yml
    name: SecondaryNotificationMode
    nameWithType: SecondaryNotificationMode
    fullName: system.fabric.SecondaryNotificationMode
    type: Enum
    summary: '<p>セカンダリの通知を指定します、 <xref uid="system.fabric._key_value_store_replica" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>の目的の動作について説明しますと<xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onReplicationOperation (java.util.Enumeration)</xref>有効になっている場合。 </p>'
    syntax:
      content: public enum SecondaryNotificationMode
  - uid: system.fabric._key_value_store_replica.onCopyComplete(KeyValueStoreEnumerator)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: onCopyComplete(KeyValueStoreEnumerator enumerator)
    nameWithType: KeyValueStoreReplica.onCopyComplete(KeyValueStoreEnumerator enumerator)
    fullName: void system.fabric.KeyValueStoreReplica.onCopyComplete(KeyValueStoreEnumerator enumerator)
    type: Method
    summary: "<p>プライマリからのビルドが完了したら、レプリケーション操作の適用を開始する準備が整いましたときに、セカンダリ レプリカで、システムによって呼び出されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>、 <xref uid=\"system.fabric._key_value_store_enumerator\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreEnumerator</xref>オブジェクトは、レプリケーション操作が適用される前にこのメソッドのコンテキスト内で、セカンダリ上のデータの読み取りに使用できます。 <xref uid=\"system.fabric._key_value_store_enumerator\" data-throw-if-not-resolved=\"false\">System.fabric.KeyValueStoreEnumerator</xref>オブジェクトが正しく不要になった後、このメソッドを返し、このメソッドのコンテキストの外部で使用することはできません。 アプリケーションは、レプリケーション操作が、セカンダリ レプリカでキューに登録されているが、このメソッドが戻るまでに適用されるを取得するには開始されませんので、適切なタイミングでこのコールバックを完了する注意する必要があります。 <xref uid=\"system.fabric._key_value_store_enumerator\" data-throw-if-not-resolved=\"false\">System.fabric.KeyValueStoreEnumerator</xref>オブジェクトは 1 つの基になるローカル トランザクションによってバックアップされ、スレッド セーフではありません。 </p>"
    syntax: *ref_2
  - uid: system.fabric._transaction
    parent: system.fabric
    href: system.fabric._transaction.yml
    name: Transaction
    nameWithType: Transaction
    fullName: system.fabric.Transaction
    type: Class
    syntax:
      content: public class Transaction
  - uid: system.fabric._key_value_store_transaction_settings
    parent: system.fabric
    href: system.fabric._key_value_store_transaction_settings.yml
    name: KeyValueStoreTransactionSettings
    nameWithType: KeyValueStoreTransactionSettings
    fullName: system.fabric.KeyValueStoreTransactionSettings
    type: Class
    summary: <p>サポートされているトランザクションの動作を記述する省略可能な設定を指定<xref uid="system.fabric._key_value_store_replica" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>です。 </p>
    syntax:
      content: public class KeyValueStoreTransactionSettings
  - uid: system.fabric._transaction_base
    parent: system.fabric
    href: system.fabric._transaction_base.yml
    name: TransactionBase
    nameWithType: TransactionBase
    fullName: system.fabric.TransactionBase
    type: Class
    syntax:
      content: public class TransactionBase
  - uid: system.fabric._store_backup_option
    parent: system.fabric
    href: system.fabric._store_backup_option.yml
    name: StoreBackupOption
    nameWithType: StoreBackupOption
    fullName: system.fabric.StoreBackupOption
    type: Enum
    summary: <p>キー値ストアのバックアップ オプション。 </p>
    syntax:
      content: public enum StoreBackupOption
  - uid: system.fabric._store_backup_info
    parent: system.fabric
    href: system.fabric._store_backup_info.yml
    name: StoreBackupInfo
    nameWithType: StoreBackupInfo
    fullName: system.fabric.StoreBackupInfo
    type: Class
    summary: <p>キー値ストアで作成したバックアップについての情報を提供します。 </p>
    syntax:
      content: public class StoreBackupInfo
  - uid: system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY
    parent: system.fabric._store_backup_option
    href: system.fabric._store_backup_option.yml
    name: FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY
    nameWithType: StoreBackupOption.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY
    fullName: system.fabric.StoreBackupOption.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY
    type: Field
    summary: "<p>すべてのバックアップ ファイルを作成しなくても、キー値ストアのトランザクション ログの切り捨てを行うためのオプションです。 </p>\n<p>\r\n\r\n  <b>注釈:</b>増分バックアップを有効にすると、セカンダリ レプリカでバックアップ ファイルの作成を回避する場合に便利です。 増分バックアップが有効な場合は、ディスク領域がいっぱいのキー値ストアのトランザクション ログでします。 これを防ぐためには、頻繁にバックアップを作成する必要はします。 ただし、セカンダリ レプリカでバックアップを作成できない可能性がありますキー値ストア サービスによっては便利です。 これらのサービスでは、バックアップ ディレクトリを破棄することに対処しなければなりませんもします。 このオプションを使用すると場合、クリーンアップは、トランザクション ログ バックアップ ファイルを作成します。 </p>"
    syntax:
      content: public FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY=(3)
  - uid: system.fabric.exception._fabric_backup_directory_not_empty_exception
    parent: system.fabric.exception
    href: system.fabric.exception._fabric_backup_directory_not_empty_exception.yml
    name: FabricBackupDirectoryNotEmptyException
    nameWithType: FabricBackupDirectoryNotEmptyException
    fullName: system.fabric.exception.FabricBackupDirectoryNotEmptyException
    type: Class
    summary: <p>ユーザー指定のバックアップ ディレクトリが空でない場合にスローされる例外。 </p>
    syntax:
      content: public class FabricBackupDirectoryNotEmptyException extends FabricException
  - uid: system.fabric._store_backup_option.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL
    parent: system.fabric._store_backup_option
    href: system.fabric._store_backup_option.yml
    name: FABRIC_STORE_BACKUP_OPTION_INCREMENTAL
    nameWithType: StoreBackupOption.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL
    fullName: system.fabric.StoreBackupOption.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL
    type: Field
    summary: <p>キー値ストアの増分バックアップです。 つまり、ログ ファイルのみ、最後のフルまたは増分バックアップがバックアップされるため、作成します。 </p>
    syntax:
      content: public FABRIC_STORE_BACKUP_OPTION_INCREMENTAL=(2)
  - uid: system.fabric.exception._fabric_backup_in_progress_exception
    parent: system.fabric.exception
    href: system.fabric.exception._fabric_backup_in_progress_exception.yml
    name: FabricBackupInProgressException
    nameWithType: FabricBackupInProgressException
    fullName: system.fabric.exception.FabricBackupInProgressException
    type: Class
    summary: <p>以前のバックアップが進行中のバックアップを作成する試行が行われたときにスローされる例外。 </p>
    syntax:
      content: public class FabricBackupInProgressException extends FabricException
  - uid: system.fabric._restore_settings
    parent: system.fabric
    href: system.fabric._restore_settings.yml
    name: RestoreSettings
    nameWithType: RestoreSettings
    fullName: system.fabric.RestoreSettings
    type: Class
    syntax:
      content: public class RestoreSettings
  - uid: system.fabric._stateful_service_replica.initialize(StatefulServiceInitializationParameters)
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: StatefulServiceReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.StatefulServiceReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    type: Method
    summary: |-
      <p>新しく作成されたサービスのレプリカを初期化します。</p>
      <p></p>
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p><xref uid="system.fabric._stateful_service_initialization_parameters" data-throw-if-not-resolved="false">System.fabric.StatefulServiceInitializationParameters</xref>このレプリカにします。 </p>
  - uid: system.fabric._replicator
    parent: system.fabric
    href: system.fabric._replicator.yml
    name: Replicator
    nameWithType: Replicator
    fullName: system.fabric.Replicator
    type: Interface
    syntax:
      content: public interface Replicator
  - uid: 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    type: Method
    summary: |-
      <p>その他の操作を実行できるように、初期化されたサービスのレプリカが開きます。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p>これは、は、Service Fabric インフラストラクチャをサポートし、コードから直接使用するものではありません。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p><xref uid="system.fabric._stateful_service_partition" data-throw-if-not-resolved="false">System.fabric.StatefulServicePartition</xref>このレプリカの情報です。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: '<p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>&lt;<xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>&gt;、 <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref> stateful で使用されています。サービス。 Service Fabric の実装を使用する<xref uid="system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StatefulServiceReplica#openAsync (ReplicaOpenMode、StatefulServicePartition、CancellationToken)</xref> 、レプリカを返す必要があります、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>から取得した<xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator (StateProvider、ReplicatorSettings)</xref></p>'
  - uid: system.fabric._replica_open_mode
    parent: system.fabric
    href: system.fabric._replica_open_mode.yml
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: system.fabric.ReplicaOpenMode
    type: Enum
    syntax:
      content: public enum ReplicaOpenMode
  - uid: system.fabric._stateful_service_partition
    parent: system.fabric
    href: system.fabric._stateful_service_partition.yml
    name: StatefulServicePartition
    nameWithType: StatefulServicePartition
    fullName: system.fabric.StatefulServicePartition
    type: Interface
    syntax:
      content: public interface StatefulServicePartition
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。 インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。 キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。 取り消しを開始するトークンを使用することはできません。 所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。 通知を受信するオブジェクトは、適切な方法で応答できます。 </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'system.fabric._stateful_service_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.StatefulServiceReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>プライマリまたはセカンダリ レプリカのロールを変更します。</p>\n<p>\r\n\r\n  <b>注釈:</b>をパラメーターとして、新しいロールが示されます。 ときに、サービス ロールに移行する、新しい、サービスが、現在リッスン アドレスを更新することです。 リッスン アドレスは、クライアントが接続するアドレスです。 クライアントからの通信が予想される場合、ポートなどの一部のリソースを要求のみにプライマリ レプリカであるときに、サービスが有効にします。 </p>"
    syntax:
      content: 'public CompletableFuture<String> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>更新された<xref uid="system.fabric._replica_role" data-throw-if-not-resolved="false">system.fabric.ReplicaRole</xref>このレプリカに遷移させなければならないことです。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 06be942d
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>型の<xref uid="" data-throw-if-not-resolved="false">java.lang.String</xref>用の â €™ サービス ファブリックの名前付けを使用して、レプリカと関連付けられる s 新しい接続アドレス。 </p>
  - uid: 'system.fabric._key_value_store_replica.onChangeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: 'onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.KeyValueStoreReplica.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>このレプリカのロールが変更されることを示します。</p>\n<p>\r\n\r\n  <b>注釈:</b>から派生している場合、アプリケーションのレプリカはこのメソッドをオーバーライドする必要があります<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 アプリケーションのレプリカは、このレプリカのアドレスを結果のタスクを返す必要があります。 同様に、取得できる、システムでこのレプリカのアドレスが格納されている (変更されていない) ResolveServiceAsync を使用します。 アプリケーションは、未処理の変更の役割のすべての呼び出しの完了の背後にあるレプリカ セットの再構成がブロックされるため、適切なタイミングでロールの変更を終了する注意する必要があります。 </p>"
    syntax: *ref_3
  - uid: system.fabric._stateful_service_replica.closeAsync(CancellationToken)
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
    type: Method
    summary: |-
      <p>シャット ダウンすると、サービスのレプリカを閉じます。 キャンセルが推奨でが取り消された場合でもは、操作を完了も可能性がありますに注意してください。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: db03ee24
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>です。 </p>
  - uid: system.fabric._key_value_store_replica.onCloseAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: onCloseAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.onCloseAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.onCloseAsync(CancellationToken cancellationToken)
    type: Method
    summary: |-
      <p>このサービス レプリカがシャット ダウンを閉じる必要があるときに呼び出されます。</p>
      <p></p>
    syntax: *ref_4
  - uid: system.fabric._stateful_service_replica.abort()
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: abort()
    nameWithType: StatefulServiceReplica.abort()
    fullName: void system.fabric.StatefulServiceReplica.abort()
    type: Method
    summary: "<p>インスタンスが異常終了します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>リースが失われると、サービスの使用への応答<xref uid=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\">system.fabric.ServicePartition#reportFault(FaultType)</xref>レポートに、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FaultType#Permanent</xref>エラー異常終了の例に示します。 このメソッドが呼び出されたときにサービス インスタンスをすぐにリリースしのすべての参照をクリーンアップしを返します。 </p>"
    syntax:
      content: public void abort()
  - uid: system.fabric._key_value_store_replica.onDatalossReported()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: onDatalossReported()
    nameWithType: KeyValueStoreReplica.onDatalossReported()
    fullName: void system.fabric.KeyValueStoreReplica.onDatalossReported()
    type: Method
    summary: '<p>レプリカ セットのことを通知で、データの損失が発生した可能性があります。 アプリケーションのこのイベントをリッスンまたはオーバーライドできます<xref uid="system.fabric._key_value_store_replica.onDataLossAsync(CancellationToken)" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onDataLossAsync(CancellationToken)</xref>です。 両方は、同じイベントを表します。 </p>'
    syntax: *ref_5
  - uid: system.fabric._key_value_store_replica.onDataLossAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: onDataLossAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.onDataLossAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Boolean> system.fabric.KeyValueStoreReplica.onDataLossAsync(CancellationToken cancellationToken)
    type: Method
    summary: |-
      <p>レプリカ セットのことを通知で、データの損失が発生した可能性があります。 アプリケーション イベントを非同期的に処理またはを使用するには、このメソッドをオーバーライドするか、 <xref uid="system.fabric._key_value_store_replica.onDatalossReported()" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onDatalossReported()</xref>同期的に処理するイベントです。 両方は、同じイベントを表します。</p>
      <p></p>
    syntax: *ref_6
  - uid: system.fabric._key_value_store_enumerator
    parent: system.fabric
    href: system.fabric._key_value_store_enumerator.yml
    name: KeyValueStoreEnumerator
    nameWithType: KeyValueStoreEnumerator
    fullName: system.fabric.KeyValueStoreEnumerator
    type: Class
    summary: '<p>コピー完了コールバックのコンテキスト内でセカンダリ レプリカのローカル ストアの内容を読み取ります。 参照してください<xref uid="system.fabric._key_value_store_replica.onCopyComplete(KeyValueStoreEnumerator)" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica#onCopyComplete(system.fabric.KeyValueStoreEnumerator)</xref>です。 </p>'
    syntax:
      content: public class KeyValueStoreEnumerator
  - uid: system.fabric._key_value_store_notification
    parent: system.fabric
    href: system.fabric._key_value_store_notification.yml
    name: KeyValueStoreNotification
    nameWithType: KeyValueStoreNotification
    fullName: system.fabric.KeyValueStoreNotification
    type: Class
    summary: "<p>セカンダリ レプリカによって受信された、レプリケートされた操作のすべての情報が含まれています。 </p>\n<p>\r\n\r\n  <b>注釈:</b>を参照してください<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onReplicationOperation(java.util.Enumeration)</xref>です。 </p>"
    syntax:
      content: public class KeyValueStoreNotification
  - uid: system.fabric.exception._fabric_exception
    parent: system.fabric.exception
    href: system.fabric.exception._fabric_exception.yml
    name: FabricException
    nameWithType: FabricException
    fullName: system.fabric.exception.FabricException
    type: Class
    syntax:
      content: public class FabricException