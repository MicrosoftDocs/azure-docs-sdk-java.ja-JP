### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.servicebus._i_message_session
    id: _i_message_session
    parent: com.microsoft.azure.servicebus
    children:
      - com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc()
      - com.microsoft.azure.servicebus._i_message_session.getSessionId()
      - com.microsoft.azure.servicebus._i_message_session.getState()
      - com.microsoft.azure.servicebus._i_message_session.getStateAsync()
      - com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
      - com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync()
      - 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
      - 'com.microsoft.azure.servicebus._i_message_session.setStateAsync(byte [])'
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: IMessageSession
    nameWithType: IMessageSession
    fullName: com.microsoft.azure.servicebus.IMessageSession
    type: Interface
    source:
      remote: &ref_0
        path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
        branch: master
        repo: 'https://github.com/Azure/azure-service-bus-java'
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 19
    package: com.microsoft.azure.servicebus
    summary: |-
      <p>セッション オブジェクトを表します。 <xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref>セッションでの操作を実行するために使用できます。 </p>
      <p>サービス バス セッション、AMQP 1.0 プロトコルでは"Groups"とも呼ばれますとは、一連の関連メッセージをバインド解除済みです。 ServiceBus では、セッションでメッセージの順序を保証します。 </p>
      <p>センダは、セッションを作成することができますを設定してトピックまたはキューにメッセージを送信するときに、 <xref uid="" data-throw-if-not-resolved="false">#sessionId をメッセージ</xref>プロパティを<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>一部のアプリケーションに一意の識別子を定義します。 AMQP 1.0 プロトコル レベルでは、この値は、グループ id プロパティにマップされます。 </p>
      <p>セッションは、キューまたはトピックのサブスクリプションで、セッションのセッション Id で、少なくとも 1 つのメッセージが表示される時に存在するようになります。 セッションが存在する場合は定義されている時点、またはセッションの有効期限が切れる場合または非表示のジェスチャです。 </p>
    syntax: &ref_5
      content: public interface IMessageSession extends IMessageReceiver
    inheritedMembers:
      - com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID)
      - 'com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID)
      - 'com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus._i_closeable.close()
      - com.microsoft.azure.servicebus._i_closeable.closeAsync()
      - com.microsoft.azure.servicebus._i_message_receiver.complete(UUID)
      - com.microsoft.azure.servicebus._i_message_receiver.completeAsync(UUID)
      - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID)
      - 'com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,Map<String, Object>)'
      - 'com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String)'
      - 'com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String,Map<String, Object>)'
      - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID)
      - 'com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,Map<String, Object>)'
      - 'com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String)'
      - 'com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)'
      - com.microsoft.azure.servicebus._i_message_receiver.defer(UUID)
      - 'com.microsoft.azure.servicebus._i_message_receiver.defer(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID)
      - 'com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID,Map<String, Object>)'
      - com.microsoft.azure.servicebus._i_message_entity_client.getEntityPath()
      - com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount()
      - com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode()
      - com.microsoft.azure.servicebus._i_message_browser.peek()
      - com.microsoft.azure.servicebus._i_message_browser.peek(long)
      - com.microsoft.azure.servicebus._i_message_browser.peekAsync()
      - com.microsoft.azure.servicebus._i_message_browser.peekAsync(long)
      - com.microsoft.azure.servicebus._i_message_browser.peekBatch(int)
      - 'com.microsoft.azure.servicebus._i_message_browser.peekBatch(long,int)'
      - com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(int)
      - 'com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(long,int)'
      - com.microsoft.azure.servicebus._i_message_receiver.receive()
      - com.microsoft.azure.servicebus._i_message_receiver.receive(Duration)
      - com.microsoft.azure.servicebus._i_message_receiver.receiveAsync()
      - com.microsoft.azure.servicebus._i_message_receiver.receiveAsync(Duration)
      - com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int)
      - 'com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int,Duration)'
      - com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int)
      - 'com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int,Duration)'
      - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage(long)
      - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync(long)
      - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch(Collection<Long>)
      - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
      - com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock(IMessage)
      - com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync(IMessage)
      - com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount(int)
  - uid: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc()
    id: getLockedUntilUtc()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: getLockedUntilUtc()
    nameWithType: IMessageSession.getLockedUntilUtc()
    fullName: Instant com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
    overload: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 29
    package: com.microsoft.azure.servicebus
    syntax:
      content: public Instant getLockedUntilUtc()
      return:
        type: 328f8254
        description: '<p>時刻を取得するセッションで識別される<xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>はこのクライアント用になるまでにロックします。 </p>'
  - uid: com.microsoft.azure.servicebus._i_message_session.getSessionId()
    id: getSessionId()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: getSessionId()
    nameWithType: IMessageSession.getSessionId()
    fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId()
    overload: com.microsoft.azure.servicebus._i_message_session.getSessionId*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 24
    package: com.microsoft.azure.servicebus
    syntax: &ref_1
      content: public String getSessionId()
      return:
        type: '26831127'
        description: <p>セッション Id を取得します。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.getState()
    id: getState()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: getState()
    nameWithType: IMessageSession.getState()
    fullName: 'byte [] com.microsoft.azure.servicebus.IMessageSession.getState()'
    overload: com.microsoft.azure.servicebus._i_message_session.getState*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 78
    package: com.microsoft.azure.servicebus
    summary: |-
      <p>セッション状態を取得します。</p>
      <p></p>
    syntax: &ref_3
      content: 'public byte [] getState()'
      return:
        type: ccd9418d
        description: <p>セッションの状態 </p>
    exceptions:
      - type: 8256ba40
        description: <p>現在のスレッドが待機中に中断された場合 </p>
      - type: 73fec9fb
        description: <p>場合は失敗の状態を取得します。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.getStateAsync()
    id: getStateAsync()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: getStateAsync()
    nameWithType: IMessageSession.getStateAsync()
    fullName: 'CompletableFuture<byte[]> com.microsoft.azure.servicebus.IMessageSession.getStateAsync()'
    overload: com.microsoft.azure.servicebus._i_message_session.getStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 85
    package: com.microsoft.azure.servicebus
    summary: <p>非同期的に、セッションの状態を取得します。 </p>
    syntax:
      content: 'public CompletableFuture<byte[]> getStateAsync()'
      return:
        type: 5fe2dfa4
        description: <p>保留中のセッション状態の取得を表す CompletableFuture です。 </p>
    see:
      - type: com.microsoft.azure.servicebus._i_message_session.getState()
        description: 'IMessageSession::getState'
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
    id: renewSessionLock()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: renewSessionLock()
    nameWithType: IMessageSession.renewSessionLock()
    fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
    overload: com.microsoft.azure.servicebus._i_message_session.renewSessionLock*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 43
    package: com.microsoft.azure.servicebus
    summary: |-
      <p>指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。 ロックは、エンティティに指定された設定に基づいて更新されます。 </p>
      <p>セッションを承諾すると、セッションによってロックされてクライアントのインスタンスの指定された期間、サービス キュー/サブスクリプションの作成中に。 セッションの処理は、この期間を超える必要がある場合、セッション ロックを更新する必要があります。 各更新のセッションのロックは、エンティティの LockDuration によって更新されます。 </p>
      <p>セッションの更新は、同様のセッションですべてのメッセージを更新します。 各メッセージを更新することがない必要があります。</p>
      <p></p>
    syntax: &ref_2
      content: public void renewSessionLock()
    exceptions:
      - type: 8256ba40
        description: <p>現在のスレッドが待機中に中断された場合 </p>
      - type: 73fec9fb
        description: <p>場合は、更新に失敗しました。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync()
    id: renewSessionLockAsync()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: renewSessionLockAsync()
    nameWithType: IMessageSession.renewSessionLockAsync()
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
    overload: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 51
    package: com.microsoft.azure.servicebus
    summary: |-
      <p>指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。 ロックは、エンティティに指定された設定に基づいて更新されます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> renewSessionLockAsync()
      return:
        type: db03ee24
        description: <p>保留中の更新を表す CompletableFuture です。 </p>
    see:
      - type: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
        description: 'IMessageSession::renewSessionLock()'
  - uid: 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
    id: 'setState(byte [])'
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: 'setState(byte[] state)'
    nameWithType: 'IMessageSession.setState(byte[] state)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)'
    overload: com.microsoft.azure.servicebus._i_message_session.setState*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 60
    package: com.microsoft.azure.servicebus
    summary: |-
      <p>使用して後で取得できるセッションでカスタムの状態を設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</p>
      <p></p>
    syntax: &ref_4
      content: 'public void setState(byte[] state)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p>セッション状態。 </p>
    exceptions:
      - type: 8256ba40
        description: <p>現在のスレッドが待機中に中断された場合 </p>
      - type: 73fec9fb
        description: <p>場合は、状態を設定できませんでした。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_session.setStateAsync(byte [])'
    id: 'setStateAsync(byte [])'
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    langs:
      - java
    name: 'setStateAsync(byte[] state)'
    nameWithType: 'IMessageSession.setStateAsync(byte[] state)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[] state)'
    overload: com.microsoft.azure.servicebus._i_message_session.setStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      startLine: 69
    package: com.microsoft.azure.servicebus
    summary: |-
      <p>使用して後で取得できるセッションでカスタムの状態を非同期的に設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> setStateAsync(byte[] state)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p>セッション状態。 </p>
      return:
        type: db03ee24
        description: <p>保留中のセッション状態の設定を表す CompletableFuture です。 </p>
    see:
      - type: 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
        description: 'IMessageSession::setState'
references:
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: com.microsoft.azure.servicebus._i_message_session.getSessionId*
    name: getSessionId
    nameWithType: IMessageSession.getSessionId
    fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId
    package: com.microsoft.azure.servicebus
  - uid: 328f8254
    spec.java:
      - name: Instant
        fullName: Instant
  - uid: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc*
    name: getLockedUntilUtc
    nameWithType: IMessageSession.getLockedUntilUtc
    fullName: Instant com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc
    package: com.microsoft.azure.servicebus
  - uid: 8256ba40
    spec.java:
      - name: InterruptedException
        fullName: InterruptedException
  - uid: 73fec9fb
    spec.java:
      - name: ServiceBusException
        fullName: ServiceBusException
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock*
    name: renewSessionLock
    nameWithType: IMessageSession.renewSessionLock
    fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock
    package: com.microsoft.azure.servicebus
  - uid: db03ee24
    spec.java:
      - name: CompletableFuture<Void>
        fullName: CompletableFuture<Void>
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync*
    name: renewSessionLockAsync
    nameWithType: IMessageSession.renewSessionLockAsync
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync
    package: com.microsoft.azure.servicebus
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: com.microsoft.azure.servicebus._i_message_session.setState*
    name: setState
    nameWithType: IMessageSession.setState
    fullName: void com.microsoft.azure.servicebus.IMessageSession.setState
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._i_message_session.setStateAsync*
    name: setStateAsync
    nameWithType: IMessageSession.setStateAsync
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.setStateAsync
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._i_message_session.getState*
    name: getState
    nameWithType: IMessageSession.getState
    fullName: 'byte [] com.microsoft.azure.servicebus.IMessageSession.getState'
    package: com.microsoft.azure.servicebus
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: com.microsoft.azure.servicebus._i_message_session.getStateAsync*
    name: getStateAsync
    nameWithType: IMessageSession.getStateAsync
    fullName: 'CompletableFuture<byte[]> com.microsoft.azure.servicebus.IMessageSession.getStateAsync'
    package: com.microsoft.azure.servicebus
  - uid: com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: abandon(UUID lockToken)
    nameWithType: IMessageReceiver.abandon(UUID lockToken)
    fullName: void com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken)
    type: Method
    summary: |-
      <p>電話放棄呼<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>のロック トークンを使用します。 これにより、メッセージ処理用にもう一度使用できます。 メッセージの配信数の増加は、メッセージの破棄</p>
      <p></p>
    syntax:
      content: public void abandon(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'abandon(UUID lockToken, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.abandon(UUID lockToken, Map<String, Object> propertiesToModify)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>電話放棄呼<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ロック トークンと更新されたメッセージ プロパティを使用しています。 これにより、メッセージ処理用にもう一度使用できます。 メッセージの配信数の増加は、メッセージの破棄</p>
      <p></p>
    syntax:
      content: 'public void abandon(UUID lockToken, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
  - uid: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: abandonAsync(UUID lockToken)
    nameWithType: IMessageReceiver.abandonAsync(UUID lockToken)
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken)
    type: Method
    summary: |-
      <p>非同期的に中止<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>のロック トークンを使用します。 これにより、メッセージ処理用にもう一度使用できます。 メッセージを破棄すると、メッセージの配信回数が増加します。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> abandonAsync(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
      return:
        type: db03ee24
        description: <p>保留中の破棄を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>非同期的に中止<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ロック トークンと更新されたメッセージ プロパティを使用しています。 これにより、メッセージ処理用にもう一度使用できます。 メッセージを破棄すると、メッセージの配信回数が増加します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
      return:
        type: db03ee24
        description: <p>保留中の破棄を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_closeable.close()
    parent: com.microsoft.azure.servicebus._i_closeable
    href: com.microsoft.azure.servicebus._i_closeable.yml
    name: close()
    nameWithType: ICloseable.close()
    fullName: void com.microsoft.azure.servicebus.ICloseable.close()
    type: Method
    summary: <p>同期的に終了し、このオブジェクトに関連付けられているすべてのリソースを破棄します。 このメソッドを呼び出すことは、呼び出し元のと同じです。 このメソッドはブロックされるまでオブジェクトが閉じられます。 </p>
    syntax:
      content: public void close()
  - uid: com.microsoft.azure.servicebus._i_closeable.closeAsync()
    parent: com.microsoft.azure.servicebus._i_closeable
    href: com.microsoft.azure.servicebus._i_closeable.yml
    name: closeAsync()
    nameWithType: ICloseable.closeAsync()
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.ICloseable.closeAsync()
    type: Method
    summary: <p>終了し、このオブジェクトに関連付けられているすべてのリソースを破棄します。 閉じられた後、オブジェクトを使用できません。 これは、すぐに、CompletableFuture を返す非同期メソッドです。 このオブジェクトは、返された CompletableFuture が完了したときに完全に閉じられます。 </p>
    syntax:
      content: public CompletableFuture<Void> closeAsync()
      return:
        type: db03ee24
        description: <p>このオブジェクトの終了を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.complete(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: complete(UUID lockToken)
    nameWithType: IMessageReceiver.complete(UUID lockToken)
    fullName: void com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID lockToken)
    type: Method
    summary: |-
      <p>完了、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>のロック トークンを使用します。 これにより、サービスからのメッセージが削除されます。</p>
      <p></p>
    syntax:
      content: public void complete(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
  - uid: com.microsoft.azure.servicebus._i_message_receiver.completeAsync(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: completeAsync(UUID lockToken)
    nameWithType: IMessageReceiver.completeAsync(UUID lockToken)
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID lockToken)
    type: Method
    summary: |-
      <p>非同期で完了、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>のロック トークンを使用します。 これにより、サービスからのメッセージが削除されます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> completeAsync(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
      return:
        type: db03ee24
        description: <p>表す CompletableFuture、保留中の完了します。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: deadLetter(UUID lockToken)
    nameWithType: IMessageReceiver.deadLetter(UUID lockToken)
    fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken)
    type: Method
    summary: |-
      <p>移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューにします。</p>
      <p></p>
    syntax:
      content: public void deadLetter(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに変更されたメッセージのプロパティを持つ。</p>
      <p></p>
    syntax:
      content: 'public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
    nameWithType: 'IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
    type: Method
    summary: |-
      <p>移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに配信不能の理由とエラーの説明を使用します。</p>
      <p></p>
    syntax:
      content: 'public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: deadLetterReason
          type: '26831127'
          description: <p>配信不能理由です。 </p>
        - id: deadLetterErrorDescription
          type: '26831127'
          description: <p>配信不能エラーの説明。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに配信不能の理由とエラーの説明および変更されたプロパティを使用します。</p>
      <p></p>
    syntax:
      content: 'public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: deadLetterReason
          type: '26831127'
          description: <p>配信不能理由です。 </p>
        - id: deadLetterErrorDescription
          type: '26831127'
          description: <p>配信不能エラーの説明。 </p>
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
  - uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: deadLetterAsync(UUID lockToken)
    nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken)
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken)
    type: Method
    summary: |-
      <p>非同期的に移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに配信不能にします。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
      return:
        type: db03ee24
        description: <p>保留中の配信不能を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>非同期的に移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに変更されたプロパティとします。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
      return:
        type: db03ee24
        description: <p>保留中の配信不能を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
    nameWithType: 'IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
    type: Method
    summary: |-
      <p>非同期的に移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに配信不能の理由とエラーの説明を使用します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: deadLetterReason
          type: '26831127'
          description: <p>配信不能理由です。 </p>
        - id: deadLetterErrorDescription
          type: '26831127'
          description: <p>配信不能エラーの説明。 </p>
      return:
        type: db03ee24
        description: <p>保留中の配信不能を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>非同期的に移動、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>配信不能サブキューに配信不能の理由とエラーの説明および変更されたプロパティを使用します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: deadLetterReason
          type: '26831127'
          description: <p>配信不能理由です。 </p>
        - id: deadLetterErrorDescription
          type: '26831127'
          description: <p>配信不能エラーの説明。 </p>
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
      return:
        type: db03ee24
        description: <p>保留中の配信不能を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.defer(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: defer(UUID lockToken)
    nameWithType: IMessageReceiver.defer(UUID lockToken)
    fullName: void com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken)
    type: Method
    summary: |-
      <p>延期、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>のロック トークンを使用します。 これは、遅延のサブキューにメッセージを移動します。</p>
      <p></p>
    syntax:
      content: public void defer(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.defer(UUID,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'defer(UUID lockToken, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.defer(UUID lockToken, Map<String, Object> propertiesToModify)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>延期、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>とそのロック トークンを使用してメッセージ プロパティを変更します。 これは、遅延のサブキューにメッセージを移動します。</p>
      <p></p>
    syntax:
      content: 'public void defer(UUID lockToken, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
  - uid: com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: deferAsync(UUID lockToken)
    nameWithType: IMessageReceiver.deferAsync(UUID lockToken)
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken)
    type: Method
    summary: |-
      <p>非同期的に延期、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>のロック トークンを使用します。 これは、遅延のサブキューにメッセージを移動します。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> deferAsync(UUID lockToken)
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
      return:
        type: db03ee24
        description: <p>保留中の遅延を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID,Map<String, Object>)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    nameWithType: 'IMessageReceiver.deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
    type: Method
    summary: |-
      <p>非同期的に延期、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>とそのロック トークンを使用してメッセージ プロパティを変更します。 これは、遅延のサブキューにメッセージを移動します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)'
      parameters:
        - id: lockToken
          type: add9545a
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ロック トークン<xref uid=\"com.microsoft.azure.servicebus._message.getLockToken()\" data-throw-if-not-resolved=\"false\">Message#getLockToken()</xref></p>"
        - id: propertiesToModify
          type: e7b06046
          description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>を変更するプロパティです。 </p>"
      return:
        type: db03ee24
        description: <p>保留中の遅延を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_entity_client.getEntityPath()
    parent: com.microsoft.azure.servicebus._i_message_entity_client
    href: com.microsoft.azure.servicebus._i_message_entity_client.yml
    name: getEntityPath()
    nameWithType: IMessageEntityClient.getEntityPath()
    fullName: String com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
    type: Method
    summary: |-
      <p>メッセージが送信または受信側のメッセージをこのクライアントは、エンティティのパスを取得します。</p>
      <p></p>
    syntax:
      content: public String getEntityPath()
      return:
        type: '26831127'
        description: <p>このクライアントが接続するエンティティのパス </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount()
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: getPrefetchCount()
    nameWithType: IMessageReceiver.getPrefetchCount()
    fullName: int com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()
    type: Method
    summary: |-
      <p>プリフェッチ値セットを取得します。</p>
      <p></p>
    syntax:
      content: public int getPrefetchCount()
      return:
        type: f75371fa
        description: <p>セットのプリフェッチ数の値。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode()
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: getReceiveMode()
    nameWithType: IMessageReceiver.getReceiveMode()
    fullName: ReceiveMode com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()
    type: Method
    summary: |-
      <p>現在の受信者を取得<xref uid="com.microsoft.azure.servicebus._receive_mode" data-throw-if-not-resolved="false">ReceiveMode</xref>です。</p>
      <p></p>
    syntax:
      content: public ReceiveMode getReceiveMode()
      return:
        type: com.microsoft.azure.servicebus._receive_mode
        description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._receive_mode\" data-throw-if-not-resolved=\"false\">ReceiveMode</xref>\r\n\r\n</p>"
  - uid: com.microsoft.azure.servicebus._i_message_browser.peek()
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: peek()
    nameWithType: IMessageBrowser.peek()
    fullName: IMessage com.microsoft.azure.servicebus.IMessageBrowser.peek()
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく次にアクティブなメッセージを読み取ります。 最初に呼び出す<xref uid="com.microsoft.azure.servicebus._i_message_browser.peek()" data-throw-if-not-resolved="false">IMessageBrowser#peek()</xref>この受信者の最初の作業中のメッセージをフェッチします。 後続の各呼び出しは、エンティティの後続のメッセージをフェッチします。</p>
      <p></p>
    syntax:
      content: public IMessage peek()
      return:
        type: com.microsoft.azure.servicebus._i_message
        description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ピーク </p>"
  - uid: com.microsoft.azure.servicebus._i_message_browser.peek(long)
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: peek(long fromSequenceNumber)
    nameWithType: IMessageBrowser.peek(long fromSequenceNumber)
    fullName: IMessage com.microsoft.azure.servicebus.IMessageBrowser.peek(long fromSequenceNumber)
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく次にアクティブなメッセージを読み取ります。</p>
      <p></p>
    syntax:
      content: public IMessage peek(long fromSequenceNumber)
      parameters:
        - id: fromSequenceNumber
          type: 0364520f
          description: <p>メッセージを読み取る場所からシーケンス番号。 </p>
      return:
        type: com.microsoft.azure.servicebus._i_message
        description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ピーク </p>"
  - uid: com.microsoft.azure.servicebus._i_message_browser.peekAsync()
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: peekAsync()
    nameWithType: IMessageBrowser.peekAsync()
    fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく、アクティブなメッセージを非同期に読み取ります。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<IMessage> peekAsync()
      return:
        type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
        description: "<p>\r\n\r\n  <xref uid=\"com.microsoft.azure.servicebus._message\" data-throw-if-not-resolved=\"false\">メッセージ</xref>ピーク </p>"
  - uid: com.microsoft.azure.servicebus._i_message_browser.peekAsync(long)
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: peekAsync(long fromSequenceNumber)
    nameWithType: IMessageBrowser.peekAsync(long fromSequenceNumber)
    fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long fromSequenceNumber)
    type: Method
    summary: |-
      <p>非同期的にメッセージを読み取ります次にアクティブな受信側またはメッセージの送信元の状態を変更することがなく。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
      parameters:
        - id: fromSequenceNumber
          type: 0364520f
          description: <p>メッセージを読み取る場所からシーケンス番号。 </p>
      return:
        type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>返す CompletableFuture<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ピークします。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_browser.peekBatch(int)
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: peekBatch(int messageCount)
    nameWithType: IMessageBrowser.peekBatch(int messageCount)
    fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int messageCount)
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく次のバッチのアクティブなメッセージを読み取ります。</p>
      <p></p>
    syntax:
      content: public Collection<IMessage> peekBatch(int messageCount)
      parameters:
        - id: messageCount
          type: f75371fa
          description: <p>メッセージの数。 </p>
      return:
        type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>バッチの<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ピーク </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_browser.peekBatch(long,int)'
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: 'peekBatch(long fromSequenceNumber, int messageCount)'
    nameWithType: 'IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)'
    fullName: 'Collection<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)'
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく次のバッチのアクティブなメッセージを読み取ります。</p>
      <p></p>
    syntax:
      content: 'public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)'
      parameters:
        - id: fromSequenceNumber
          type: 0364520f
          description: <p>メッセージを読み取る場所からシーケンス番号。 </p>
        - id: messageCount
          type: f75371fa
          description: <p>メッセージの数。 </p>
      return:
        type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>バッチの<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ピーク </p>
  - uid: com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(int)
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: peekBatchAsync(int messageCount)
    nameWithType: IMessageBrowser.peekBatchAsync(int messageCount)
    fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int messageCount)
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく、アクティブなメッセージの次のバッチを非同期に読み取ります。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
      parameters:
        - id: messageCount
          type: f75371fa
          description: <p>メッセージの数。 </p>
      return:
        type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
        description: <p>バッチを返す CompletableFuture<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ピークします。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(long,int)'
    parent: com.microsoft.azure.servicebus._i_message_browser
    href: com.microsoft.azure.servicebus._i_message_browser.yml
    name: 'peekBatchAsync(long fromSequenceNumber, int messageCount)'
    nameWithType: 'IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)'
    fullName: 'CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)'
    type: Method
    summary: |-
      <p>受信側またはメッセージの送信元の状態を変更することがなく、アクティブなメッセージの次のバッチを非同期に読み取ります。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)'
      parameters:
        - id: fromSequenceNumber
          type: 0364520f
          description: <p>メッセージを読み取る場所からシーケンス番号。 </p>
        - id: messageCount
          type: f75371fa
          description: <p>メッセージの数。 </p>
      return:
        type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
        description: <p>バッチを返す CompletableFuture<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>ピークします。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receive()
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receive()
    nameWithType: IMessageReceiver.receive()
    fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive()
    type: Method
    summary: |-
      <p>受信、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>待機時間の既定のサーバーにします。</p>
      <p></p>
    syntax:
      content: public IMessage receive()
      return:
        type: com.microsoft.azure.servicebus._i_message
        description: <p>受信した<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>またはメッセージが表示されない場合は null です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receive(Duration)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receive(Duration serverWaitTime)
    nameWithType: IMessageReceiver.receive(Duration serverWaitTime)
    fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive(Duration serverWaitTime)
    type: Method
    summary: |-
      <p>受信、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>待機時間の指定したサーバーとします。</p>
      <p></p>
    syntax:
      content: public IMessage receive(Duration serverWaitTime)
      parameters:
        - id: serverWaitTime
          type: e02a2de0
          description: <p>サーバーの待機時間 </p>
      return:
        type: com.microsoft.azure.servicebus._i_message
        description: <p>受信した<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>またはメッセージが表示されない場合は null です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync()
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveAsync()
    nameWithType: IMessageReceiver.receiveAsync()
    fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()
    type: Method
    summary: |-
      <p>受信、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>Azure Service Bus からです。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<IMessage> receiveAsync()
      return:
        type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>受信したメッセージ。 メッセージがない場合は null を返します </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync(Duration)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveAsync(Duration serverWaitTime)
    nameWithType: IMessageReceiver.receiveAsync(Duration serverWaitTime)
    fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(Duration serverWaitTime)
    type: Method
    summary: |-
      <p>受信、<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>待機時間のサーバーと Azure Service Bus からです。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<IMessage> receiveAsync(Duration serverWaitTime)
      parameters:
        - id: serverWaitTime
          type: e02a2de0
          description: <p>時間、クライアントは、タイムアウトになる前に、メッセージの受信を待機します。 </p>
      return:
        type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>受信したメッセージ。 メッセージがない場合は null を返します </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveBatch(int maxMessageCount)
    nameWithType: IMessageReceiver.receiveBatch(int maxMessageCount)
    fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount)
    type: Method
    summary: |-
      <p>MaxMessageCount の最大値を受け取る<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>Azure Service Bus からです。</p>
      <p></p>
    syntax:
      content: public Collection<IMessage> receiveBatch(int maxMessageCount)
      parameters:
        - id: maxMessageCount
          type: f75371fa
          description: <p>受信するメッセージの最大数。 </p>
      return:
        type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>受信したメッセージの一覧です。 メッセージがない場合は null を返します。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int,Duration)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'receiveBatch(int maxMessageCount, Duration serverWaitTime)'
    nameWithType: 'IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)'
    fullName: 'Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)'
    type: Method
    summary: |-
      <p>MaxMessageCount の最大値を受け取る<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>待機時間のサーバーと Azure Service Bus からです。</p>
      <p></p>
    syntax:
      content: 'public Collection<IMessage> receiveBatch(int maxMessageCount, Duration serverWaitTime)'
      parameters:
        - id: maxMessageCount
          type: f75371fa
          description: <p>受信するメッセージの最大数。 </p>
        - id: serverWaitTime
          type: e02a2de0
          description: <p>時間、クライアントは、タイムアウトになる前に、メッセージの受信を待機します。 </p>
      return:
        type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>受信したメッセージの一覧です。 メッセージがない場合は null を返します。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveBatchAsync(int maxMessageCount)
    nameWithType: IMessageReceiver.receiveBatchAsync(int maxMessageCount)
    fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount)
    type: Method
    summary: |-
      <p>非同期的に maxMessageCount の最大値を受け取る<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>エンティティからです。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount)
      parameters:
        - id: maxMessageCount
          type: f75371fa
          description: <p>受信するメッセージの最大数。 </p>
      return:
        type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
        description: <p>保留中の受信を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int,Duration)'
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: 'receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)'
    nameWithType: 'IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)'
    fullName: 'CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)'
    type: Method
    summary: |-
      <p>非同期的に maxMessageCount の最大値を受け取る<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>待機時間のサーバーと Azure Service Bus からです。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)'
      parameters:
        - id: maxMessageCount
          type: f75371fa
          description: <p>受信するメッセージの最大数。 </p>
        - id: serverWaitTime
          type: e02a2de0
          description: <p>時間、クライアントは、タイムアウトになる前に、メッセージの受信を待機します。 </p>
      return:
        type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
        description: <p>保留中の受信を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage(long)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveDeferredMessage(long sequenceNumber)
    nameWithType: IMessageReceiver.receiveDeferredMessage(long sequenceNumber)
    fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long sequenceNumber)
    type: Method
    summary: |-
      <p>遅延実行を受け取る<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>です。 シーケンス番号を使用して、遅延メッセージを受信のみできます。</p>
      <p></p>
    syntax:
      content: public IMessage receiveDeferredMessage(long sequenceNumber)
      parameters:
        - id: sequenceNumber
          type: 0364520f
          description: '<p><xref uid="com.microsoft.azure.servicebus._message.getSequenceNumber()" data-throw-if-not-resolved="false">Message#getSequenceNumber()</xref>です。 </p>'
      return:
        type: com.microsoft.azure.servicebus._i_message
        description: <p>受信した<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>指定された、メッセージがない場合は null またはシーケンス番号。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync(long)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveDeferredMessageAsync(long sequenceNumber)
    nameWithType: IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)
    fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)
    type: Method
    summary: |-
      <p>特定の遅延を非同期的に受け取る<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>シーケンス番号によって識別されます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<IMessage> receiveDeferredMessageAsync(long sequenceNumber)
      parameters:
        - id: sequenceNumber
          type: 0364520f
          description: <p>受信するメッセージのシーケンス番号。 </p>
      return:
        type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>保留中の受信を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch(Collection<Long>)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
    nameWithType: IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
    fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
    type: Method
    summary: |-
      <p>バッチで受け取る遅延<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>です。</p>
      <p></p>
    syntax:
      content: public Collection<IMessage> receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
      parameters:
        - id: sequenceNumbers
          type: f936a554
          description: <p>目的の遅延メッセージのシーケンス番号。 </p>
      return:
        type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
        description: <p>受信したメッセージの一覧です。 メッセージがない場合は null を返します。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
    nameWithType: IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
    fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
    type: Method
    summary: |-
      <p>セットを非同期的に受信遅延<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>エンティティからです。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Collection<IMessage>> receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
      parameters:
        - id: sequenceNumbers
          type: f936a554
          description: <p>受信するメッセージのシーケンス番号。 </p>
      return:
        type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
        description: <p>保留中の受信を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock(IMessage)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: renewMessageLock(IMessage message)
    nameWithType: IMessageReceiver.renewMessageLock(IMessage message)
    fullName: Instant com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage message)
    type: Method
    summary: |-
      <p>ロック トークンで指定されたメッセージのロックを更新します。 ロックは、エンティティに指定された設定に基づいて更新されます。 メッセージを受信する<xref uid="com.microsoft.azure.servicebus._receive_mode.PEEKLOCK" data-throw-if-not-resolved="false">ReceiveMode #PEEKLOCK</xref>モードでは、メッセージがロックされているこの受信者インスタンス用のサーバーに指定された期間中 (LockDuration) キュー/サブスクリプションの作成中にします。 メッセージの処理は、この期間を超える必要がある場合、ロックを更新する必要があります。 各更新のロックは、エンティティの LockDuration によって更新されます。</p>
      <p></p>
    syntax:
      content: public Instant renewMessageLock(IMessage message)
      parameters:
        - id: message
          type: com.microsoft.azure.servicebus._i_message
          description: <p><xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>を更新します。 </p>
      return:
        type: 328f8254
        description: <p>UTC 時刻まで、新しいロックされています。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync(IMessage)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: renewMessageLockAsync(IMessage message)
    nameWithType: IMessageReceiver.renewMessageLockAsync(IMessage message)
    fullName: CompletableFuture<Instant> com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(IMessage message)
    type: Method
    summary: |-
      <p>ロック トークンで指定されたメッセージのロックを非同期的に更新します。 ロックは、エンティティに指定された設定に基づいて更新されます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Instant> renewMessageLockAsync(IMessage message)
      parameters:
        - id: message
          type: com.microsoft.azure.servicebus._i_message
          description: <p><xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>を更新します。 </p>
      return:
        type: 6666b360
        description: <p>保留中の更新を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount(int)
    parent: com.microsoft.azure.servicebus._i_message_receiver
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: setPrefetchCount(int prefetchCount)
    nameWithType: IMessageReceiver.setPrefetchCount(int prefetchCount)
    fullName: void com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int prefetchCount)
    type: Method
    summary: |-
      <p>受信側のプリフェッチ数を設定します。 メッセージ フローと、1 つのアプリケーションが要求する前にローカルの取得のためすぐに使用できるメッセージがあることを目指していますによってプリフェッチ速度では、受信を使用します。 メッセージ数の PrefetchCount をプリフェッチする 0 以外の値を設定します。 プリフェッチをオフに値を 0 に設定します。 RECEIVEANDDELETE モードの場合は、既定値は 0 です。 PEEKLOCK モードの場合は、既定値は 100 です。 </p>
      <p>受信側が作成されるまで、値を設定できません。</p>
      <p></p>
    syntax:
      content: public void setPrefetchCount(int prefetchCount)
      parameters:
        - id: prefetchCount
          type: f75371fa
          description: <p>目的のプリフェッチ数。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_receiver
    parent: com.microsoft.azure.servicebus
    href: com.microsoft.azure.servicebus._i_message_receiver.yml
    name: IMessageReceiver
    nameWithType: IMessageReceiver
    fullName: com.microsoft.azure.servicebus.IMessageReceiver
    type: Interface
    summary: <p>メッセージ受信側のインターフェイスを定義します。 キューとサブスクリプションからメッセージを受信し、それらを認識する、MessageReceiver を使用できます。 </p>
    syntax:
      content: 'public interface IMessageReceiver extends IMessageEntityClient,IMessageBrowser'
  - uid: com.microsoft.azure.servicebus._message_session
    parent: com.microsoft.azure.servicebus
    href: com.microsoft.azure.servicebus._message_session.yml
    name: MessageSession
    nameWithType: MessageSession
    fullName: com.microsoft.azure.servicebus.MessageSession
    type: Class
    syntax:
      content: public class MessageSession
  - uid: com.microsoft.azure.servicebus._message_session.getSessionId()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: getSessionId()
    nameWithType: MessageSession.getSessionId()
    fullName: String com.microsoft.azure.servicebus.MessageSession.getSessionId()
    type: Method
    syntax:
      content: public String getSessionId()
      return:
        type: '26831127'
        description: <p>セッション Id を取得します。 </p>
  - uid: com.microsoft.azure.servicebus._message_session.getLockedUntilUtc()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: getLockedUntilUtc()
    nameWithType: MessageSession.getLockedUntilUtc()
    fullName: Instant com.microsoft.azure.servicebus.MessageSession.getLockedUntilUtc()
    type: Method
    syntax:
      content: public Instant getLockedUntilUtc()
      return:
        type: 328f8254
        description: '<p>時刻を取得するセッションで識別される<xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>はこのクライアント用になるまでにロックします。 </p>'
  - uid: com.microsoft.azure.servicebus._i_message_session.getSessionId()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: getSessionId()
    nameWithType: IMessageSession.getSessionId()
    fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId()
    type: Method
    syntax: *ref_1
  - uid: com.microsoft.azure.servicebus._message_session.renewSessionLock()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: renewSessionLock()
    nameWithType: MessageSession.renewSessionLock()
    fullName: void com.microsoft.azure.servicebus.MessageSession.renewSessionLock()
    type: Method
    summary: |-
      <p>指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。 ロックは、エンティティに指定された設定に基づいて更新されます。 </p>
      <p>セッションを承諾すると、セッションによってロックされてクライアントのインスタンスの指定された期間、サービス キュー/サブスクリプションの作成中に。 セッションの処理は、この期間を超える必要がある場合、セッション ロックを更新する必要があります。 各更新のセッションのロックは、エンティティの LockDuration によって更新されます。 </p>
      <p>セッションの更新は、同様のセッションですべてのメッセージを更新します。 各メッセージを更新することがない必要があります。</p>
      <p></p>
    syntax:
      content: public void renewSessionLock()
  - uid: com.microsoft.azure.servicebus.primitives._service_bus_exception
    parent: com.microsoft.azure.servicebus.primitives
    href: com.microsoft.azure.servicebus.primitives._service_bus_exception.yml
    name: ServiceBusException
    nameWithType: ServiceBusException
    fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
    type: Class
    summary: <p>これは、すべてのエラーの場合のサービス バスを生成する基本例外です。 </p>
    syntax:
      content: public class ServiceBusException
  - uid: com.microsoft.azure.servicebus._message_session.renewSessionLockAsync()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: renewSessionLockAsync()
    nameWithType: MessageSession.renewSessionLockAsync()
    fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.renewSessionLockAsync()
    type: Method
    summary: |-
      <p>指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。 ロックは、エンティティに指定された設定に基づいて更新されます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> renewSessionLockAsync()
      return:
        type: db03ee24
        description: <p>保留中の更新を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: renewSessionLock()
    nameWithType: IMessageSession.renewSessionLock()
    fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
    type: Method
    summary: |-
      <p>指定されたセッションで、ロックの更新、 <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>です。 ロックは、エンティティに指定された設定に基づいて更新されます。 </p>
      <p>セッションを承諾すると、セッションによってロックされてクライアントのインスタンスの指定された期間、サービス キュー/サブスクリプションの作成中に。 セッションの処理は、この期間を超える必要がある場合、セッション ロックを更新する必要があります。 各更新のセッションのロックは、エンティティの LockDuration によって更新されます。 </p>
      <p>セッションの更新は、同様のセッションですべてのメッセージを更新します。 各メッセージを更新することがない必要があります。</p>
      <p></p>
    syntax: *ref_2
  - uid: 'com.microsoft.azure.servicebus._message_session.setState(byte [])'
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: 'setState(byte[] sessionState)'
    nameWithType: 'MessageSession.setState(byte[] sessionState)'
    fullName: 'void com.microsoft.azure.servicebus.MessageSession.setState(byte[] sessionState)'
    type: Method
    summary: |-
      <p>使用して後で取得できるセッションでカスタムの状態を設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</p>
      <p></p>
    syntax:
      content: 'public void setState(byte[] sessionState)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p>セッション状態。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_session.getState()
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: getState()
    nameWithType: IMessageSession.getState()
    fullName: 'byte [] com.microsoft.azure.servicebus.IMessageSession.getState()'
    type: Method
    summary: |-
      <p>セッション状態を取得します。</p>
      <p></p>
    syntax: *ref_3
  - uid: 'com.microsoft.azure.servicebus._message_session.setStateAsync(byte [])'
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: 'setStateAsync(byte[] sessionState)'
    nameWithType: 'MessageSession.setStateAsync(byte[] sessionState)'
    fullName: 'CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.setStateAsync(byte[] sessionState)'
    type: Method
    summary: |-
      <p>使用して後で取得できるセッションでカスタムの状態を非同期的に設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Void> setStateAsync(byte[] sessionState)'
      parameters:
        - id: state
          type: ccd9418d
          description: <p>セッション状態。 </p>
      return:
        type: db03ee24
        description: <p>保留中のセッション状態の設定を表す CompletableFuture です。 </p>
  - uid: 'com.microsoft.azure.servicebus._i_message_session.setState(byte [])'
    parent: com.microsoft.azure.servicebus._i_message_session
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: 'setState(byte[] state)'
    nameWithType: 'IMessageSession.setState(byte[] state)'
    fullName: 'void com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)'
    type: Method
    summary: |-
      <p>使用して後で取得できるセッションでカスタムの状態を設定<xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>です。</p>
      <p></p>
    syntax: *ref_4
  - uid: com.microsoft.azure.servicebus._message_session.getState()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: getState()
    nameWithType: MessageSession.getState()
    fullName: 'byte [] com.microsoft.azure.servicebus.MessageSession.getState()'
    type: Method
    summary: |-
      <p>セッション状態を取得します。</p>
      <p></p>
    syntax:
      content: 'public byte [] getState()'
      return:
        type: ccd9418d
        description: <p>セッションの状態 </p>
  - uid: com.microsoft.azure.servicebus._message_session.getStateAsync()
    parent: com.microsoft.azure.servicebus._message_session
    href: com.microsoft.azure.servicebus._message_session.yml
    name: getStateAsync()
    nameWithType: MessageSession.getStateAsync()
    fullName: 'CompletableFuture<byte[]> com.microsoft.azure.servicebus.MessageSession.getStateAsync()'
    type: Method
    summary: <p>非同期的に、セッションの状態を取得します。 </p>
    syntax:
      content: 'public CompletableFuture<byte[]> getStateAsync()'
      return:
        type: 5fe2dfa4
        description: <p>保留中のセッション状態の取得を表す CompletableFuture です。 </p>
  - uid: com.microsoft.azure.servicebus._i_message_session
    parent: com.microsoft.azure.servicebus
    href: com.microsoft.azure.servicebus._i_message_session.yml
    name: IMessageSession
    nameWithType: IMessageSession
    fullName: com.microsoft.azure.servicebus.IMessageSession
    type: Interface
    summary: |-
      <p>セッション オブジェクトを表します。 <xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref>セッションでの操作を実行するために使用できます。 </p>
      <p>サービス バス セッション、AMQP 1.0 プロトコルでは"Groups"とも呼ばれますとは、一連の関連メッセージをバインド解除済みです。 ServiceBus では、セッションでメッセージの順序を保証します。 </p>
      <p>センダは、セッションを作成することができますを設定してトピックまたはキューにメッセージを送信するときに、 <xref uid="" data-throw-if-not-resolved="false">#sessionId をメッセージ</xref>プロパティを<xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">メッセージ</xref>一部のアプリケーションに一意の識別子を定義します。 AMQP 1.0 プロトコル レベルでは、この値は、グループ id プロパティにマップされます。 </p>
      <p>セッションは、キューまたはトピックのサブスクリプションで、セッションのセッション Id で、少なくとも 1 つのメッセージが表示される時に存在するようになります。 セッションが存在する場合は定義されている時点、またはセッションの有効期限が切れる場合または非表示のジェスチャです。 </p>
    syntax: *ref_5
  - uid: com.microsoft.azure.servicebus._message
    parent: com.microsoft.azure.servicebus
    href: com.microsoft.azure.servicebus._message.yml
    name: Message
    nameWithType: Message
    fullName: com.microsoft.azure.servicebus.Message
    type: Class
    syntax:
      content: public class Message