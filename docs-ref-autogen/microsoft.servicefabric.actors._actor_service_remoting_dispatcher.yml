### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    id: _actor_service_remoting_dispatcher
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher(FabricActorService)
      - 'microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    langs:
      - java
    name: ActorServiceRemotingDispatcher
    nameWithType: ActorServiceRemotingDispatcher
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
      startLine: 22
    package: microsoft.servicefabric.actors
    summary: <p>実装を提供<xref uid="" data-throw-if-not-resolved="false">ServiceRemotingMessageHandler</xref>アクター サービスとサービスでホストされているアクターのメッセージをディスパッチすることができます。 </p>
    syntax: &ref_1
      content: public class ActorServiceRemotingDispatcher extends ServiceRemotingDispatcher
    inheritance:
      - java.lang.Object
      - microsoft.servicefabric.services.remoting._service_remoting_message_handler
      - microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    inheritedMembers:
      - 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
      - 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.ServiceRemotingDispatcher(ServiceContext,Service)'
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher(FabricActorService)
    id: ActorServiceRemotingDispatcher(FabricActorService)
    parent: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    langs:
      - java
    name: ActorServiceRemotingDispatcher(FabricActorService actorService)
    nameWithType: ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService actorService)
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService actorService)
    overload: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
      startLine: 34
    package: microsoft.servicefabric.actors
    summary: |-
      <p>インスタンスを作成、 <xref uid="microsoft.servicefabric.actors._actor_service_remoting_dispatcher" data-throw-if-not-resolved="false">ActorServiceRemotingDispatcher</xref>アクター サービスとサービスでホストされているアクターのメッセージをディスパッチすることができます。</p>
      <p></p>
    syntax:
      content: public ActorServiceRemotingDispatcher(FabricActorService actorService)
      parameters:
        - id: actorService
          type: microsoft.servicefabric.actors._fabric_actor_service
          description: <p>アクター サービス インスタンス。 </p>
  - uid: 'microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    id: 'requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    langs:
      - java
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    overload: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceRemotingDispatcher.java
      startLine: 59
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター サービス メソッドまたはアクター メソッドに、クライアントから受信したメッセージをディスパッチします。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>必要な場合は、コールバック チャネルを取得できるようにするコンテキストを要求します。 </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>サービスのリモート処理のメッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>リモート処理のメッセージの要求本文をシリアル化されます。 </p>
      return:
        type: 5fe2dfa4
        description: <p>未処理の操作を表します。 結果、 <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>シリアル化された応答本文です。 </p>
    overridden: 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
references:
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.ActorServiceRemotingDispatcher*
    name: ActorServiceRemotingDispatcher
    nameWithType: ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher
    package: microsoft.servicefabric.actors
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync*
    name: requestResponseAsync
    nameWithType: ActorServiceRemotingDispatcher.requestResponseAsync
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.requestResponseAsync'
    package: microsoft.servicefabric.actors
  - uid: 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: 'handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>クライアントから一方向のメッセージを処理します。</p>
      <p></p>
    syntax:
      content: 'public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>要求コンテキスト、要求に関する追加情報を含む </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>要求メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>要求メッセージの本文 </p>
  - uid: 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.ServiceRemotingDispatcher(ServiceContext,Service)'
    parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: 'ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
    nameWithType: 'ServiceRemotingDispatcher.ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
    fullName: 'microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
    type: Constructor
    syntax:
      content: 'public ServiceRemotingDispatcher(ServiceContext serviceContext, Service service)'
      parameters:
        - id: serviceContext
          type: system.fabric._service_context
        - id: service
          type: microsoft.servicefabric.services.remoting._service
  - uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    parent: microsoft.servicefabric.services.remoting.runtime
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: ServiceRemotingDispatcher
    nameWithType: ServiceRemotingDispatcher
    fullName: microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher
    type: Class
    syntax:
      content: public class ServiceRemotingDispatcher
  - uid: microsoft.servicefabric.actors._fabric_actor_service
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._fabric_actor_service.yml
    name: FabricActorService
    nameWithType: FabricActorService
    fullName: microsoft.servicefabric.actors.FabricActorService
    type: Class
    summary: "<p>ベース Microsoft Service Fabric アクターの信頼性の高いサービスの基本クラスを表します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>アクターが、任意のサービス レベルの動作をオーバーライドする場合は、独自のカスタム アクター サービスを実装するには、このクラスから派生します。 </p>"
    syntax:
      content: public class FabricActorService
  - uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    name: ActorServiceRemotingDispatcher
    nameWithType: ActorServiceRemotingDispatcher
    fullName: microsoft.servicefabric.actors.ActorServiceRemotingDispatcher
    type: Class
    summary: <p>実装を提供<xref uid="" data-throw-if-not-resolved="false">ServiceRemotingMessageHandler</xref>アクター サービスとサービスでホストされているアクターのメッセージをディスパッチすることができます。 </p>
    syntax: *ref_1
  - uid: 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting._service_remoting_message_handler
    href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>サービスからの応答を必要とするクライアントからのメッセージを処理します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>要求コンテキスト、要求に関する追加情報を含む </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>要求メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>要求メッセージの本文 </p>
      return:
        type: 5fe2dfa4
        description: <p>応答本文 </p>
  - uid: microsoft.servicefabric.services.remoting._service_remoting_request_context
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_request_context.yml
    name: ServiceRemotingRequestContext
    nameWithType: ServiceRemotingRequestContext
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext
    type: Interface
    summary: <p>インターフェイスを定義します、IServiceRemotingMessageHandler の要求コンテキストを指定するために実装する必要があります。 </p>
    syntax:
      content: public interface ServiceRemotingRequestContext
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_headers
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_message_headers.yml
    name: ServiceRemotingMessageHeaders
    nameWithType: ServiceRemotingMessageHeaders
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
    type: Class
    summary: <p>ServiceRemoting メッセージと共に送信されるヘッダーを指定します。 </p>
    syntax:
      content: public class ServiceRemotingMessageHeaders
  - uid: system.fabric._service_context
    parent: system.fabric
    href: system.fabric._service_context.yml
    name: ServiceContext
    nameWithType: ServiceContext
    fullName: system.fabric.ServiceContext
    type: Class
    summary: <p>下にあるサービスが動作しているサービス コンテキストを表します。 </p>
    syntax:
      content: public class ServiceContext
  - uid: microsoft.servicefabric.actors._actor_message_headers
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_message_headers.yml
    name: ActorMessageHeaders
    nameWithType: ActorMessageHeaders
    fullName: microsoft.servicefabric.actors.ActorMessageHeaders
    type: Class
    summary: <p>アクターのメッセージのヘッダー。 </p>
    syntax:
      content: public class ActorMessageHeaders
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。 インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。 キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。 取り消しを開始するトークンを使用することはできません。 所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。 通知を受信するオブジェクトは、適切な方法で応答できます。 </p>'
    syntax:
      content: public class CancellationToken