### YamlMime:ManagedReference
items:
  - uid: system.fabric._state_replicator
    id: _state_replicator
    parent: system.fabric
    children:
      - system.fabric._state_replicator.getCopyStream()
      - system.fabric._state_replicator.getReplicationStream()
      - 'system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)'
      - system.fabric._state_replicator.updateReplicatorSettings(ReplicatorSettings)
    href: system.fabric._state_replicator.yml
    langs:
      - java
    name: StateReplicator
    nameWithType: StateReplicator
    fullName: system.fabric.StateReplicator
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
      startLine: 7
    package: system.fabric
    summary: <p><span data-ttu-id="29462-101">公開のレプリケーション関連の機能、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>クラスによって使用されている<xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref>を高可用性を保証する状態をレプリケートします。</span><span class="sxs-lookup"><span data-stu-id="29462-101">Exposes replication related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref> to replicate state to ensure high availability.</span></span> </p>
    syntax:
      content: public interface StateReplicator
  - uid: system.fabric._state_replicator.getCopyStream()
    id: getCopyStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    langs:
      - java
    name: getCopyStream()
    nameWithType: StateReplicator.getCopyStream()
    fullName: OperationStream system.fabric.StateReplicator.getCopyStream()
    overload: system.fabric._state_replicator.getCopyStream*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
      startLine: 27
    package: system.fabric
    summary: <p><span data-ttu-id="29462-102">ストリームのコピーを取得します</span><span class="sxs-lookup"><span data-stu-id="29462-102">Gets copy stream</span></span> </p>
    syntax:
      content: public OperationStream getCopyStream()
      return:
        type: system.fabric._operation_stream
        description: '<p><span data-ttu-id="29462-103">返される CopyStream を含む<xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>を実装するオブジェクト<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-103">The returned CopyStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>.</span></span> <span data-ttu-id="29462-104"><xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>オブジェクトが、CopyState から取得した<xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">OperationDataStream</xref>から、プライマリ レプリカを返す<xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">StateProvider #getCopyState(SequenceNumber,OperationDataStream)</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-104">The <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects are obtained from the CopyState <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">OperationDataStream</xref> that the Primary replica returns from <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref>.</span></span> <span data-ttu-id="29462-105">レプリカが作成され、遅延を解消するのには、する必要があります、CopyStream を取得し、送信、適用、および承認を実装するオブジェクトのコピーを開始<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-105">When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>.</span></span> <span data-ttu-id="29462-106">並行して、レプリカは、対応する応答<xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">StateProvider#getCopyContext()</xref>と<xref uid="" data-throw-if-not-resolved="false">OperationDataStream#getNextAsync(CancellationToken)</xref>呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="29462-106">In parallel, the replica responds to the corresponding <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">StateProvider#getCopyContext()</xref> and <xref uid="" data-throw-if-not-resolved="false">OperationDataStream#getNextAsync(CancellationToken)</xref>calls.</span></span> <span data-ttu-id="29462-107">ストリームが空ときに、返された<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>メソッドは null です。</span><span class="sxs-lookup"><span data-stu-id="29462-107">The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null.</span></span> </p>'
  - uid: system.fabric._state_replicator.getReplicationStream()
    id: getReplicationStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    langs:
      - java
    name: getReplicationStream()
    nameWithType: StateReplicator.getReplicationStream()
    fullName: OperationStream system.fabric.StateReplicator.getReplicationStream()
    overload: system.fabric._state_replicator.getReplicationStream*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
      startLine: 34
    package: system.fabric
    summary: <p><span data-ttu-id="29462-108">レプリケーション ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="29462-108">Gets replication stream.</span></span> </p>
    syntax:
      content: public OperationStream getReplicationStream()
      return:
        type: system.fabric._operation_stream
        description: '<p><span data-ttu-id="29462-109">ReplicationStream 実装<xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-109">The ReplicationStream implements <xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>.</span></span> <span data-ttu-id="29462-110">含まれています、ReplicationStream <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>を実装するオブジェクト<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-110">The ReplicationStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>.</span></span> <span data-ttu-id="29462-111">オブジェクトが経由でプライマリ レプリカによって提供される<xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator #replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-111">The objects are provided by the Primary replica via <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator#replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>.</span></span> <span data-ttu-id="29462-112">一般に、セカンダリ レプリカを送信する必要があります<xref uid="" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-112">Generally a Secondary replica should send <xref uid="" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>.</span></span> <span data-ttu-id="29462-113">Service Fabric では、これを行うサービスは必要ありません、一般にサービスがすべて転送<xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>コピーからオブジェクトが最初に、ストリームし、レプリケーション ストリームからの操作を転送します。</span><span class="sxs-lookup"><span data-stu-id="29462-113">Although Service Fabric does not require services to do so, generally services should transfer all <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects out of the copy stream first, and then transfer operations out of the replication stream.</span></span> <span data-ttu-id="29462-114">同時に両方のコピーからの転送がサポートされていますが、増加状態を適用する際の複雑さは正しく更新し、高度なサービスにのみ推奨されます。</span><span class="sxs-lookup"><span data-stu-id="29462-114">The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services.</span></span> <span data-ttu-id="29462-115">ストリームが空ときに、返された<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>メソッドは null です。</span><span class="sxs-lookup"><span data-stu-id="29462-115">The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null.</span></span> </p>'
  - uid: 'system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)'
    id: 'replicateAsync(OperationData,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    langs:
      - java
    name: 'replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<SequenceNumber> system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    overload: system.fabric._state_replicator.replicateAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
      startLine: 16
    package: system.fabric
    summary: <p><span data-ttu-id="29462-116">セカンダリ レプリカにプライマリ レプリカから状態の変更をレプリケートし、それらの状態の変更が適用されているクォーラムの受信確認を受信します。</span><span class="sxs-lookup"><span data-stu-id="29462-116">Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied.</span></span> </p>
    syntax: &ref_1
      content: 'public CompletableFuture<SequenceNumber> replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: operationData
          type: system.fabric._operation_data
          description: <p><span data-ttu-id="29462-117">プライマリ レプリカは、レプリケートする必要がある状態の変化を表します。</span><span class="sxs-lookup"><span data-stu-id="29462-117">Represents the state change that the Primary replica wants to replicate.</span></span> </p>
        - id: sequenceNumber
          type: system.fabric._sequence_number
          description: '<p><span data-ttu-id="29462-118">Long、操作の LSN です。</span><span class="sxs-lookup"><span data-stu-id="29462-118">Long, the LSN of the operation.</span></span> <span data-ttu-id="29462-119">これは、タスクによって返される同じ値であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="29462-119">Note that this is the same value which is returned by the task.</span></span> <span data-ttu-id="29462-120">Out パラメーターとして指定することは、ローカル記録するには、タスクが終了する場合はコミットの準備をするサービスに便利です。</span><span class="sxs-lookup"><span data-stu-id="29462-120">Providing it as an out parameter is useful for services which want to prepare the local write to commit when the task finishes.</span></span> </p>'
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: <p><span data-ttu-id="29462-121">失われているレプリカの書き込みクォーラムです。</span><span class="sxs-lookup"><span data-stu-id="29462-121">A write quorum of replicas that have been lost.</span></span> <span data-ttu-id="29462-122">操作を取り消す必要がある通知を送信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="29462-122">It can be used to send a notification that the operation should be canceled.</span></span> <span data-ttu-id="29462-123">キャンセルが推奨でが取り消された場合でもは、操作を完了も可能性がありますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="29462-123">Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</span></span> </p>
      return:
        type: 9cdf14d0system.fabric._sequence_numbera08ddfce
        description: '<p><span data-ttu-id="29462-124">Completable の将来の long 型で、操作の LSN を返します。</span><span class="sxs-lookup"><span data-stu-id="29462-124">Returns completable future of type long, the LSN of the operation.</span></span> </p>'
  - uid: system.fabric._state_replicator.updateReplicatorSettings(ReplicatorSettings)
    id: updateReplicatorSettings(ReplicatorSettings)
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    langs:
      - java
    name: updateReplicatorSettings(ReplicatorSettings settings)
    nameWithType: StateReplicator.updateReplicatorSettings(ReplicatorSettings settings)
    fullName: void system.fabric.StateReplicator.updateReplicatorSettings(ReplicatorSettings settings)
    overload: system.fabric._state_replicator.updateReplicatorSettings*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
      startLine: 40
    package: system.fabric
    summary: <p><span data-ttu-id="29462-125">実行時に複製物作成会社設定の変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="29462-125">Enables modification of replicator settings during runtime.</span></span> <span data-ttu-id="29462-126">変更できる唯一の設定は、セキュリティ資格情報です。</span><span class="sxs-lookup"><span data-stu-id="29462-126">The only setting which can be modified is the security credentials.</span></span> </p>
    syntax:
      content: public void updateReplicatorSettings(ReplicatorSettings settings)
      parameters:
        - id: settings
          type: system.fabric._replicator_settings
          description: <p><span data-ttu-id="29462-127">新しい<xref uid="system.fabric._replicator_settings" data-throw-if-not-resolved="false">ReplicatorSettings</xref>で資格情報に更新します。</span><span class="sxs-lookup"><span data-stu-id="29462-127">The new <xref uid="system.fabric._replicator_settings" data-throw-if-not-resolved="false">ReplicatorSettings</xref> with updated credentials.</span></span> </p>
references:
  - uid: 9cdf14d0system.fabric._sequence_numbera08ddfce
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: system.fabric._sequence_number
        name: SequenceNumber
        fullName: system.fabric.SequenceNumber
        href: system.fabric._sequence_number.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._state_replicator.replicateAsync*
    name: replicateAsync
    nameWithType: StateReplicator.replicateAsync
    fullName: CompletableFuture<SequenceNumber> system.fabric.StateReplicator.replicateAsync
    package: system.fabric
  - uid: system.fabric._state_replicator.getCopyStream*
    name: getCopyStream
    nameWithType: StateReplicator.getCopyStream
    fullName: OperationStream system.fabric.StateReplicator.getCopyStream
    package: system.fabric
  - uid: system.fabric._state_replicator.getReplicationStream*
    name: getReplicationStream
    nameWithType: StateReplicator.getReplicationStream
    fullName: OperationStream system.fabric.StateReplicator.getReplicationStream
    package: system.fabric
  - uid: system.fabric._state_replicator.updateReplicatorSettings*
    name: updateReplicatorSettings
    nameWithType: StateReplicator.updateReplicatorSettings
    fullName: void system.fabric.StateReplicator.updateReplicatorSettings
    package: system.fabric
  - uid: system.fabric._state_replicator2
    parent: system.fabric
    href: system.fabric._state_replicator2.yml
    name: StateReplicator2
    nameWithType: StateReplicator2
    fullName: system.fabric.StateReplicator2
    type: Interface
    summary: <p><span data-ttu-id="29462-128">レプリケーションに関連する関数を公開、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>クラスによって使用されている<xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref>を高可用性を保証する状態をレプリケートします。</span><span class="sxs-lookup"><span data-stu-id="29462-128">Exposes replication-related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to replicate state to ensure high availability.</span></span> </p>
    syntax:
      content: public interface StateReplicator2
  - uid: system.fabric._sequence_number
    parent: system.fabric
    href: system.fabric._sequence_number.yml
    name: SequenceNumber
    nameWithType: SequenceNumber
    fullName: system.fabric.SequenceNumber
    type: Class
    syntax:
      content: public class SequenceNumber
  - uid: system.fabric._operation_data
    parent: system.fabric
    href: system.fabric._operation_data.yml
    name: OperationData
    nameWithType: OperationData
    fullName: system.fabric.OperationData
    type: Class
    syntax:
      content: public class OperationData
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p><span data-ttu-id="29462-129">A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。</span><span class="sxs-lookup"><span data-stu-id="29462-129">A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled.</span></span> <span data-ttu-id="29462-130">インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="29462-130">You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method.</span></span> <span data-ttu-id="29462-131">キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。</span><span class="sxs-lookup"><span data-stu-id="29462-131">You then pass the cancellation token to any number of operations that should receive notice of cancellation.</span></span> <span data-ttu-id="29462-132">取り消しを開始するトークンを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="29462-132">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="29462-133">所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。</span><span class="sxs-lookup"><span data-stu-id="29462-133">When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true.</span></span> <span data-ttu-id="29462-134">通知を受信するオブジェクトは、適切な方法で応答できます。</span><span class="sxs-lookup"><span data-stu-id="29462-134">The objects that receive the notification can respond in whatever manner is appropriate.</span></span> </p>'
    syntax:
      content: public class CancellationToken
  - uid: system.fabric._operation_stream
    parent: system.fabric
    href: system.fabric._operation_stream.yml
    name: OperationStream
    nameWithType: OperationStream
    fullName: system.fabric.OperationStream
    type: Interface
    syntax:
      content: public interface OperationStream
  - uid: system.fabric._operation
    parent: system.fabric
    href: system.fabric._operation.yml
    name: Operation
    nameWithType: Operation
    fullName: system.fabric.Operation
    type: Interface
    summary: "<p><span data-ttu-id=\"29462-135\">\r\n\r\n  <b>注釈:</b>\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>セカンダリ レプリカに配信される状態の変化を説明する基本インターフェイスです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-135\">\r\n\r\n  <b>Remarks:</b>\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref> is the base interface that describes state changes that are delivered to a Secondary replica.</span></span> <span data-ttu-id=\"29462-136\">含まれている、 <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync (OperationData、SequenceNumber、system.fabric.CancellationToken)</xref>とシーケンス番号およびその他の情報を識別します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-136\">They contain the <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> and the sequence number and other identifying information.</span></span> </p>"
    syntax:
      content: public interface Operation
  - uid: system.fabric._operation_data_stream
    parent: system.fabric
    href: system.fabric._operation_data_stream.yml
    name: OperationDataStream
    nameWithType: OperationDataStream
    fullName: system.fabric.OperationDataStream
    type: Interface
    syntax:
      content: public interface OperationDataStream
  - uid: 'system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: 'getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    nameWithType: 'StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    fullName: 'OperationDataStream system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    type: Method
    summary: "<p><span data-ttu-id=\"29462-137\">プライマリ レプリカのセカンダリ レプリカを作成する必要がある状態を取得します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-137\">Obtains state on a Primary replica that is required to build a Secondary replica.</span></span></p>\n<p><span data-ttu-id=\"29462-138\">\r\n\r\n  <b>注釈:</b>単に<xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref>経由でプライマリ レプリカにコンテキストを送信するセカンダリ レプリカを有効にする<xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>、 <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState (SequenceNumber、OperationDataStream)</xref>により、プライマリ レプリカで応答する、 <xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-138\">\r\n\r\n  <b>Remarks:</b>Just as <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref> enables the Secondary replica to send context to the Primary replica via an <xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>, <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> enables the Primary replica to respond with an <xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>.</span></span> <span data-ttu-id=\"29462-139\">ストリームには使用して、セカンダリ レプリカに配信されるオブジェクトが含まれています、 <xref uid=\"system.fabric._state_replicator.getCopyStream()\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#getCopyStream()</xref>のメソッド、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-139\">The stream contains objects that are delivered to the Secondary replica via the <xref uid=\"system.fabric._state_replicator.getCopyStream()\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#getCopyStream()</xref> method of the <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref> class.</span></span> <span data-ttu-id=\"29462-140\">オブジェクトを実装<xref uid=\"system.fabric._operation\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>指定されたデータが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-140\">The objects implement <xref uid=\"system.fabric._operation\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref> and contain the specified data.</span></span> <span data-ttu-id=\"29462-141\">プライマリ レプリカは、この呼び出しを受け取る、それを作成し、返す別<xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>を格納している<xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-141\">When the Primary replica receives this call, it should create and return another <xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref> that contains <xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>.</span></span> <span data-ttu-id=\"29462-142\"><xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>を表すデータと状態をセカンダリ レプリカ</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-142\"><xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref> represents the data/state that the Secondary replica</span></span> </p>"
    syntax:
      content: 'public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
      parameters:
        - id: upToSequenceNumber
          type: system.fabric._sequence_number
          description: '<p><span data-ttu-id="29462-143">最大最終シーケンス番号 (LSN) を使用してコピー ストリームに配置する必要があります、 <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="29462-143">The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> method.</span></span> <span data-ttu-id="29462-144">この数より大きい Lsn が経由でレプリケーション ストリームの一部として、セカンダリ レプリカに配信される、 <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="29462-144">LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref> method.</span></span> </p>'
        - id: copyContext
          type: system.fabric._operation_data_stream
          description: <p><span data-ttu-id="29462-145"><xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">System.fabric.OperationDataStream</xref>を格納している、 <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>セカンダリ レプリカによって作成されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="29462-145">An <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> that contains the <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects that are created by the Secondary replica.</span></span> <span data-ttu-id="29462-146">指定された遅延を解消する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29462-146">requires to catch up to the provided</span></span> </p>
      return:
        type: system.fabric._operation_data_stream
        description: <p><span data-ttu-id="29462-147">返します<xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-147">Returns <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>.</span></span> </p>
  - uid: system.fabric._state_provider.getCopyContext()
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: getCopyContext()
    nameWithType: StateProvider.getCopyContext()
    fullName: OperationDataStream system.fabric.StateProvider.getCopyContext()
    type: Method
    summary: "<p><span data-ttu-id=\"29462-148\">作成され、プライマリ レプリカにコンテキストを送信する開かれた後は、セカンダリ レプリカ上のコンテキストを取得します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-148\">Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</span></span></p>\n<p><span data-ttu-id=\"29462-149\">\r\n\r\n  <b>注釈:</b>、プライマリ レプリカが、コンテキストを分析しを使用して状態を返送<xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState (SequenceNumber、OperationDataStream)</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-149\">\r\n\r\n  <b>Remarks:</b>The Primary replica analyzes the context and sends back state via <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> .</span></span> <span data-ttu-id=\"29462-150\"><xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref>が新しく作成された、アイドル状態のセカンダリ レプリカで呼び出され、プライマリ レプリカとの双方向メッセージ交換を非同期的に確立するためのメカニズムを提供します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-150\"><xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica.</span></span> <span data-ttu-id=\"29462-151\">セカンダリ レプリカは、送信<xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>オブジェクトをプライマリ レプリカがセカンダリ レプリカでコンテキストを収集する場合の進行状況を判断できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-151\">The Secondary replica sends <xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica.</span></span> <span data-ttu-id=\"29462-152\">プライマリ レプリカは、必要な状態に戻すを送信して応答します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-152\">The Primary replica responds by sending the required state back.</span></span> <span data-ttu-id=\"29462-153\">参照してください<xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState (SequenceNumber、OperationDataStream)</xref>交換の一方のプライマリ レプリカにします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-153\">See <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> at the Primary replica for the other half of the exchange.</span></span> <span data-ttu-id=\"29462-154\">メモリ内のサービスでは、 <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref>メソッドは呼び出されません、セカンダリ レプリカの状態は認識されている (空され、状態のすべてが必要)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-154\">For in-memory services, the <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state).</span></span> </p>"
    syntax:
      content: public OperationDataStream getCopyContext()
      return:
        type: system.fabric._operation_data_stream
        description: <p><span data-ttu-id="29462-155">返します<xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-155">Returns <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>.</span></span> </p>
  - uid: 'system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: 'replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<SequenceNumber> system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: <p><span data-ttu-id="29462-156">セカンダリ レプリカにプライマリ レプリカから状態の変更をレプリケートし、それらの状態の変更が適用されているクォーラムの受信確認を受信します。</span><span class="sxs-lookup"><span data-stu-id="29462-156">Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied.</span></span> </p>
    syntax: *ref_1
  - uid: system.fabric._replicator_settings
    parent: system.fabric
    href: system.fabric._replicator_settings.yml
    name: ReplicatorSettings
    nameWithType: ReplicatorSettings
    fullName: system.fabric.ReplicatorSettings
    type: Class
    syntax:
      content: public class ReplicatorSettings
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p><span data-ttu-id=\"29462-157\">高可用性と信頼性のレプリケート状態です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-157\">Replicates state for high availability and reliability.</span></span> </p>\n<p><span data-ttu-id=\"29462-158\">\r\n\r\n  <b>注釈:</b>の既定の実装を提供、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>、 <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>、および<xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator</xref>インターフェイスの実装と共に、ユーザーのサービスが使用できる、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>インターフェイスです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-158\">\r\n\r\n  <b>Remarks:</b>Provides the default implementation of the <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>, <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>, and <xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator</xref> interfaces, which user services can use, along with their implementation of the <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref> interface.</span></span> <span data-ttu-id=\"29462-159\">インスタンス、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスが経由で取得した、 <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator (system.fabric.StateProvider、system.fabric.ReplicatorSettings)</xref>メソッドにキャストできる<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"29462-159\">An instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref> class is obtained via the <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)</xref> method, which can be cast to <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref> for use.</span></span> </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: <p><span data-ttu-id="29462-160">サービスが対話するために実装する必要がありますの動作を定義、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>です。</span><span class="sxs-lookup"><span data-stu-id="29462-160">Defines the behavior that a service must implement to interact with the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>.</span></span> </p>
    syntax:
      content: public interface StateProvider