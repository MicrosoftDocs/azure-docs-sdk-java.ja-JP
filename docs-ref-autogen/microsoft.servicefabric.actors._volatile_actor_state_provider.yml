### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider
    id: _volatile_actor_state_provider
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._volatile_actor_state_provider.abort()
      - microsoft.servicefabric.actors._volatile_actor_state_provider.actorActivatedAsync(ActorId)
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync(BackupOption,Duration,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.changeRoleAsync(ReplicaRole,CancellationToken)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.closeAsync(CancellationToken)
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.containsStateAsync(ActorId,String)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.currentReplicaRole()
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.deleteReminderAsync(ActorId,String)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.enumerateStateNamesAsync(ActorId)
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.getActorsAsync(int,ContinuationToken)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyContext()
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyState(SequenceNumber,OperationDataStream)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.getLastCommittedSequenceNumber()
      - microsoft.servicefabric.actors._volatile_actor_state_provider.initialize(ActorTypeInformation)
      - microsoft.servicefabric.actors._volatile_actor_state_provider.initialize(StatefulServiceInitializationParameters)
      - microsoft.servicefabric.actors._volatile_actor_state_provider.loadRemindersAsync(CancellationToken)
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.loadStateAsync(ActorId,String)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.onDataLossAsync(CancellationToken)
      - microsoft.servicefabric.actors._volatile_actor_state_provider.onSnapshotAsync(Duration)
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.removeActorAsync(ActorId)
      - microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync(String)
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync(String,RestorePolicy)'
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.saveReminderAsync(ActorId,ActorReminder)'
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>)'
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.traceId()
      - microsoft.servicefabric.actors._volatile_actor_state_provider.traceType()
      - microsoft.servicefabric.actors._volatile_actor_state_provider.transientErrorRetryDelay()
      - 'microsoft.servicefabric.actors._volatile_actor_state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
      - microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider()
      - microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider(ReplicatorSettings)
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: VolatileActorStateProvider
    nameWithType: VolatileActorStateProvider
    fullName: microsoft.servicefabric.actors.VolatileActorStateProvider
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 60
    package: microsoft.servicefabric.actors
    summary: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_state_provider\" data-throw-if-not-resolved=\"false\">ActorStateProvider</xref>揮発性の永続化つまりの実装 <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>状態が保持されるメモリ内のみです。 </p>"
    syntax: &ref_1
      content: 'public class VolatileActorStateProvider implements ActorStateProvider,StateProvider'
    inheritance:
      - java.lang.Object
      - microsoft.servicefabric.data._state_provider_replica
      - microsoft.servicefabric.actors._actor_state_provider
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.abort()
    id: abort()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: abort()
    nameWithType: VolatileActorStateProvider.abort()
    fullName: void microsoft.servicefabric.actors.VolatileActorStateProvider.abort()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.abort*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 244
    package: microsoft.servicefabric.actors
    summary: "<p>状態プロバイダーのレプリカを強制的に中止します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>この通常ノードで、永続的な障害が検出されたときにエラーまたは発生 Service Fabric は、内部エラーのため、レプリカのライフ サイクルを確実に管理できません。 </p>"
    syntax:
      content: public void abort()
    overridden: microsoft.servicefabric.data._state_provider_replica.abort()
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.actorActivatedAsync(ActorId)
    id: actorActivatedAsync(ActorId)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: actorActivatedAsync(ActorId actorId)
    nameWithType: VolatileActorStateProvider.actorActivatedAsync(ActorId actorId)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.actorActivatedAsync(ActorId actorId)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.actorActivatedAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 548
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定した id に置き換えます。 アクターのライセンス認証プロセスの一部としてこのメソッドが呼び出されます</p>
      <p></p>
    syntax:
      content: public CompletableFuture<?> actorActivatedAsync(ActorId actorId)
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクティブ化したアクターの id です。 </p>
      return:
        type: 16409f84
        description: <p>表す非同期のタスク<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>アクティブ化通知の処理です。 </p>
    overridden: microsoft.servicefabric.actors._actor_state_provider.actorActivatedAsync(ActorId)
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync(BackupOption,Duration,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    id: 'backupAsync(BackupOption,Duration,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    nameWithType: 'VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 282
    package: microsoft.servicefabric.actors
    summary: "<p>このアクター状態プロバイダーによって管理されている状態の完全バックアップを実行します</p>\n<p>\r\n\r\n  <b>注釈:</b>でバックアップ/復元がサポートされていない<xref uid=\"microsoft.servicefabric.actors._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>です。 </p>"
    syntax:
      content: 'public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
      parameters:
        - id: option
          type: microsoft.servicefabric.data._backup_option
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.data._backup_option\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.data.BackupOption</xref>コールバックの </p>"
        - id: timeout
          type: e02a2de0
          description: "<p>\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.time.Duration</xref>バックアップのタイムアウトを説明します。 </p>"
        - id: backupCallback
          type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
          description: <p>バックアップ フォルダーがローカルで作成された、ノード外に移動する準備ができているときに呼び出される BackupCallbackCallback です。 </p>
      return:
        type: 16409f84
        description: <p>非同期のバックアップ操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.data._state_provider_replica.backupAsync(BackupOption,Duration,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    exceptions:
      - type: b1c38b44
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    id: 'backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    nameWithType: 'VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 260
    package: microsoft.servicefabric.actors
    summary: "<p>このアクター状態プロバイダーによって管理されている状態の完全バックアップを実行します</p>\n<p>\r\n\r\n  <b>注釈:</b>でバックアップ/復元がサポートされていない<xref uid=\"microsoft.servicefabric.actors._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>です。 </p>"
    syntax:
      content: 'public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
      parameters:
        - id: backupCallback
          type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
          description: <p>バックアップ フォルダーがローカルで作成された、ノード外に移動する準備ができているときに呼び出される BackupCallbackCallback です。 </p>
      return:
        type: 16409f84
        description: <p>非同期のバックアップ操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.data._state_provider_replica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    exceptions:
      - type: b1c38b44
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.changeRoleAsync(ReplicaRole,CancellationToken)'
    id: 'changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'VolatileActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.changeRoleAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 180
    package: microsoft.servicefabric.actors
    summary: |-
      <p>そのロールが変更される、たとえばプライマリまたはセカンダリに、状態プロバイダーのレプリカを通知します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>新しい<xref uid="" data-throw-if-not-resolved="false">ReplicaRole</xref>、プライマリまたはセカンダリなどです。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>非同期の変更の役割の操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.data._state_provider_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.closeAsync(CancellationToken)
    id: closeAsync(CancellationToken)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: VolatileActorStateProvider.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.closeAsync(CancellationToken cancellationToken)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.closeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 231
    package: microsoft.servicefabric.actors
    summary: "<p>状態プロバイダーの複製が正常にクローズします。</p>\n<p>\r\n\r\n  <b>注釈:</b>これは、レプリカのコードにアップグレードされている、負荷分散のため、レプリカの移動または一時的なエラーが検出された場合に通常に発生します。 </p>"
    syntax:
      content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>非同期の close 操作を表すタスク。 </p>
    overridden: microsoft.servicefabric.data._state_provider_replica.closeAsync(CancellationToken)
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.containsStateAsync(ActorId,String)'
    id: 'containsStateAsync(ActorId,String)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'containsStateAsync(ActorId actorId, String stateName)'
    nameWithType: 'VolatileActorStateProvider.containsStateAsync(ActorId actorId, String stateName)'
    fullName: 'CompletableFuture<Boolean> microsoft.servicefabric.actors.VolatileActorStateProvider.containsStateAsync(ActorId actorId, String stateName)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.containsStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 655
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター状態プロバイダーに指定した状態の名前を持つ、アクター状態が含まれているかどうかをチェックします。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態の有無を確認する対象のアクターの ID です。 </p>
        - id: stateName
          type: '26831127'
          description: <p>有無を確認するアクター状態の名前です。 </p>
      return:
        type: 7e53ac82
        description: <p>非同期チェック操作を表すタスク。 TResult パラメーターの値は、指定した名前の状態には、それ以外の場合の false が存在する場合は true です。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_state_provider.containsStateAsync(ActorId,String)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.currentReplicaRole()
    id: currentReplicaRole()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: currentReplicaRole()
    nameWithType: VolatileActorStateProvider.currentReplicaRole()
    fullName: ReplicaRole microsoft.servicefabric.actors.VolatileActorStateProvider.currentReplicaRole()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.currentReplicaRole*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 837
    package: microsoft.servicefabric.actors
    syntax:
      content: public ReplicaRole currentReplicaRole()
      return:
        type: system.fabric._replica_role
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.deleteReminderAsync(ActorId,String)'
    id: 'deleteReminderAsync(ActorId,String)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'deleteReminderAsync(ActorId actorId, String reminderName)'
    nameWithType: 'VolatileActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.deleteReminderAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 800
    package: microsoft.servicefabric.actors
    summary: |-
      <p>存在する場合は、指定されたアクター アラームを削除します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アラームを削除するアクターの ID です。 </p>
        - id: reminderName
          type: '26831127'
          description: <p>削除するアラームの名前です。 </p>
      return:
        type: 16409f84
        description: <p>非同期の削除操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_state_provider.deleteReminderAsync(ActorId,String)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.enumerateStateNamesAsync(ActorId)
    id: enumerateStateNamesAsync(ActorId)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: enumerateStateNamesAsync(ActorId actorId)
    nameWithType: VolatileActorStateProvider.enumerateStateNamesAsync(ActorId actorId)
    fullName: CompletableFuture<List<String>> microsoft.servicefabric.actors.VolatileActorStateProvider.enumerateStateNamesAsync(ActorId actorId)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.enumerateStateNamesAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 726
    package: microsoft.servicefabric.actors
    summary: "<p>指定されたアクターに関連付けられているすべての状態名の列挙可能なが作成されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>アクター状態プロバイダーから返された列挙子に安全に読み取りと同時に使用し、状態プロバイダーに書き込みます。 状態プロバイダーのスナップショットの一貫したビューを表します。 </p>"
    syntax:
      content: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId)
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>列挙可能なを作成する対象のアクターの ID です。 </p>
      return:
        type: d20512af
        description: <p>非同期の列挙操作を表すタスク。 TResult パラメーターの値は、指定されたアクターに関連付けられているすべての州名の列挙です。 </p>
    overridden: microsoft.servicefabric.actors._actor_state_provider.enumerateStateNamesAsync(ActorId)
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.getActorsAsync(int,ContinuationToken)'
    id: 'getActorsAsync(int,ContinuationToken)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'getActorsAsync(int itemsCount, ContinuationToken continuationToken)'
    nameWithType: 'VolatileActorStateProvider.getActorsAsync(int itemsCount, ContinuationToken continuationToken)'
    fullName: 'CompletableFuture<PagedResult<ActorId>> microsoft.servicefabric.actors.VolatileActorStateProvider.getActorsAsync(int itemsCount, ContinuationToken continuationToken)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.getActorsAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 760
    package: microsoft.servicefabric.actors
    summary: "<p>状態プロバイダーから ActorIds を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b> </p>"
    syntax:
      content: 'public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int itemsCount, ContinuationToken continuationToken)'
      parameters:
        - id: itemsCount
          type: f75371fa
          description: <p>返される要求された項目の数。 </p>
        - id: continuationToken
          type: microsoft.servicefabric.actors._continuation_token
          description: <p>クエリから結果を開始する継続トークンです。 継続トークンの null 値は、開始、先頭の値の形式を返すことを意味します。 </p>
      return:
        type: 9cdf14d0microsoft.servicefabric.actors._paged_result78504a52microsoft.servicefabric.actors._actor_ide7daa122
        description: <p>サーバーへの呼び出しの非同期操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_state_provider.getActorsAsync(int,ContinuationToken)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyContext()
    id: getCopyContext()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: getCopyContext()
    nameWithType: VolatileActorStateProvider.getCopyContext()
    fullName: OperationDataStream microsoft.servicefabric.actors.VolatileActorStateProvider.getCopyContext()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyContext*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 462
    package: microsoft.servicefabric.actors
    summary: "<p>作成され、プライマリ レプリカにコンテキストを送信する開かれた後は、セカンダリ レプリカ上のコンテキストを取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>、プライマリ レプリカが、コンテキストを分析しを使用して状態を返送<xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">StateProvider #getCopyState(SequenceNumber, OperationDataStream)</xref>です。 <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyContext()</xref>が新しく作成された、アイドル状態のセカンダリ レプリカで呼び出され、プライマリ レプリカとの双方向メッセージ交換を非同期的に確立するためのメカニズムを提供します。 セカンダリ レプリカは、送信<xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationData</xref>オブジェクトをプライマリ レプリカがセカンダリ レプリカでコンテキストを収集する場合の進行状況を判断できます。 プライマリ レプリカは、必要な状態に戻すを送信して応答します。 参照してください<xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">StateProvider #getCopyState(SequenceNumber, OperationDataStream)</xref>交換の一方のプライマリ レプリカにします。 メモリ内のサービスでは、 <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyContext()</xref>メソッドは呼び出されません、セカンダリ レプリカの状態は認識されている (空され、状態のすべてが必要)。 </p>"
    syntax:
      content: public OperationDataStream getCopyContext()
      return:
        type: system.fabric._operation_data_stream
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">OperationDataStream</xref>です。 </p>
    overridden: system.fabric._state_provider.getCopyContext()
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    id: 'getCopyState(SequenceNumber,OperationDataStream)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    nameWithType: 'VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    fullName: 'OperationDataStream microsoft.servicefabric.actors.VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyState*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 496
    package: microsoft.servicefabric.actors
    summary: "<p>プライマリ レプリカのセカンダリ レプリカを作成する必要がある状態を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>単に<xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyContext()</xref>経由でプライマリ レプリカにコンテキストを送信するセカンダリ レプリカを有効にする<xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationDataStream</xref>、 <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">StateProvider #getCopyState(SequenceNumber, OperationDataStream)</xref>により、プライマリ レプリカで応答する、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationDataStream</xref>です。 ストリームには使用して、セカンダリ レプリカに配信されるオブジェクトが含まれています、 <xref uid=\"system.fabric._state_replicator.getCopyStream()\" data-throw-if-not-resolved=\"false\">StateReplicator#getCopyStream()</xref>のメソッド、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">FabricReplicator</xref>クラスです。 オブジェクトを実装<xref uid=\"\" data-throw-if-not-resolved=\"false\">操作</xref>し、指定されたデータが含まれています。 プライマリ レプリカは、この呼び出しを受け取る、それを作成し、返す別<xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationDataStream</xref>を格納している<xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationData</xref>です。 <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationData</xref>を表すデータと状態をセカンダリ レプリカ </p>"
    syntax:
      content: 'public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
      parameters:
        - id: upToSequenceNumber
          type: system.fabric._sequence_number
          description: '<p>最大最終シーケンス番号 (LSN) を使用してコピー ストリームに配置する必要があります、 <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">StateReplicator#getCopyStream()</xref>メソッドです。 この数より大きい Lsn が経由でレプリケーション ストリームの一部として、セカンダリ レプリカに配信される、 <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">StateReplicator#getReplicationStream()</xref>メソッドです。 </p>'
        - id: copyContext
          type: system.fabric._operation_data_stream
          description: <p><xref uid="" data-throw-if-not-resolved="false">OperationDataStream</xref>を格納している、 <xref uid="" data-throw-if-not-resolved="false">OperationData</xref>セカンダリ レプリカによって作成されるオブジェクト。 指定された遅延を解消する必要があります。 </p>
      return:
        type: system.fabric._operation_data_stream
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">OperationDataStream</xref>です。 </p>
    overridden: 'system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    exceptions:
      - type: 12fe80de
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getLastCommittedSequenceNumber()
    id: getLastCommittedSequenceNumber()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: getLastCommittedSequenceNumber()
    nameWithType: VolatileActorStateProvider.getLastCommittedSequenceNumber()
    fullName: long microsoft.servicefabric.actors.VolatileActorStateProvider.getLastCommittedSequenceNumber()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.getLastCommittedSequenceNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 364
    package: microsoft.servicefabric.actors
    summary: "<p>サービスがコミットされた最後のシーケンス番号を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>データの損失が疑われると、最初の起動時に、永続的な状態がある場合に、サービスでこのメソッドが呼び出されます。 ステートフル サービス レプリカ起動すると、以前の更新から可能性がありますが保存されるデータを復元するオプションがあります。 このようないくつかの状態に復元するか、現在の進行状況がそのデータの最後に書き込まれたシーケンス番号です。 揮発性サービスは、単に 0 を返します。 によって現在コミット進行状況がわかるため、フェールオーバー中に新しいプライマリ選択を判断するこのメソッドは、メモと呼ばれる、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">FabricReplicator</xref>その時点でクラスです。 </p>"
    syntax:
      content: public long getLastCommittedSequenceNumber()
      return:
        type: 0364520f
        description: <p>長さを返します。 </p>
    overridden: system.fabric._state_provider.getLastCommittedSequenceNumber()
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.initialize(ActorTypeInformation)
    id: initialize(ActorTypeInformation)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: initialize(ActorTypeInformation actorTypeInformation)
    nameWithType: VolatileActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
    fullName: void microsoft.servicefabric.actors.VolatileActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.initialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 536
    package: microsoft.servicefabric.actors
    summary: |-
      <p>関連付けられているアクター型の型情報を使用してアクター状態プロバイダーを初期化します。</p>
      <p></p>
    syntax:
      content: public void initialize(ActorTypeInformation actorTypeInformation)
      parameters:
        - id: actorTypeInformation
          type: microsoft.servicefabric.actors._actor_type_information
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_type_information\" data-throw-if-not-resolved=\"false\">ActorTypeInformation</xref>アクター クラスの情報を入力します。 </p>"
    overridden: microsoft.servicefabric.actors._actor_state_provider.initialize(ActorTypeInformation)
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.initialize(StatefulServiceInitializationParameters)
    id: initialize(StatefulServiceInitializationParameters)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void microsoft.servicefabric.actors.VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.initialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 130
    package: microsoft.servicefabric.actors
    summary: "<p>サービスの初期化情報を使用して、状態プロバイダーのレプリカを初期化します。</p>\n<p>\r\n\r\n  <b>注釈:</b>初期化中に複雑な処理を行う必要はありません。 OpenAsync では、高価なまたは実行時間の長いの初期化を行う必要があります。 </p>"
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: "<p>\r\n\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">StatefulServiceInitializationParameters</xref>サービス名、パーティション id、レプリカの id、およびコード パッケージ情報などです。 </p>"
    overridden: microsoft.servicefabric.data._state_provider_replica.initialize(StatefulServiceInitializationParameters)
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.loadRemindersAsync(CancellationToken)
    id: loadRemindersAsync(CancellationToken)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: loadRemindersAsync(CancellationToken cancellationToken)
    nameWithType: VolatileActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<ActorReminderCollection> microsoft.servicefabric.actors.VolatileActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.loadRemindersAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 818
    package: microsoft.servicefabric.actors
    summary: |-
      <p>アクター状態プロバイダーに含まれているすべてのアラームを読み込みます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0microsoft.servicefabric.actors._actor_reminder_collectiona08ddfce
        description: <p>非同期ロード操作を表すタスク。 TResult パラメーターの値は、アクター状態プロバイダーに含まれているすべてのアクター アラームのコレクションです。 </p>
    overridden: microsoft.servicefabric.actors._actor_state_provider.loadRemindersAsync(CancellationToken)
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.loadStateAsync(ActorId,String)'
    id: 'loadStateAsync(ActorId,String)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'loadStateAsync(ActorId actorId, String stateName)'
    nameWithType: 'VolatileActorStateProvider.loadStateAsync(ActorId actorId, String stateName)'
    fullName: 'public<T> CompletableFuture<T> microsoft.servicefabric.actors.VolatileActorStateProvider.loadStateAsync(ActorId actorId, String stateName)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.loadStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 575
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定された状態の名前に関連付けられているアクターの状態を読み込みます。</p>
      <p></p>
    syntax:
      content: 'public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクティブ化したアクターの id です。 </p>
        - id: stateName
          type: '26831127'
          description: <p>StateName です。 </p>
      return:
        type: 6d056e8b
        description: <p>非同期ロード操作を表すタスク。 TResult のパラメーターの値には、特定の状態名に関連付けられているアクター状態の値が含まれています。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_state_provider.loadStateAsync(ActorId,String)'
    exceptions:
      - type: c27a23df
        description: <p>場合<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>状態名が存在しないに関連付けられた状態を指定します。 </p>
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.onDataLossAsync(CancellationToken)
    id: onDataLossAsync(CancellationToken)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: onDataLossAsync(CancellationToken cancellationToken)
    nameWithType: VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Boolean> microsoft.servicefabric.actors.VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.onDataLossAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 437
    package: microsoft.servicefabric.actors
    summary: "<p>このレプリカ セット内のレプリカのな書き込みクォーラムが失われていることと、そのためデータが失われる可能性がありますが発生したことを示します。 レプリカ セットは、プライマリ レプリカが含まれているレプリカの大部分で構成されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>Service Fabric ランタイムが、プライマリ レプリカが含まれており、レプリカのクォーラムの障害に従っていることが新しいプライマリ レプリカとすぐに、新しいプライマリ レプリカでこのメソッドを呼び出します。 データ損失の可能性が通知をプライマリ レプリカは、外部データ ソースからの状態を復元することもできます。 またはが現在の状態で実行を続行できます。 サービスが、現在の状態で実行され続ける場合は、状態の変更が行われていないことを示す、このメソッドから false を返します。 復元または不完全な作業は、ロールバックなどの状態を変更した場合は true を返します。 True が返される場合はその他のレプリカの状態が不適切な想定されます。 そのため、Service Fabric ランタイムでは、レプリカ セットから他のレプリカを削除し、それらを再作成します。 </p>"
    syntax:
      content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 7e53ac82
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref>型の<xref uid="" data-throw-if-not-resolved="false">java.lang.Boolean</xref>状態が変更されたかどうかを示すです。 メソッドが true を返します、変更されたときまたは変更されていない場合、false が返されます。 </p>
    overridden: system.fabric._state_provider.onDataLossAsync(CancellationToken)
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.onSnapshotAsync(Duration)
    id: onSnapshotAsync(Duration)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: onSnapshotAsync(Duration currentLogicalTime)
    nameWithType: VolatileActorStateProvider.onSnapshotAsync(Duration currentLogicalTime)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.onSnapshotAsync(Duration currentLogicalTime)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.onSnapshotAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 339
    package: microsoft.servicefabric.actors
    syntax:
      content: public CompletableFuture<?> onSnapshotAsync(Duration currentLogicalTime)
      parameters:
        - id: currentLogicalTime
          type: e02a2de0
      return:
        type: 16409f84
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    id: 'openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'VolatileActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> microsoft.servicefabric.actors.VolatileActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.openAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 155
    package: microsoft.servicefabric.actors
    summary: "<p>使用するため、状態プロバイダーのレプリカを開きます。</p>\n<p>\r\n\r\n  <b>注釈:</b>拡張状態プロバイダーの初期化タスクを開始できます。 </p>"
    syntax:
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p><xref uid="" data-throw-if-not-resolved="false">ReplicaOpenMode</xref>これは、新規または既存のレプリカであるかどうかを示すです。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p><xref uid="" data-throw-if-not-resolved="false">StatefulServicePartition</xref>レプリカが属しているパーティション。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: <p>非同期の open 操作を表すタスク。 結果には、パーティション内の他の状態プロバイダーのレプリカ間で状態のレプリケーションを担当するレプリケーターが含まれています。 </p>
    overridden: 'microsoft.servicefabric.data._state_provider_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.removeActorAsync(ActorId)
    id: removeActorAsync(ActorId)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: removeActorAsync(ActorId actorId)
    nameWithType: VolatileActorStateProvider.removeActorAsync(ActorId actorId)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.removeActorAsync(ActorId actorId)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.removeActorAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 675
    package: microsoft.servicefabric.actors
    summary: |-
      <p>すべての既存の状態と指定されたアクターにアトミックに関連付けられている通知を削除します。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<?> removeActorAsync(ActorId actorId)
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態を削除するアクターの ID です。 </p>
      return:
        type: 16409f84
        description: <p>非同期の削除操作を表すタスク。 </p>
    overridden: microsoft.servicefabric.actors._actor_state_provider.removeActorAsync(ActorId)
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync(String)
    id: restoreAsync(String)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: restoreAsync(String backupFolderPath)
    nameWithType: VolatileActorStateProvider.restoreAsync(String backupFolderPath)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.restoreAsync(String backupFolderPath)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 305
    package: microsoft.servicefabric.actors
    summary: '<p>によって作成されたバックアップを復元<xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.data.StateProviderReplica#backupAsync(BiFunction)</xref>または<xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.data.StateProviderReplica#backupAsync (BackupOption、期間、BiFunction)</xref><b>解説:</b>でバックアップ/復元がサポートされていない<xref uid="microsoft.servicefabric.actors._volatile_actor_state_provider" data-throw-if-not-resolved="false">VolatileActorStateProvider</xref>です。 </p>'
    syntax:
      content: public CompletableFuture<?> restoreAsync(String backupFolderPath)
      parameters:
        - id: backupFolderPath
          type: '26831127'
          description: <p>レプリカを復元するがディレクトリです。 </p>
      return:
        type: 16409f84
        description: <p>非同期の復元操作を表すタスク。 </p>
    overridden: microsoft.servicefabric.data._state_provider_replica.restoreAsync(String)
    exceptions:
      - type: b1c38b44
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync(String,RestorePolicy)'
    id: 'restoreAsync(String,RestorePolicy)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
    nameWithType: 'VolatileActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 327
    package: microsoft.servicefabric.actors
    summary: '<p>によって作成されたバックアップを復元<xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.data.StateProviderReplica#backupAsync(BiFunction)</xref>または<xref uid="" data-throw-if-not-resolved="false">microsoft.servicefabric.data.StateProviderReplica#backupAsync (BackupOption、期間、BiFunction)</xref><b>解説:</b>でバックアップ/復元がサポートされていない<xref uid="microsoft.servicefabric.actors._volatile_actor_state_provider" data-throw-if-not-resolved="false">VolatileActorStateProvider</xref>です。 </p>'
    syntax:
      content: 'public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
      parameters:
        - id: backupFolderPath
          type: '26831127'
          description: <p>レプリカを復元するがディレクトリです。 </p>
        - id: restorePolicy
          type: microsoft.servicefabric.data._restore_policy
          description: <p><xref uid="" data-throw-if-not-resolved="false">RestorePolicy</xref>です。 </p>
      return:
        type: 16409f84
        description: <p>非同期の復元操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.data._state_provider_replica.restoreAsync(String,RestorePolicy)'
    exceptions:
      - type: b1c38b44
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.saveReminderAsync(ActorId,ActorReminder)'
    id: 'saveReminderAsync(ActorId,ActorReminder)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'saveReminderAsync(ActorId actorId, ActorReminder reminder)'
    nameWithType: 'VolatileActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.saveReminderAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 781
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定されたアクター アラームを保存します。 指定した名前のアクター アラームが存在しない場合は、それ以外の場合と同じ名前のアクター アラームを既存のアクター アラームが更新を追加します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アラームを保存する対象のアクターの ID です。 </p>
        - id: reminder
          type: microsoft.servicefabric.actors._actor_reminder
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>アラームを保存します。 </p>"
      return:
        type: 16409f84
        description: <p>非同期の保存操作を表すタスク。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_state_provider.saveReminderAsync(ActorId,ActorReminder)'
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>)'
    id: 'saveStateAsync(ActorId,List<ActorStateChange>)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
    nameWithType: 'VolatileActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.saveStateAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 610
    package: microsoft.servicefabric.actors
    summary: |-
      <p>指定したアクター状態の変更のセットをアトミックに保存します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態の変更を保存する対象のアクターの ID です。 </p>
        - id: stateChanges
          type: 5618da2dmicrosoft.servicefabric.actors._actor_state_changea08ddfce
          description: <p>状態の変更を保存するコレクション。 </p>
      return:
        type: 16409f84
        description: <p>非同期の保存操作を表すタスク。 状態変更のコレクションには、指定された状態の名前の 1 つの項目を含める必要があります。 保存先に既に存在するか、存在しないアクター状態の更新/削除するアクターの状態を追加しようとしています。 操作は失敗します。 </p>
    overridden: 'microsoft.servicefabric.actors._actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>)'
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)'
    id: 'setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
    nameWithType: 'VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
    fullName: 'void microsoft.servicefabric.actors.VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.setOnDataLossCallback*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 333
    package: microsoft.servicefabric.actors
    summary: |-
      <p>疑いのあるデータ損失の可能性の中に呼び出される関数</p>
      <p></p>
    syntax:
      content: 'public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
      parameters:
        - id: onDataLossAsync
          type: 432ffe41system.fabric._cancellation_token774bd4f0
          description: <p>TODO です。 疑いのあるデータ損失の処理の一部として呼び出される関数。 関数は、CancellationToken にし、イベントの非同期処理を表す CompletableFuture を返します。 True を返すには、レプリカの状態が復元されていることを示します。 False は、レプリカの状態が変更されていないことを示します。 </p>
    overridden: 'microsoft.servicefabric.data._state_provider_replica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.traceId()
    id: traceId()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: traceId()
    nameWithType: VolatileActorStateProvider.traceId()
    fullName: String microsoft.servicefabric.actors.VolatileActorStateProvider.traceId()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.traceId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 832
    package: microsoft.servicefabric.actors
    syntax:
      content: public String traceId()
      return:
        type: '26831127'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.traceType()
    id: traceType()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: traceType()
    nameWithType: VolatileActorStateProvider.traceType()
    fullName: String microsoft.servicefabric.actors.VolatileActorStateProvider.traceType()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.traceType*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 827
    package: microsoft.servicefabric.actors
    syntax:
      content: public String traceType()
      return:
        type: '26831127'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.transientErrorRetryDelay()
    id: transientErrorRetryDelay()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: transientErrorRetryDelay()
    nameWithType: VolatileActorStateProvider.transientErrorRetryDelay()
    fullName: Duration microsoft.servicefabric.actors.VolatileActorStateProvider.transientErrorRetryDelay()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.transientErrorRetryDelay*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 842
    package: microsoft.servicefabric.actors
    syntax:
      content: public Duration transientErrorRetryDelay()
      return:
        type: e02a2de0
  - uid: 'microsoft.servicefabric.actors._volatile_actor_state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    id: 'updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: 'updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.updateEpochAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 404
    package: microsoft.servicefabric.actors
    summary: "<p>レプリカ セットの構成が変更の理由で変更または、プライマリ レプリカへの変更をしようとしましたが、レプリカを示します。 変更は、エラーまたは以前のプライマリ レプリカの負荷分散のために発生します。 エポックの変更は、特定のプライマリ レプリカによって送信された実際の構成の期間に操作を分割することによって、バリアとして機能します。</p>\n<p>\r\n\r\n  <b>注釈:</b>レプリカ セットのプライマリ レプリカが変更されているか、変更が試みられたために、このメソッドが呼び出されます。 セカンダリ レプリカは、新しいプライマリ レプリカになるとしているか、間違っている場合、新しいプライマリ レプリカにこのメソッドを受信、発生したレプリケーション ストリームから新しいプライマリ レプリカから最初の操作を取得しようとするときにします。 プライマリ レプリカでは、試行が失敗した、プライマリ レプリカをスワップする場合は、このメソッドを受け取ることがあります。 内の情報、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">StateProvider #updateEpochAsync(Epoch, SequenceNumber, CancellationToken)</xref>メソッドは、レプリカが受信した各エポックの一覧で、進行状況のベクトルを維持するためにサービスを有効にし、含まれていた最大の LSN です。 現在適用されている最大の LSN と進行状況のベクター データは、セカンダリ レプリカをどのように操作の進行を記述するコピー操作中に送信するのに便利です。 コピー操作中に、セカンダリ レプリカから受信した進行状況のベクトルを比較するには、セカンダリ レプリカが最新かどうか、どの状態は、セカンダリ レプリカに送信する必要があり、セカンダリ レプリカが false の進行状況を行われたかどうかを判断するプライマリ レプリカが有効にします。 False の進行状況は、以前のエポックの LSN が、プライマリ レプリカを受信する LSN よりも大きいことを意味します。 </p>"
    syntax:
      content: 'public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: epoch
          type: system.fabric._epoch
          description: <p>新しい<xref uid="" data-throw-if-not-resolved="false">エポック</xref>です。 </p>
        - id: previousEpochLastSequenceNumber
          type: system.fabric._sequence_number
          description: <p>以前のエポックで発見された最大のシーケンス番号 (LSN)。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>タスクを返します。 </p>
    overridden: 'system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider()
    id: VolatileActorStateProvider()
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: VolatileActorStateProvider()
    nameWithType: VolatileActorStateProvider.VolatileActorStateProvider()
    fullName: microsoft.servicefabric.actors.VolatileActorStateProvider.VolatileActorStateProvider()
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 92
    package: microsoft.servicefabric.actors
    summary: <p>インスタンスを作成<xref uid="microsoft.servicefabric.actors._volatile_actor_state_provider" data-throw-if-not-resolved="false">VolatileActorStateProvider</xref>です。 </p>
    syntax:
      content: public VolatileActorStateProvider()
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider(ReplicatorSettings)
    id: VolatileActorStateProvider(ReplicatorSettings)
    parent: microsoft.servicefabric.actors._volatile_actor_state_provider
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    langs:
      - java
    name: VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
    nameWithType: VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
    fullName: microsoft.servicefabric.actors.VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
    overload: microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/VolatileActorStateProvider.java
      startLine: 103
    package: microsoft.servicefabric.actors
    summary: |-
      <p>インスタンスを作成<xref uid="microsoft.servicefabric.actors._volatile_actor_state_provider" data-throw-if-not-resolved="false">VolatileActorStateProvider</xref>で複製物作成会社の設定を指定します。</p>
      <p></p>
    syntax:
      content: public VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
      parameters:
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: <p>A <xref uid="" data-throw-if-not-resolved="false">ReplicatorSettings</xref>複製物作成会社の設定を記述するオブジェクト。 </p>
references:
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.VolatileActorStateProvider*
    name: VolatileActorStateProvider
    nameWithType: VolatileActorStateProvider.VolatileActorStateProvider
    fullName: microsoft.servicefabric.actors.VolatileActorStateProvider.VolatileActorStateProvider
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.initialize*
    name: initialize
    nameWithType: VolatileActorStateProvider.initialize
    fullName: void microsoft.servicefabric.actors.VolatileActorStateProvider.initialize
    package: microsoft.servicefabric.actors
  - uid: 9cdf14d0system.fabric._replicatora08ddfce
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: system.fabric._replicator
        name: Replicator
        fullName: system.fabric.Replicator
        href: system.fabric._replicator.yml
      - name: '>'
        fullName: '>'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.openAsync*
    name: openAsync
    nameWithType: VolatileActorStateProvider.openAsync
    fullName: CompletableFuture<Replicator> microsoft.servicefabric.actors.VolatileActorStateProvider.openAsync
    package: microsoft.servicefabric.actors
  - uid: 16409f84
    spec.java:
      - name: CompletableFuture<?>
        fullName: CompletableFuture<?>
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.changeRoleAsync*
    name: changeRoleAsync
    nameWithType: VolatileActorStateProvider.changeRoleAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.changeRoleAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.closeAsync*
    name: closeAsync
    nameWithType: VolatileActorStateProvider.closeAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.closeAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.abort*
    name: abort
    nameWithType: VolatileActorStateProvider.abort
    fullName: void microsoft.servicefabric.actors.VolatileActorStateProvider.abort
    package: microsoft.servicefabric.actors
  - uid: b1c38b44
    spec.java:
      - name: UnsupportedOperationException
        fullName: UnsupportedOperationException
  - uid: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
    spec.java:
      - name: BiFunction<
        fullName: BiFunction<
      - uid: microsoft.servicefabric.data._backup_info
        name: BackupInfo
        fullName: microsoft.servicefabric.data.BackupInfo
        href: microsoft.servicefabric.data._backup_info.yml
      - name: ', '
        fullName: ', '
      - uid: system.fabric._cancellation_token
        name: CancellationToken
        fullName: system.fabric.CancellationToken
        href: system.fabric._cancellation_token.yml
      - name: ', CompletableFuture<Boolean>>'
        fullName: ', CompletableFuture<Boolean>>'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.backupAsync*
    name: backupAsync
    nameWithType: VolatileActorStateProvider.backupAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.backupAsync
    package: microsoft.servicefabric.actors
  - uid: e02a2de0
    spec.java:
      - name: Duration
        fullName: Duration
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.restoreAsync*
    name: restoreAsync
    nameWithType: VolatileActorStateProvider.restoreAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.restoreAsync
    package: microsoft.servicefabric.actors
  - uid: 432ffe41system.fabric._cancellation_token774bd4f0
    spec.java:
      - name: Function<
        fullName: Function<
      - uid: system.fabric._cancellation_token
        name: CancellationToken
        fullName: system.fabric.CancellationToken
        href: system.fabric._cancellation_token.yml
      - name: ', CompletableFuture<Boolean>>'
        fullName: ', CompletableFuture<Boolean>>'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.setOnDataLossCallback*
    name: setOnDataLossCallback
    nameWithType: VolatileActorStateProvider.setOnDataLossCallback
    fullName: void microsoft.servicefabric.actors.VolatileActorStateProvider.setOnDataLossCallback
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.onSnapshotAsync*
    name: onSnapshotAsync
    nameWithType: VolatileActorStateProvider.onSnapshotAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.onSnapshotAsync
    package: microsoft.servicefabric.actors
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getLastCommittedSequenceNumber*
    name: getLastCommittedSequenceNumber
    nameWithType: VolatileActorStateProvider.getLastCommittedSequenceNumber
    fullName: long microsoft.servicefabric.actors.VolatileActorStateProvider.getLastCommittedSequenceNumber
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.updateEpochAsync*
    name: updateEpochAsync
    nameWithType: VolatileActorStateProvider.updateEpochAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.updateEpochAsync
    package: microsoft.servicefabric.actors
  - uid: 7e53ac82
    spec.java:
      - name: CompletableFuture<Boolean>
        fullName: CompletableFuture<Boolean>
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.onDataLossAsync*
    name: onDataLossAsync
    nameWithType: VolatileActorStateProvider.onDataLossAsync
    fullName: CompletableFuture<Boolean> microsoft.servicefabric.actors.VolatileActorStateProvider.onDataLossAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyContext*
    name: getCopyContext
    nameWithType: VolatileActorStateProvider.getCopyContext
    fullName: OperationDataStream microsoft.servicefabric.actors.VolatileActorStateProvider.getCopyContext
    package: microsoft.servicefabric.actors
  - uid: 12fe80de
    spec.java:
      - name: IllegalStateException
        fullName: IllegalStateException
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getCopyState*
    name: getCopyState
    nameWithType: VolatileActorStateProvider.getCopyState
    fullName: OperationDataStream microsoft.servicefabric.actors.VolatileActorStateProvider.getCopyState
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.actorActivatedAsync*
    name: actorActivatedAsync
    nameWithType: VolatileActorStateProvider.actorActivatedAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.actorActivatedAsync
    package: microsoft.servicefabric.actors
  - uid: 5618da2dmicrosoft.servicefabric.actors._actor_state_changea08ddfce
    spec.java:
      - name: List<
        fullName: List<
      - uid: microsoft.servicefabric.actors._actor_state_change
        name: ActorStateChange
        fullName: microsoft.servicefabric.actors.ActorStateChange
        href: microsoft.servicefabric.actors._actor_state_change.yml
      - name: '>'
        fullName: '>'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.saveStateAsync*
    name: saveStateAsync
    nameWithType: VolatileActorStateProvider.saveStateAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.saveStateAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.containsStateAsync*
    name: containsStateAsync
    nameWithType: VolatileActorStateProvider.containsStateAsync
    fullName: CompletableFuture<Boolean> microsoft.servicefabric.actors.VolatileActorStateProvider.containsStateAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.removeActorAsync*
    name: removeActorAsync
    nameWithType: VolatileActorStateProvider.removeActorAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.removeActorAsync
    package: microsoft.servicefabric.actors
  - uid: d20512af
    spec.java:
      - name: CompletableFuture<List<String>>
        fullName: CompletableFuture<List<String>>
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.enumerateStateNamesAsync*
    name: enumerateStateNamesAsync
    nameWithType: VolatileActorStateProvider.enumerateStateNamesAsync
    fullName: CompletableFuture<List<String>> microsoft.servicefabric.actors.VolatileActorStateProvider.enumerateStateNamesAsync
    package: microsoft.servicefabric.actors
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: 9cdf14d0microsoft.servicefabric.actors._paged_result78504a52microsoft.servicefabric.actors._actor_ide7daa122
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: microsoft.servicefabric.actors._paged_result
        name: PagedResult
        fullName: microsoft.servicefabric.actors.PagedResult
        href: microsoft.servicefabric.actors._paged_result.yml
      - name: <
        fullName: <
      - uid: microsoft.servicefabric.actors._actor_id
        name: ActorId
        fullName: microsoft.servicefabric.actors.ActorId
        href: microsoft.servicefabric.actors._actor_id.yml
      - name: '>>'
        fullName: '>>'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.getActorsAsync*
    name: getActorsAsync
    nameWithType: VolatileActorStateProvider.getActorsAsync
    fullName: CompletableFuture<PagedResult<ActorId>> microsoft.servicefabric.actors.VolatileActorStateProvider.getActorsAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.saveReminderAsync*
    name: saveReminderAsync
    nameWithType: VolatileActorStateProvider.saveReminderAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.saveReminderAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.deleteReminderAsync*
    name: deleteReminderAsync
    nameWithType: VolatileActorStateProvider.deleteReminderAsync
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.VolatileActorStateProvider.deleteReminderAsync
    package: microsoft.servicefabric.actors
  - uid: 9cdf14d0microsoft.servicefabric.actors._actor_reminder_collectiona08ddfce
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: microsoft.servicefabric.actors._actor_reminder_collection
        name: ActorReminderCollection
        fullName: microsoft.servicefabric.actors.ActorReminderCollection
        href: microsoft.servicefabric.actors._actor_reminder_collection.yml
      - name: '>'
        fullName: '>'
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.loadRemindersAsync*
    name: loadRemindersAsync
    nameWithType: VolatileActorStateProvider.loadRemindersAsync
    fullName: CompletableFuture<ActorReminderCollection> microsoft.servicefabric.actors.VolatileActorStateProvider.loadRemindersAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.traceType*
    name: traceType
    nameWithType: VolatileActorStateProvider.traceType
    fullName: String microsoft.servicefabric.actors.VolatileActorStateProvider.traceType
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.traceId*
    name: traceId
    nameWithType: VolatileActorStateProvider.traceId
    fullName: String microsoft.servicefabric.actors.VolatileActorStateProvider.traceId
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.currentReplicaRole*
    name: currentReplicaRole
    nameWithType: VolatileActorStateProvider.currentReplicaRole
    fullName: ReplicaRole microsoft.servicefabric.actors.VolatileActorStateProvider.currentReplicaRole
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.transientErrorRetryDelay*
    name: transientErrorRetryDelay
    nameWithType: VolatileActorStateProvider.transientErrorRetryDelay
    fullName: Duration microsoft.servicefabric.actors.VolatileActorStateProvider.transientErrorRetryDelay
    package: microsoft.servicefabric.actors
  - uid: c27a23df
    spec.java:
      - name: FabricKeyNotFoundException
        fullName: FabricKeyNotFoundException
  - uid: 6d056e8b
    spec.java:
      - name: <T> CompletableFuture<T>
        fullName: <T> CompletableFuture<T>
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider.loadStateAsync*
    name: loadStateAsync
    nameWithType: VolatileActorStateProvider.loadStateAsync
    fullName: public<T> CompletableFuture<T> microsoft.servicefabric.actors.VolatileActorStateProvider.loadStateAsync
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_state_provider
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: ActorStateProvider
    nameWithType: ActorStateProvider
    fullName: microsoft.servicefabric.actors.ActorStateProvider
    type: Interface
    summary: <p>アクター状態プロバイダーは、アクター ランタイムと通信するために実装する必要があるインターフェイスを表します。 </p>
    syntax:
      content: public interface ActorStateProvider extends StateProviderReplica
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: <p>サービスが対話するために実装する必要がありますの動作を定義、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>です。 </p>
    syntax:
      content: public interface StateProvider
  - uid: microsoft.servicefabric.actors._actor_type_information
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_type_information.yml
    name: ActorTypeInformation
    nameWithType: ActorTypeInformation
    fullName: microsoft.servicefabric.actors.ActorTypeInformation
    type: Class
    summary: <p>アクターを実装する型についてを説明します。 </p>
    syntax:
      content: public class ActorTypeInformation
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>高可用性と信頼性のレプリケート状態です。 </p>\n<p>\r\n\r\n  <b>注釈:</b>の既定の実装を提供、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>、 <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>、および<xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator</xref>インターフェイスの実装と共に、ユーザーのサービスが使用できる、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>インターフェイスです。 インスタンス、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスが経由で取得した、 <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator (system.fabric.StateProvider、system.fabric.ReplicatorSettings)</xref>メソッドにキャストできる<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>使用します。 </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: system.fabric._state_replicator2
    parent: system.fabric
    href: system.fabric._state_replicator2.yml
    name: StateReplicator2
    nameWithType: StateReplicator2
    fullName: system.fabric.StateReplicator2
    type: Interface
    summary: <p>レプリケーションに関連する関数を公開、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>クラスによって使用されている<xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref>を高可用性を保証する状態をレプリケートします。 </p>
    syntax:
      content: public interface StateReplicator2 extends StateReplicator
  - uid: system.fabric._replica_role
    parent: system.fabric
    href: system.fabric._replica_role.yml
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: system.fabric.ReplicaRole
    type: Enum
    summary: <p>レプリカのロールを定義します。 </p>
    syntax:
      content: public enum ReplicaRole
  - uid: system.fabric._stateful_service_partition
    parent: system.fabric
    href: system.fabric._stateful_service_partition.yml
    name: StatefulServicePartition
    nameWithType: StatefulServicePartition
    fullName: system.fabric.StatefulServicePartition
    type: Interface
    syntax:
      content: public interface StatefulServicePartition extends ServicePartition
  - uid: system.fabric._stateful_service_initialization_parameters
    parent: system.fabric
    href: system.fabric._stateful_service_initialization_parameters.yml
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: system.fabric.StatefulServiceInitializationParameters
    type: Class
    summary: <p>ステートフルなサービスのサービスの初期化パラメーターを定義します。 </p>
    syntax:
      content: public class StatefulServiceInitializationParameters extends ServiceInitializationParameters
  - uid: system.fabric._replicator_settings
    parent: system.fabric
    href: system.fabric._replicator_settings.yml
    name: ReplicatorSettings
    nameWithType: ReplicatorSettings
    fullName: system.fabric.ReplicatorSettings
    type: Class
    syntax:
      content: public class ReplicatorSettings
  - uid: microsoft.servicefabric.actors._volatile_actor_state_provider
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._volatile_actor_state_provider.yml
    name: VolatileActorStateProvider
    nameWithType: VolatileActorStateProvider
    fullName: microsoft.servicefabric.actors.VolatileActorStateProvider
    type: Class
    summary: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_state_provider\" data-throw-if-not-resolved=\"false\">ActorStateProvider</xref>揮発性の永続化つまりの実装 <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>状態が保持されるメモリ内のみです。 </p>"
    syntax: *ref_1
  - uid: microsoft.servicefabric.data._state_provider_replica.initialize(StatefulServiceInitializationParameters)
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: StateProviderReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    type: Method
    summary: "<p>サービスの初期化情報を使用して、状態プロバイダーのレプリカを初期化します。</p>\n<p>\r\n\r\n  <b>注釈:</b>初期化中に複雑な処理を行う必要はありません。 OpenAsync では、高価なまたは実行時間の長いの初期化を行う必要があります。 </p>"
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p>サービス名、パーティション id、レプリカの id、およびコード パッケージ情報などのサービスの初期化情報。 </p>
  - uid: system.fabric._replicator
    parent: system.fabric
    href: system.fabric._replicator.yml
    name: Replicator
    nameWithType: Replicator
    fullName: system.fabric.Replicator
    type: Interface
    syntax:
      content: public interface Replicator extends PrimaryReplicator
  - uid: 'microsoft.servicefabric.data._state_provider_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StateProviderReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>使用するため、状態プロバイダーのレプリカを開きます。</p>\n<p>\r\n\r\n  <b>注釈:</b>拡張状態プロバイダーの初期化タスクを開始できます。 </p>"
    syntax:
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p>これが新規または既存のレプリカであるかどうかを示します。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p>このレプリカが属しているパーティション。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: <p>非同期の open 操作を表すタスク。 結果には、パーティション内の他の状態プロバイダーのレプリカ間で状態のレプリケーションを担当するレプリケーターが含まれています。 </p>
  - uid: system.fabric._replica_open_mode
    parent: system.fabric
    href: system.fabric._replica_open_mode.yml
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: system.fabric.ReplicaOpenMode
    type: Enum
    syntax:
      content: public enum ReplicaOpenMode
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。 インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。 キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。 取り消しを開始するトークンを使用することはできません。 所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。 通知を受信するオブジェクトは、適切な方法で応答できます。 </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'microsoft.servicefabric.data._state_provider_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'StateProviderReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    type: Method
    summary: |-
      <p>そのロールが変更される、たとえばプライマリまたはセカンダリに、状態プロバイダーのレプリカを通知します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>プライマリまたはセカンダリなど、新しいレプリカ ロール。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>非同期の変更の役割の操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.data._state_provider_replica.closeAsync(CancellationToken)
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: StateProviderReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<?> microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken cancellationToken)
    type: Method
    summary: "<p>状態プロバイダーの複製が正常にクローズします。</p>\n<p>\r\n\r\n  <b>注釈:</b>これは、レプリカのコードにアップグレードされている、負荷分散のため、レプリカの移動または一時的なエラーが検出された場合に通常に発生します。 </p>"
    syntax:
      content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>非同期の close 操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.data._state_provider_replica.abort()
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: abort()
    nameWithType: StateProviderReplica.abort()
    fullName: void microsoft.servicefabric.data.StateProviderReplica.abort()
    type: Method
    summary: "<p>状態プロバイダーのレプリカを強制的に中止します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>この通常ノードで、永続的な障害が検出されたときにエラーまたは発生 Service Fabric は、内部エラーのため、レプリカのライフ サイクルを確実に管理できません。 </p>"
    syntax:
      content: public void abort()
  - uid: 'microsoft.servicefabric.data._state_provider_replica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: 'backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    nameWithType: 'StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    type: Method
    summary: "<p>これによって管理されるすべての信頼性の高い状態の完全バックアップを実行<xref uid=\"microsoft.servicefabric.data._reliable_state_manager\" data-throw-if-not-resolved=\"false\">ReliableStateManager</xref>です。</p>\n<p>\r\n\r\n  <b>注釈:</b>完全バックアップが 1 時間のタイムアウトを設定して実行されます。 BackupCallback によって返されるブール値では、サービスが正常に外部の場所に、バックアップ フォルダーを移動するかどうかを示します。 False が返される場合は BackupAsync backupCallback false が返されたことを示す関連するメッセージで UnsupportedOperationException がスローされます。 また、バックアップはマークされます失敗とします。 </p>"
    syntax:
      content: 'public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
      parameters:
        - id: backupCallback
          type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
          description: <p>バックアップ フォルダーがローカルで作成された、ノード外に移動する準備ができているときに呼び出されるコールバック </p>
      return:
        type: 16409f84
        description: <p>非同期のバックアップ操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.data._backup_info
    parent: microsoft.servicefabric.data
    href: microsoft.servicefabric.data._backup_info.yml
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: microsoft.servicefabric.data.BackupInfo
    type: Class
    summary: <p>バックアップに関する情報を提供します。 </p>
    syntax:
      content: public class BackupInfo
  - uid: 'microsoft.servicefabric.data._state_provider_replica.backupAsync(BackupOption,Duration,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)'
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: 'backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    nameWithType: 'StateProviderReplica.backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
    type: Method
    summary: "<p>これによって管理されるすべての信頼性の高い状態の完全バックアップを実行<xref uid=\"microsoft.servicefabric.data._reliable_state_manager\" data-throw-if-not-resolved=\"false\">ReliableStateManager</xref>です。</p>\n<p>\r\n\r\n  <b>注釈:</b>完全バックアップが 1 時間のタイムアウトを設定して実行されます。 BackupCallback によって返されるブール値では、サービスが正常に外部の場所に、バックアップ フォルダーを移動するかどうかを示します。 False が返される場合は BackupAsync backupCallback false が返されたことを示す関連するメッセージで UnsupportedOperationException がスローされます。 また、バックアップはマークされます失敗とします。 </p>"
    syntax:
      content: 'public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)'
      parameters:
        - id: option
          type: microsoft.servicefabric.data._backup_option
          description: <p>実行するバックアップの種類。 </p>
        - id: timeout
          type: e02a2de0
          description: <p>この操作のタイムアウト。 </p>
        - id: backupCallback
          type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
          description: <p>バックアップ フォルダーがローカルで作成された、ノード外に移動する準備ができているときに呼び出されるコールバック </p>
      return:
        type: 16409f84
        description: <p>非同期のバックアップ操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.data._backup_option
    parent: microsoft.servicefabric.data
    href: microsoft.servicefabric.data._backup_option.yml
    name: BackupOption
    nameWithType: BackupOption
    fullName: microsoft.servicefabric.data.BackupOption
    type: Enum
    summary: <p>バックアップの種類を示します。 </p>
    syntax:
      content: public enum BackupOption
  - uid: microsoft.servicefabric.data._state_provider_replica.restoreAsync(String)
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: restoreAsync(String backupFolderPath)
    nameWithType: StateProviderReplica.restoreAsync(String backupFolderPath)
    fullName: CompletableFuture<?> microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String backupFolderPath)
    type: Method
    summary: "<p>作成したバックアップを復元します。</p>\n<p>\r\n\r\n  <b>注釈:</b>安全な復元が実行されて、現在のレプリカの状態は、データを復元する場合、復元は完了のみを意味します。 </p>"
    syntax:
      content: public CompletableFuture<?> restoreAsync(String backupFolderPath)
      parameters:
        - id: backupFolderPath
          type: '26831127'
          description: <p>レプリカがから復元するディレクトリ。 このパラメーターを null にすることはできませんを空または空白のみが含まれています。 UNC パスも指定することがあります。 </p>
      return:
        type: 16409f84
        description: <p>非同期の復元操作を表すタスク。 </p>
  - uid: 'microsoft.servicefabric.data._state_provider_replica.restoreAsync(String,RestorePolicy)'
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: 'restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
    nameWithType: 'StateProviderReplica.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
    type: Method
    summary: |-
      <p>作成したバックアップを復元します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy)'
      parameters:
        - id: backupFolderPath
          type: '26831127'
          description: <p>レプリカがから復元するディレクトリ。 このパラメーターを null にすることはできませんを空または空白のみが含まれています。 UNC パスも指定することがあります。 </p>
        - id: restorePolicy
          type: microsoft.servicefabric.data._restore_policy
          description: <p>復元のポリシー。 </p>
      return:
        type: 16409f84
        description: <p>非同期の復元操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.data._restore_policy
    parent: microsoft.servicefabric.data
    href: microsoft.servicefabric.data._restore_policy.yml
    name: RestorePolicy
    nameWithType: RestorePolicy
    fullName: microsoft.servicefabric.data.RestorePolicy
    type: Enum
    summary: <p>復元操作のポリシーです。 </p>
    syntax:
      content: public enum RestorePolicy
  - uid: 'microsoft.servicefabric.data._state_provider_replica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)'
    parent: microsoft.servicefabric.data._state_provider_replica
    href: microsoft.servicefabric.data._state_provider_replica.yml
    name: 'setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
    nameWithType: 'StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
    fullName: 'void microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
    type: Method
    summary: |-
      <p>疑いのあるデータ損失の可能性の中に呼び出される関数</p>
      <p></p>
    syntax:
      content: 'public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)'
      parameters:
        - id: onDataLossAsync
          type: 432ffe41system.fabric._cancellation_token774bd4f0
          description: <p>TODO です。 疑いのあるデータ損失の処理の一部として呼び出される関数。 関数は、CancellationToken にし、イベントの非同期処理を表す CompletableFuture を返します。 True を返すには、レプリカの状態が復元されていることを示します。 False は、レプリカの状態が変更されていないことを示します。 </p>
  - uid: system.fabric._state_provider.getLastCommittedSequenceNumber()
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: getLastCommittedSequenceNumber()
    nameWithType: StateProvider.getLastCommittedSequenceNumber()
    fullName: long system.fabric.StateProvider.getLastCommittedSequenceNumber()
    type: Method
    summary: |-
      <p>サービスがコミットされた最後のシーケンス番号を取得します。</p>
      <p></p>
    syntax:
      content: public long getLastCommittedSequenceNumber()
      return:
        type: 0364520f
        description: <p>長さを返します。 </p>
  - uid: 'system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: 'updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> system.fabric.StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>レプリカ セットの構成が変更の理由で変更または、プライマリ レプリカへの変更をしようとしましたが、レプリカを示します。 変更は、エラーまたは以前のプライマリ レプリカの負荷分散のために発生します。 <xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>変更が特定のプライマリ レプリカによって送信された実際の構成の期間に操作を分割することによって、バリアとして機能します。</p>\n<p>\r\n\r\n  <b>注釈:</b>内の情報、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#updateEpochAsync (エポック、SequenceNumber、CancellationToken)</xref>メソッドにより、進行状況ベクターは、各エポックの一覧を維持するためにサービスレプリカが受信して、最大 LSN に含まれていた。 現在適用されている最大の LSN と進行状況のベクター データは、レプリカの状態を説明するコピー操作中に送信するセカンダリ レプリカに役立ちます。 コピー操作中に、セカンダリ レプリカから受信した進行状況のベクトルを比較するには、セカンダリ レプリカが最新かどうか、どの状態は、セカンダリ レプリカに送信する必要があり、セカンダリ レプリカが false の進行状況を行われたかどうかを判断するプライマリ レプリカが有効にします。 False の進行状況は、セカンダリ レプリカは、以前のエポックの LSN が、プライマリ レプリカは、その進行状況のベクター内にある LSN よりも大きかったレポートを意味します。 </p>"
    syntax:
      content: 'public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: epoch
          type: system.fabric._epoch
          description: <p>新しい<xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">system.fabric.Epoch</xref>です。 </p>
        - id: previousEpochLastSequenceNumber
          type: system.fabric._sequence_number
          description: <p>以前のエポックの最大シーケンス番号 (LSN)。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>です。 </p>
  - uid: system.fabric._epoch
    parent: system.fabric
    href: system.fabric._epoch.yml
    name: Epoch
    nameWithType: Epoch
    fullName: system.fabric.Epoch
    type: Class
    summary: "<p>Service Fabric でパーティションの現在のバージョンを表します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>パーティション全体の構成番号です。 レプリカの構成は、たとえば、プライマリ レプリカが変更されたときに、変更を設定すると、新しいプライマリ レプリカからレプリケートされた操作と呼ばれます新しい<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>、古いプライマリによって送信された 1 つからレプリカです。 プライマリが変更されたというは、通常、元のプライマリ レプリカの影響を受ける失敗によって影響を受けませんセカンダリ レプリカに直接表示されません。 プライマリ レプリカが変更されたことを追跡するために、セカンダリ レプリカに伝達するがします。 使用してこのような通信が発生した、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#updateEpochAsync (system.fabric.Epoch、system.fabric.SequenceNumber、system.fabric.CancellationToken)</xref>メソッドです。 ほとんどのサービスがの内部フィールドの詳細を無視することができます、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>ことを知っておく通常で十分ですので、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>が変更されたと操作の相対順序を判別するエポックを比較してシステム内のイベント。 比較操作は、この目的で提供されます。 </p>"
    syntax:
      content: public class Epoch
  - uid: system.fabric._sequence_number
    parent: system.fabric
    href: system.fabric._sequence_number.yml
    name: SequenceNumber
    nameWithType: SequenceNumber
    fullName: system.fabric.SequenceNumber
    type: Class
    syntax:
      content: public class SequenceNumber
  - uid: system.fabric._state_provider.onDataLossAsync(CancellationToken)
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: onDataLossAsync(CancellationToken cancellationToken)
    nameWithType: StateProvider.onDataLossAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Boolean> system.fabric.StateProvider.onDataLossAsync(CancellationToken cancellationToken)
    type: Method
    summary: "<p>このレプリカ セット内のレプリカのな書き込みクォーラムが失われていることと、そのためデータが失われる可能性がありますが発生したことを示します。 レプリカ セットは、プライマリ レプリカが含まれているレプリカの大部分で構成されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>Service Fabric ランタイムが、プライマリ レプリカが含まれており、レプリカのクォーラムの障害に従っていることが新しいプライマリ レプリカとすぐに、新しいプライマリ レプリカでこのメソッドを呼び出します。 データ損失の可能性が通知をプライマリ レプリカは、外部データ ソースからの状態を復元することもできます。 またはが現在の状態で実行を続行できます。 サービスが、現在の状態で実行され続ける場合は、状態の変更が行われていないことを示す、このメソッドから false を返します。 復元または不完全な作業は、ロールバックなどの状態を変更した場合は true を返します。 True が返される場合はその他のレプリカの状態が不適切な想定されます。 そのため、Service Fabric ランタイムでは、レプリカ セットから他のレプリカを削除し、それらを再作成します。 </p>"
    syntax:
      content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 7e53ac82
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>型の<xref uid="" data-throw-if-not-resolved="false">java.lang.Boolean</xref>、この通知の処理の一部として状態プロバイダーでの状態が変更されたかどうかを示す </p>
  - uid: system.fabric._operation_data_stream
    parent: system.fabric
    href: system.fabric._operation_data_stream.yml
    name: OperationDataStream
    nameWithType: OperationDataStream
    fullName: system.fabric.OperationDataStream
    type: Interface
    syntax:
      content: public interface OperationDataStream
  - uid: system.fabric._state_provider.getCopyContext()
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: getCopyContext()
    nameWithType: StateProvider.getCopyContext()
    fullName: OperationDataStream system.fabric.StateProvider.getCopyContext()
    type: Method
    summary: "<p>作成され、プライマリ レプリカにコンテキストを送信する開かれた後は、セカンダリ レプリカ上のコンテキストを取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>、プライマリ レプリカが、コンテキストを分析しを使用して状態を返送<xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState (SequenceNumber、OperationDataStream)</xref>です。 <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref>が新しく作成された、アイドル状態のセカンダリ レプリカで呼び出され、プライマリ レプリカとの双方向メッセージ交換を非同期的に確立するためのメカニズムを提供します。 セカンダリ レプリカは、送信<xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>オブジェクトをプライマリ レプリカがセカンダリ レプリカでコンテキストを収集する場合の進行状況を判断できます。 プライマリ レプリカは、必要な状態に戻すを送信して応答します。 参照してください<xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState (SequenceNumber、OperationDataStream)</xref>交換の一方のプライマリ レプリカにします。 メモリ内のサービスでは、 <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref>メソッドは呼び出されません、セカンダリ レプリカの状態は認識されている (空され、状態のすべてが必要)。 </p>"
    syntax:
      content: public OperationDataStream getCopyContext()
      return:
        type: system.fabric._operation_data_stream
        description: <p>返します<xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>です。 </p>
  - uid: 'system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: 'getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    nameWithType: 'StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    fullName: 'OperationDataStream system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
    type: Method
    summary: "<p>プライマリ レプリカのセカンダリ レプリカを作成する必要がある状態を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b>単に<xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyContext()</xref>経由でプライマリ レプリカにコンテキストを送信するセカンダリ レプリカを有効にする<xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>、 <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#getCopyState (SequenceNumber、OperationDataStream)</xref>により、プライマリ レプリカで応答する、 <xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>です。 ストリームには使用して、セカンダリ レプリカに配信されるオブジェクトが含まれています、 <xref uid=\"system.fabric._state_replicator.getCopyStream()\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#getCopyStream()</xref>のメソッド、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスです。 オブジェクトを実装<xref uid=\"system.fabric._operation\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>指定されたデータが含まれています。 プライマリ レプリカは、この呼び出しを受け取る、それを作成し、返す別<xref uid=\"system.fabric._operation_data_stream\" data-throw-if-not-resolved=\"false\">system.fabric.OperationDataStream</xref>を格納している<xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>です。 <xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref>を表すデータと状態をセカンダリ レプリカ </p>"
    syntax:
      content: 'public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)'
      parameters:
        - id: upToSequenceNumber
          type: system.fabric._sequence_number
          description: '<p>最大最終シーケンス番号 (LSN) を使用してコピー ストリームに配置する必要があります、 <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref>メソッドです。 この数より大きい Lsn が経由でレプリケーション ストリームの一部として、セカンダリ レプリカに配信される、 <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref>メソッドです。 </p>'
        - id: copyContext
          type: system.fabric._operation_data_stream
          description: <p><xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">System.fabric.OperationDataStream</xref>を格納している、 <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>セカンダリ レプリカによって作成されるオブジェクト。 指定された遅延を解消する必要があります。 </p>
      return:
        type: system.fabric._operation_data_stream
        description: <p>返します<xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>です。 </p>
  - uid: system.fabric._state_replicator.getCopyStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: getCopyStream()
    nameWithType: StateReplicator.getCopyStream()
    fullName: OperationStream system.fabric.StateReplicator.getCopyStream()
    type: Method
    summary: <p>ストリームのコピーを取得します </p>
    syntax:
      content: public OperationStream getCopyStream()
      return:
        type: system.fabric._operation_stream
        description: '<p>返される CopyStream を含む<xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>を実装するオブジェクト<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。 <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>オブジェクトが、CopyState から取得した<xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">OperationDataStream</xref>から、プライマリ レプリカを返す<xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">StateProvider #getCopyState(SequenceNumber,OperationDataStream)</xref>です。 レプリカが作成され、遅延を解消するのには、する必要があります、CopyStream を取得し、送信、適用、および承認を実装するオブジェクトのコピーを開始<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。 並行して、レプリカは、対応する応答<xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">StateProvider#getCopyContext()</xref>と<xref uid="" data-throw-if-not-resolved="false">OperationDataStream#getNextAsync(CancellationToken)</xref>呼び出しです。 ストリームが空ときに、返された<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>メソッドは null です。 </p>'
  - uid: system.fabric._state_replicator.getReplicationStream()
    parent: system.fabric._state_replicator
    href: system.fabric._state_replicator.yml
    name: getReplicationStream()
    nameWithType: StateReplicator.getReplicationStream()
    fullName: OperationStream system.fabric.StateReplicator.getReplicationStream()
    type: Method
    summary: <p>レプリケーション ストリームを取得します。 </p>
    syntax:
      content: public OperationStream getReplicationStream()
      return:
        type: system.fabric._operation_stream
        description: '<p>ReplicationStream 実装<xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>です。 含まれています、ReplicationStream <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>を実装するオブジェクト<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>です。 オブジェクトが経由でプライマリ レプリカによって提供される<xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator #replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>です。 一般に、セカンダリ レプリカを送信する必要があります<xref uid="" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>です。 Service Fabric では、これを行うサービスは必要ありません、一般にサービスがすべて転送<xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref>コピーからオブジェクトが最初に、ストリームし、レプリケーション ストリームからの操作を転送します。 同時に両方のコピーからの転送がサポートされていますが、増加状態を適用する際の複雑さは正しく更新し、高度なサービスにのみ推奨されます。 ストリームが空ときに、返された<xref uid="system.fabric._operation" data-throw-if-not-resolved="false">操作</xref>メソッドは null です。 </p>'
  - uid: microsoft.servicefabric.actors._actor_state_provider.initialize(ActorTypeInformation)
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: initialize(ActorTypeInformation actorTypeInformation)
    nameWithType: ActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
    fullName: void microsoft.servicefabric.actors.ActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
    type: Method
    summary: |-
      <p>関連付けられているアクター型の型情報を使用してアクター状態プロバイダーを初期化します。</p>
      <p></p>
    syntax:
      content: public void initialize(ActorTypeInformation actorTypeInformation)
      parameters:
        - id: actorTypeInformation
          type: microsoft.servicefabric.actors._actor_type_information
          description: <p>アクター クラスの型情報 </p>
  - uid: microsoft.servicefabric.actors._actor_state_provider.actorActivatedAsync(ActorId)
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: actorActivatedAsync(ActorId actorId)
    nameWithType: ActorStateProvider.actorActivatedAsync(ActorId actorId)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorStateProvider.actorActivatedAsync(ActorId actorId)
    type: Method
    summary: |-
      <p>指定した id に置き換えます。 アクターのライセンス認証プロセスの一部としてこのメソッドが呼び出されます</p>
      <p></p>
    syntax:
      content: public CompletableFuture<?> actorActivatedAsync(ActorId actorId)
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アクティブ化したアクターの ID です。 </p>
      return:
        type: 16409f84
        description: <p>表す非同期のタスク<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref>アクティブ化通知の処理です。 </p>
  - uid: microsoft.servicefabric.actors._actor_id
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_id.yml
    name: ActorId
    nameWithType: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    type: Class
    summary: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor_id\" data-throw-if-not-resolved=\"false\">ActorId</xref>アクター サービス内でアクターの id を表します。 アクターによって識別できます<xref uid=\"\" data-throw-if-not-resolved=\"false\">java.lang.String</xref>、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.UUID</xref>か、または長。 </p>"
    syntax:
      content: public class ActorId
  - uid: microsoft.servicefabric.actors._actor
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor.yml
    name: Actor
    nameWithType: Actor
    fullName: microsoft.servicefabric.actors.Actor
    type: Interface
    summary: <p>信頼できるアクターのインターフェイスを継承するための基本インターフェイスです。 </p>
    syntax:
      content: public interface Actor
  - uid: 'microsoft.servicefabric.actors._actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>)'
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: 'saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
    nameWithType: 'ActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.ActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
    type: Method
    summary: "<p>指定したアクター状態の変更のセットをアトミックに保存します。</p>\n<p>\r\n\r\n  <b>注釈:</b>状態変更のコレクションは、指定された状態の名前の 1 つの項目を含める必要があります。 保存先に既に存在するか、存在しないアクター状態の更新/削除するアクターの状態を追加しようとしています。 操作は失敗します。 </p>"
    syntax:
      content: 'public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態の変更を保存する対象のアクターの ID です。 </p>
        - id: stateChanges
          type: 5618da2dmicrosoft.servicefabric.actors._actor_state_changea08ddfce
          description: <p>状態の変更を保存するコレクション。 </p>
      return:
        type: 16409f84
        description: <p>非同期の保存操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.actors._actor_state_change
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_state_change.yml
    name: ActorStateChange
    nameWithType: ActorStateChange
    fullName: microsoft.servicefabric.actors.ActorStateChange
    type: Class
    summary: <p>表しますが、指定された状態の名前を持つアクター状態に変わります。 </p>
    syntax:
      content: public class ActorStateChange
  - uid: 'microsoft.servicefabric.actors._actor_state_provider.containsStateAsync(ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: 'containsStateAsync(ActorId actorId, String stateName)'
    nameWithType: 'ActorStateProvider.containsStateAsync(ActorId actorId, String stateName)'
    fullName: 'CompletableFuture<Boolean> microsoft.servicefabric.actors.ActorStateProvider.containsStateAsync(ActorId actorId, String stateName)'
    type: Method
    summary: |-
      <p>アクター状態プロバイダーに指定した状態の名前を持つ、アクター状態が含まれているかどうかをチェックします。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態の有無を確認する対象のアクターの ID です。 </p>
        - id: stateName
          type: '26831127'
          description: <p>有無を確認するアクター状態の名前です。 </p>
      return:
        type: 7e53ac82
        description: <p>非同期チェック操作を表すタスク。 TResult パラメーターの値は、指定した名前の状態には、それ以外の場合の false が存在する場合は true です。 </p>
  - uid: microsoft.servicefabric.actors._actor_state_provider.removeActorAsync(ActorId)
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: removeActorAsync(ActorId actorId)
    nameWithType: ActorStateProvider.removeActorAsync(ActorId actorId)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorStateProvider.removeActorAsync(ActorId actorId)
    type: Method
    summary: |-
      <p>すべての既存の状態と指定されたアクターにアトミックに関連付けられている通知を削除します。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<?> removeActorAsync(ActorId actorId)
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態を削除するアクターの ID です。 </p>
      return:
        type: 16409f84
        description: <p>非同期の削除操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.actors._actor_state_provider.enumerateStateNamesAsync(ActorId)
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: enumerateStateNamesAsync(ActorId actorId)
    nameWithType: ActorStateProvider.enumerateStateNamesAsync(ActorId actorId)
    fullName: CompletableFuture<List<String>> microsoft.servicefabric.actors.ActorStateProvider.enumerateStateNamesAsync(ActorId actorId)
    type: Method
    summary: "<p>指定されたアクターに関連付けられているすべての状態名の列挙可能なが作成されます。</p>\n<p>\r\n\r\n  <b>注釈:</b>アクター状態プロバイダーから返された列挙子に安全に読み取りと同時に使用し、状態プロバイダーに書き込みます。 状態プロバイダーのスナップショットの一貫したビューを表します。 </p>"
    syntax:
      content: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId)
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>列挙可能なを作成する対象のアクターの ID です。 </p>
      return:
        type: d20512af
        description: <p>非同期の列挙操作を表すタスク。 TResult パラメーターの値は、指定されたアクターに関連付けられているすべての州名の列挙です。 </p>
  - uid: microsoft.servicefabric.actors._paged_result
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._paged_result.yml
    name: PagedResult<T>
    nameWithType: PagedResult<T>
    fullName: microsoft.servicefabric.actors.PagedResult<T>
    type: Class
    summary: |-
      <p>アクター クエリの呼び出しの結果を表します。</p>
      <p></p>
    syntax:
      content: public class PagedResult<T>
      typeParameters:
        - type: 8ce1ecb9
          description: <p>このクエリ結果に含まれる項目の種類。 </p>
  - uid: 'microsoft.servicefabric.actors._actor_state_provider.getActorsAsync(int,ContinuationToken)'
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: 'getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken)'
    nameWithType: 'ActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken)'
    fullName: 'CompletableFuture<PagedResult<ActorId>> microsoft.servicefabric.actors.ActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken)'
    type: Method
    summary: "<p>状態プロバイダーから ActorIds を取得します。</p>\n<p>\r\n\r\n  <b>注釈:</b> </p>"
    syntax:
      content: 'public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken)'
      parameters:
        - id: numItemsToReturn
          type: f75371fa
          description: <p>返される要求された項目の数。 </p>
        - id: continuationToken
          type: microsoft.servicefabric.actors._continuation_token
          description: <p>クエリから結果を開始する継続トークンです。 継続トークンの null 値は、開始、先頭の値の形式を返すことを意味します。 </p>
      return:
        type: 9cdf14d0microsoft.servicefabric.actors._paged_result78504a52microsoft.servicefabric.actors._actor_ide7daa122
        description: <p>サーバーへの呼び出しの非同期操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.actors._continuation_token
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._continuation_token.yml
    name: ContinuationToken
    nameWithType: ContinuationToken
    fullName: microsoft.servicefabric.actors.ContinuationToken
    type: Class
    summary: "<p>クエリ操作の継続トークンを表します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>メソッドを使用して結果のセットの一部を返す可能性があります、 <xref uid=\"microsoft.servicefabric.actors._paged_result\" data-throw-if-not-resolved=\"false\">PagedResult</xref>オブジェクトが使用可能な結果の次のセットを返す、後続の呼び出しで使用できるオブジェクトにも継続トークンを返します。 </p>"
    syntax:
      content: public class ContinuationToken
  - uid: 'microsoft.servicefabric.actors._actor_state_provider.saveReminderAsync(ActorId,ActorReminder)'
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: 'saveReminderAsync(ActorId actorId, ActorReminder reminder)'
    nameWithType: 'ActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.ActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder)'
    type: Method
    summary: |-
      <p>指定されたアクター アラームを保存します。 指定した名前のアクター アラームが存在しない場合は、それ以外の場合と同じ名前のアクター アラームを既存のアクター アラームが更新を追加します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アラームを保存する対象のアクターの ID です。 </p>
        - id: reminder
          type: microsoft.servicefabric.actors._actor_reminder
          description: "<p>\r\n\r\n  <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>アラームを保存します。 </p>"
      return:
        type: 16409f84
        description: <p>非同期の保存操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.actors._actor_reminder
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_reminder.yml
    name: ActorReminder
    nameWithType: ActorReminder
    fullName: microsoft.servicefabric.actors.ActorReminder
    type: Interface
    summary: <p>アラームの設定をカプセル化、<xref uid="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false">アクター</xref></p>
    syntax:
      content: public interface ActorReminder
  - uid: 'microsoft.servicefabric.actors._actor_state_provider.deleteReminderAsync(ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: 'deleteReminderAsync(ActorId actorId, String reminderName)'
    nameWithType: 'ActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName)'
    fullName: 'CompletableFuture<?> microsoft.servicefabric.actors.ActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName)'
    type: Method
    summary: |-
      <p>存在する場合は、指定されたアクター アラームを削除します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>アラームを削除するアクターの ID です。 </p>
        - id: reminderName
          type: '26831127'
          description: <p>削除するアラームの名前です。 </p>
      return:
        type: 16409f84
        description: <p>非同期の削除操作を表すタスク。 </p>
  - uid: microsoft.servicefabric.actors._actor_reminder_collection
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_reminder_collection.yml
    name: ActorReminderCollection
    nameWithType: ActorReminderCollection
    fullName: microsoft.servicefabric.actors.ActorReminderCollection
    type: Interface
    summary: <p>キャプチャ<xref uid="microsoft.servicefabric.actors._actor_reminder_state" data-throw-if-not-resolved="false">ActorReminderState</xref>アクターの </p>
    syntax:
      content: public interface ActorReminderCollection
  - uid: microsoft.servicefabric.actors._actor_state_provider.loadRemindersAsync(CancellationToken)
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: loadRemindersAsync(CancellationToken cancellationToken)
    nameWithType: ActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<ActorReminderCollection> microsoft.servicefabric.actors.ActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
    type: Method
    summary: |-
      <p>アクター状態プロバイダーに含まれているすべてのアラームを読み込みます。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0microsoft.servicefabric.actors._actor_reminder_collectiona08ddfce
        description: <p>非同期ロード操作を表すタスク。 TResult パラメーターの値は、アクター状態プロバイダーに含まれているすべてのアクター アラームのコレクションです。 </p>
  - uid: 'microsoft.servicefabric.actors._actor_state_provider.loadStateAsync(ActorId,String)'
    parent: microsoft.servicefabric.actors._actor_state_provider
    href: microsoft.servicefabric.actors._actor_state_provider.yml
    name: 'loadStateAsync(ActorId actorId, String stateName)'
    nameWithType: 'ActorStateProvider.loadStateAsync(ActorId actorId, String stateName)'
    fullName: '<T> CompletableFuture<T> microsoft.servicefabric.actors.ActorStateProvider.loadStateAsync(ActorId actorId, String stateName)'
    type: Method
    summary: |-
      <p>指定された状態の名前に関連付けられているアクターの状態を読み込みます。</p>
      <p></p>
    syntax:
      content: 'public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName)'
      parameters:
        - id: actorId
          type: microsoft.servicefabric.actors._actor_id
          description: <p>状態の読み込み先のアクターの ID です。 </p>
        - id: stateName
          type: '26831127'
          description: <p>読み込みにアクター状態の名前です。 </p>
      return:
        type: 6d056e8b
        description: <p>非同期ロード操作を表すタスク。 TResult のパラメーターの値には、特定の状態名に関連付けられているアクター状態の値が含まれています。 </p>
  - uid: system.fabric._configuration_package
    parent: system.fabric
    href: system.fabric._configuration_package.yml
    name: ConfigurationPackage
    nameWithType: ConfigurationPackage
    fullName: system.fabric.ConfigurationPackage
    type: Class
    summary: <p>構成パッケージを表します。 </p>
    syntax:
      content: public class ConfigurationPackage