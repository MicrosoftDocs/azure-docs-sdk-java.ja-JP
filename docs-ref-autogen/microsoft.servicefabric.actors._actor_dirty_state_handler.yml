### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.actors._actor_dirty_state_handler
    id: _actor_dirty_state_handler
    parent: microsoft.servicefabric.actors
    children:
      - microsoft.servicefabric.actors._actor_dirty_state_handler.handle(ActorBase)
    href: microsoft.servicefabric.actors._actor_dirty_state_handler.yml
    langs:
      - java
    name: ActorDirtyStateHandler
    nameWithType: ActorDirtyStateHandler
    fullName: microsoft.servicefabric.actors.ActorDirtyStateHandler
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
      startLine: 8
    package: microsoft.servicefabric.actors
    summary: <p>呼び出しが許可される前に処理する必要がある場合は、アクターの状態がダーティと、 </p>
    syntax:
      content: public interface ActorDirtyStateHandler
  - uid: microsoft.servicefabric.actors._actor_dirty_state_handler.handle(ActorBase)
    id: handle(ActorBase)
    parent: microsoft.servicefabric.actors._actor_dirty_state_handler
    href: microsoft.servicefabric.actors._actor_dirty_state_handler.yml
    langs:
      - java
    name: handle(ActorBase actor)
    nameWithType: ActorDirtyStateHandler.handle(ActorBase actor)
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorDirtyStateHandler.handle(ActorBase actor)
    overload: microsoft.servicefabric.actors._actor_dirty_state_handler.handle*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
      startLine: 10
    package: microsoft.servicefabric.actors
    syntax:
      content: public CompletableFuture<?> handle(ActorBase actor)
      parameters:
        - id: actor
          type: microsoft.servicefabric.actors._actor_base
      return:
        type: 16409f84
references:
  - uid: 16409f84
    spec.java:
      - name: CompletableFuture<?>
        fullName: CompletableFuture<?>
  - uid: microsoft.servicefabric.actors._actor_dirty_state_handler.handle*
    name: handle
    nameWithType: ActorDirtyStateHandler.handle
    fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorDirtyStateHandler.handle
    package: microsoft.servicefabric.actors
  - uid: microsoft.servicefabric.actors._actor_base
    parent: microsoft.servicefabric.actors
    href: microsoft.servicefabric.actors._actor_base.yml
    name: ActorBase
    nameWithType: ActorBase
    fullName: microsoft.servicefabric.actors.ActorBase
    type: Class
    summary: "<p>アクターの基本クラスを表します。 <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref></p>\n<p>\r\n\r\n  <b>注釈:</b>アクターの基本データ型は、共通するアクターから派生するアクターによって実装された機能を提供<xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">アクター</xref>アクター ガベージ コレクションとのフェールオーバーの制限が、状態が保持されます。 状態の取得と格納がアクター状態プロバイダーによって提供される<xref uid=\"microsoft.servicefabric.actors._actor_state_provider\" data-throw-if-not-resolved=\"false\">ActorStateProvider</xref>です。 </p>"
    syntax:
      content: public class ActorBase