### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler
    id: _service_remoting_message_handler
    parent: microsoft.servicefabric.services.remoting
    children:
      - 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
      - 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
    langs:
      - java
    name: ServiceRemotingMessageHandler
    nameWithType: ServiceRemotingMessageHandler
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
      startLine: 9
    package: microsoft.servicefabric.services.remoting
    summary: <p>実装される必要があるインターフェイスを定義、 <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref>リモート処理トランスポートからメッセージを受信します。 </p>
    syntax:
      content: public interface ServiceRemotingMessageHandler
  - uid: 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    id: 'handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting._service_remoting_message_handler
    href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
    langs:
      - java
    name: 'handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    overload: microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
      startLine: 36
    package: microsoft.servicefabric.services.remoting
    summary: |-
      <p>クライアントから一方向のメッセージを処理します。</p>
      <p></p>
    syntax:
      content: 'public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>要求コンテキスト、要求に関する追加情報を含む </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>要求メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>要求メッセージの本文 </p>
  - uid: 'microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    id: 'requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting._service_remoting_message_handler
    href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
    langs:
      - java
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    overload: microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
      startLine: 21
    package: microsoft.servicefabric.services.remoting
    summary: |-
      <p>サービスからの応答を必要とするクライアントからのメッセージを処理します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>要求コンテキスト、要求に関する追加情報を含む </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>要求メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>要求メッセージの本文 </p>
      return:
        type: 5fe2dfa4
        description: <p>応答本文 </p>
references:
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync*
    name: requestResponseAsync
    nameWithType: ServiceRemotingMessageHandler.requestResponseAsync
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync'
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay*
    name: handleOneWay
    nameWithType: ServiceRemotingMessageHandler.handleOneWay
    fullName: void microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.handleOneWay
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    parent: microsoft.servicefabric.services.remoting.runtime
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: ServiceRemotingDispatcher
    nameWithType: ServiceRemotingDispatcher
    fullName: microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher
    type: Class
    syntax:
      content: public class ServiceRemotingDispatcher implements ServiceRemotingMessageHandler
  - uid: 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>サービスからの応答を必要とするクライアントからのメッセージを処理します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>要求コンテキスト、要求に関する追加情報を含む </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>要求メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>要求メッセージの本文 </p>
      return:
        type: 5fe2dfa4
        description: <p>応答本文 </p>
  - uid: 'microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
    href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
    name: 'requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>アクター サービス メソッドまたはアクター メソッドに、クライアントから受信したメッセージをディスパッチします。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>必要な場合は、コールバック チャネルを取得できるようにするコンテキストを要求します。 </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>サービスのリモート処理のメッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>リモート処理のメッセージの要求本文をシリアル化されます。 </p>
      return:
        type: 5fe2dfa4
        description: <p>未処理の操作を表します。 結果、 <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>シリアル化された応答本文です。 </p>
  - uid: microsoft.servicefabric.services.remoting._service_remoting_request_context
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_request_context.yml
    name: ServiceRemotingRequestContext
    nameWithType: ServiceRemotingRequestContext
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext
    type: Interface
    summary: <p>インターフェイスを定義します、IServiceRemotingMessageHandler の要求コンテキストを指定するために実装する必要があります。 </p>
    syntax:
      content: public interface ServiceRemotingRequestContext
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_headers
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_message_headers.yml
    name: ServiceRemotingMessageHeaders
    nameWithType: ServiceRemotingMessageHeaders
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
    type: Class
    summary: <p>ServiceRemoting メッセージと共に送信されるヘッダーを指定します。 </p>
    syntax:
      content: public class ServiceRemotingMessageHeaders
  - uid: 'microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
    name: 'handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>クライアントから一方向のメッセージを処理します。</p>
      <p></p>
    syntax:
      content: 'public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: requestContext
          type: microsoft.servicefabric.services.remoting._service_remoting_request_context
          description: <p>要求コンテキスト、要求に関する追加情報を含む </p>
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>要求メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>要求メッセージの本文 </p>
  - uid: microsoft.servicefabric.services.remoting._service_remoting_listener
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_listener.yml
    name: ServiceRemotingListener
    nameWithType: ServiceRemotingListener
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingListener
    type: Interface
    summary: <p>ステートレスおよびステートフルなサービスのインターフェイスのリモート処理を有効にするための基本の通信インターフェイスを定義します。 </p>
    syntax:
      content: public interface ServiceRemotingListener extends CommunicationListener