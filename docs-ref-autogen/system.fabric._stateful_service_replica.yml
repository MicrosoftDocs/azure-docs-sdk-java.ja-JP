### YamlMime:ManagedReference
items:
  - uid: system.fabric._stateful_service_replica
    id: _stateful_service_replica
    parent: system.fabric
    children:
      - system.fabric._stateful_service_replica.abort()
      - 'system.fabric._stateful_service_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
      - system.fabric._stateful_service_replica.closeAsync(CancellationToken)
      - system.fabric._stateful_service_replica.initialize(StatefulServiceInitializationParameters)
      - 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: StatefulServiceReplica
    nameWithType: StatefulServiceReplica
    fullName: system.fabric.StatefulServiceReplica
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 17
    package: system.fabric
    summary: "<p>スタートアップ、初期化、ロールの変更、およびシャット ダウンなど、レプリカのライフ サイクルを制御する動作を定義します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>ステートフル サービスの種類は、このインターフェイスを実装する必要があります。 ステートフルなサービスの種類のロジックには、プライマリ レプリカ上で呼び出される動作とセカンダリ レプリカで呼び出される動作が含まれています。 サービスの作成者が作成する場合は、指定された使用<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>、サービスを実装する必要がありますも、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref> の実装を使用する<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>はによって提供される<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref></p>"
    syntax:
      content: public interface StatefulServiceReplica
  - uid: system.fabric._stateful_service_replica.abort()
    id: abort()
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: abort()
    nameWithType: StatefulServiceReplica.abort()
    fullName: void system.fabric.StatefulServiceReplica.abort()
    overload: system.fabric._stateful_service_replica.abort*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 93
    package: system.fabric
    summary: "<p>インスタンスが異常終了します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>リースが失われると、サービスの使用への応答<xref uid=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\">system.fabric.ServicePartition#reportFault(FaultType)</xref>レポートに、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FaultType#Permanent</xref>エラー異常終了の例に示します。 このメソッドが呼び出されたときにサービス インスタンスをすぐにリリースしのすべての参照をクリーンアップしを返します。 </p>"
    syntax:
      content: public void abort()
  - uid: 'system.fabric._stateful_service_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    id: 'changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.StatefulServiceReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    overload: system.fabric._stateful_service_replica.changeRoleAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 70
    package: system.fabric
    summary: "<p>プライマリまたはセカンダリ レプリカのロールを変更します。</p>\n<p>\r\n\r\n  <b>注釈:</b>をパラメーターとして、新しいロールが示されます。 ときに、サービス ロールに移行する、新しい、サービスが、現在リッスン アドレスを更新することです。 リッスン アドレスは、クライアントが接続するアドレスです。 クライアントからの通信が予想される場合、ポートなどの一部のリソースを要求のみにプライマリ レプリカであるときに、サービスが有効にします。 </p>"
    syntax:
      content: 'public CompletableFuture<String> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>更新された<xref uid="system.fabric._replica_role" data-throw-if-not-resolved="false">system.fabric.ReplicaRole</xref>このレプリカに遷移させなければならないことです。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 06be942d
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>型の<xref uid="" data-throw-if-not-resolved="false">java.lang.String</xref>用の â €™ サービス ファブリックの名前付けを使用して、レプリカと関連付けられる s 新しい接続アドレス。 </p>
  - uid: system.fabric._stateful_service_replica.closeAsync(CancellationToken)
    id: closeAsync(CancellationToken)
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
    overload: system.fabric._stateful_service_replica.closeAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 81
    package: system.fabric
    summary: |-
      <p>シャット ダウンすると、サービスのレプリカを閉じます。 キャンセルが推奨でが取り消された場合でもは、操作を完了も可能性がありますに注意してください。</p>
      <p></p>
    syntax:
      content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: db03ee24
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>です。 </p>
  - uid: system.fabric._stateful_service_replica.initialize(StatefulServiceInitializationParameters)
    id: initialize(StatefulServiceInitializationParameters)
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: StatefulServiceReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.StatefulServiceReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    overload: system.fabric._stateful_service_replica.initialize*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 24
    package: system.fabric
    summary: |-
      <p>新しく作成されたサービスのレプリカを初期化します。</p>
      <p></p>
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p><xref uid="system.fabric._stateful_service_initialization_parameters" data-throw-if-not-resolved="false">System.fabric.StatefulServiceInitializationParameters</xref>このレプリカにします。 </p>
  - uid: 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    id: 'openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    langs:
      - java
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    overload: system.fabric._stateful_service_replica.openAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServiceReplica.java
      startLine: 46
    package: system.fabric
    summary: |-
      <p>その他の操作を実行できるように、初期化されたサービスのレプリカが開きます。</p>
      <p></p>
    syntax: &ref_1
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p>これは、は、Service Fabric インフラストラクチャをサポートし、コードから直接使用するものではありません。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p><xref uid="system.fabric._stateful_service_partition" data-throw-if-not-resolved="false">System.fabric.StatefulServicePartition</xref>このレプリカの情報です。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: '<p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>&lt;<xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>&gt;、 <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref> stateful で使用されています。サービス。 Service Fabric の実装を使用する<xref uid="system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StatefulServiceReplica#openAsync (ReplicaOpenMode、StatefulServicePartition、CancellationToken)</xref> 、レプリカを返す必要があります、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>から取得した<xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator (StateProvider、ReplicatorSettings)</xref></p>'
references:
  - uid: system.fabric._stateful_service_replica.initialize*
    name: initialize
    nameWithType: StatefulServiceReplica.initialize
    fullName: void system.fabric.StatefulServiceReplica.initialize
    package: system.fabric
  - uid: 9cdf14d0system.fabric._replicatora08ddfce
    spec.java:
      - name: CompletableFuture<
        fullName: CompletableFuture<
      - uid: system.fabric._replicator
        name: Replicator
        fullName: system.fabric.Replicator
        href: system.fabric._replicator.yml
      - name: '>'
        fullName: '>'
  - uid: system.fabric._stateful_service_replica.openAsync*
    name: openAsync
    nameWithType: StatefulServiceReplica.openAsync
    fullName: CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync
    package: system.fabric
  - uid: 06be942d
    spec.java:
      - name: CompletableFuture<String>
        fullName: CompletableFuture<String>
  - uid: system.fabric._stateful_service_replica.changeRoleAsync*
    name: changeRoleAsync
    nameWithType: StatefulServiceReplica.changeRoleAsync
    fullName: CompletableFuture<String> system.fabric.StatefulServiceReplica.changeRoleAsync
    package: system.fabric
  - uid: db03ee24
    spec.java:
      - name: CompletableFuture<Void>
        fullName: CompletableFuture<Void>
  - uid: system.fabric._stateful_service_replica.closeAsync*
    name: closeAsync
    nameWithType: StatefulServiceReplica.closeAsync
    fullName: CompletableFuture<Void> system.fabric.StatefulServiceReplica.closeAsync
    package: system.fabric
  - uid: system.fabric._stateful_service_replica.abort*
    name: abort
    nameWithType: StatefulServiceReplica.abort
    fullName: void system.fabric.StatefulServiceReplica.abort
    package: system.fabric
  - uid: microsoft.servicefabric.services.runtime._stateful_service_replica_adapter
  - uid: system.fabric._key_value_store_replica
    parent: system.fabric
    href: system.fabric._key_value_store_replica.yml
    name: KeyValueStoreReplica
    nameWithType: KeyValueStoreReplica
    fullName: system.fabric.KeyValueStoreReplica
    type: Class
    summary: <p>」のサービスのライターに、レプリケートされたトランザクション関連のデータ記憶域を提供"任意の Service Fabric サービスに統合するための準備ができています。 </p>
    syntax:
      content: public class KeyValueStoreReplica implements StatefulServiceReplica
  - uid: system.fabric._key_value_store_replica.initialize(StatefulServiceInitializationParameters)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: initialize(StatefulServiceInitializationParameters initializationParameters)
    nameWithType: KeyValueStoreReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    fullName: void system.fabric.KeyValueStoreReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
    type: Method
    summary: "<p>開くのための準備でレプリカを初期化します。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的に呼び出すのアプリケーション レプリカがから派生している場合は、このメソッドは必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 ここでは、アプリケーションのレプリカをオーバーライドする必要があります<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onInitialize(system.fabric.StatefulServiceInitializationParameters)</xref>代わりにします。 </p>"
    syntax:
      content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
      parameters:
        - id: initializationParameters
          type: system.fabric._stateful_service_initialization_parameters
          description: <p>レプリカの初期化情報。 </p>
  - uid: system.fabric._stateful_service_initialization_parameters
    parent: system.fabric
    href: system.fabric._stateful_service_initialization_parameters.yml
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: system.fabric.StatefulServiceInitializationParameters
    type: Class
    summary: <p>ステートフルなサービスのサービスの初期化パラメーターを定義します。 </p>
    syntax:
      content: public class StatefulServiceInitializationParameters extends ServiceInitializationParameters
  - uid: system.fabric._replicator
    parent: system.fabric
    href: system.fabric._replicator.yml
    name: Replicator
    nameWithType: Replicator
    fullName: system.fabric.Replicator
    type: Interface
    syntax:
      content: public interface Replicator extends PrimaryReplicator
  - uid: 'system.fabric._key_value_store_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.KeyValueStoreReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>オンライン レプリカ セット内の前に、レプリカとそのレプリケーターを開きます。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的に呼び出すのアプリケーション レプリカがから派生している場合は、このメソッドは必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 この場合、アプリケーションのレプリカでは、OnOpenAsync を代わりにオーバーライドする必要があります。 </p>"
    syntax:
      content: 'public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
      parameters:
        - id: openMode
          type: system.fabric._replica_open_mode
          description: <p>このレプリカを開始するコンテキストが開くように指定します。 </p>
        - id: partition
          type: system.fabric._stateful_service_partition
          description: <p>このレプリカが属しているセットのレプリカを説明する情報が含まれています。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 9cdf14d0system.fabric._replicatora08ddfce
        description: <p>Open の完了を示すために CompletableFuture <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref>です。 </p>
  - uid: system.fabric._replica_open_mode
    parent: system.fabric
    href: system.fabric._replica_open_mode.yml
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: system.fabric.ReplicaOpenMode
    type: Enum
    syntax:
      content: public enum ReplicaOpenMode
  - uid: system.fabric._stateful_service_partition
    parent: system.fabric
    href: system.fabric._stateful_service_partition.yml
    name: StatefulServicePartition
    nameWithType: StatefulServicePartition
    fullName: system.fabric.StatefulServicePartition
    type: Interface
    syntax:
      content: public interface StatefulServicePartition extends ServicePartition
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。 インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。 キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。 取り消しを開始するトークンを使用することはできません。 所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。 通知を受信するオブジェクトは、適切な方法で応答できます。 </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)'
    parent: system.fabric._stateful_service_replica
    href: system.fabric._stateful_service_replica.yml
    name: 'openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    nameWithType: 'StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Replicator> system.fabric.StatefulServiceReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)'
    type: Method
    summary: |-
      <p>その他の操作を実行できるように、初期化されたサービスのレプリカが開きます。</p>
      <p></p>
    syntax: *ref_1
  - uid: system.fabric._fabric_replicator
    parent: system.fabric
    href: system.fabric._fabric_replicator.yml
    name: FabricReplicator
    nameWithType: FabricReplicator
    fullName: system.fabric.FabricReplicator
    type: Class
    summary: "<p>高可用性と信頼性のレプリケート状態です。 </p>\n<p>\r\n\r\n  <b>注釈:</b>の既定の実装を提供、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>、 <xref uid=\"system.fabric._replicator\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator</xref>、および<xref uid=\"system.fabric._primary_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.PrimaryReplicator</xref>インターフェイスの実装と共に、ユーザーのサービスが使用できる、 <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>インターフェイスです。 インスタンス、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>クラスが経由で取得した、 <xref uid=\"system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServicePartition#createReplicator (system.fabric.StateProvider、system.fabric.ReplicatorSettings)</xref>メソッドにキャストできる<xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref>使用します。 </p>"
    syntax:
      content: public class FabricReplicator implements Replicator
  - uid: 'system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)'
    parent: system.fabric._stateful_service_partition
    href: system.fabric._stateful_service_partition.yml
    name: 'createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    nameWithType: 'StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    fullName: 'FabricReplicator system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
    type: Method
    summary: "<p>作成、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>指定された設定で、レプリカに返します。</p>\n<p>\r\n\r\n  <b>注釈:</b>の作成にこのメソッドを使用する必要があります、 <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>サービスとして、 <xref uid=\"system.fabric._state_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator</xref> を実装するステートフルなサービス<xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider</xref>です。 </p>"
    syntax:
      content: 'public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)'
      parameters:
        - id: stateProvider
          type: system.fabric._state_provider
          description: <p><xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">System.fabric.StateProvider</xref>いる、返された<xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>関連付けする必要があります。 これは、多くの場合、同じオブジェクトを実装する<xref uid="system.fabric._stateful_service_replica" data-throw-if-not-resolved="false">system.fabric.StatefulServiceReplica</xref>、特定のサービスを異なる方法で考慮することがありますが、します。 </p>
        - id: replicatorSettings
          type: system.fabric._replicator_settings
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._replicator_settings\" data-throw-if-not-resolved=\"false\">system.fabric.ReplicatorSettings</xref>いる、返された<xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref>構成する必要があります。 </p>"
      return:
        type: system.fabric._fabric_replicator
        description: <p>返します<xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>です。 </p>
  - uid: 'system.fabric._key_value_store_replica.changeRoleAsync(ReplicaRole,CancellationToken)'
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: 'changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    nameWithType: 'KeyValueStoreReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<String> system.fabric.KeyValueStoreReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>レプリカとそのレプリケーターのレプリカのロールを変更します。</p>\n<p>\r\n\r\n  <b>注釈:</b>明示的に呼び出すのアプリケーション レプリカがから派生している場合は、このメソッドは必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 ここでは、アプリケーションのレプリカをオーバーライドする必要があります<xref uid=\"system.fabric._key_value_store_replica.onChangeRoleAsync(ReplicaRole,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onChangeRoleAsync (system.fabric.ReplicaRole、system.fabric.CancellationToken)</xref>代わりにします。 </p>"
    syntax:
      content: 'public CompletableFuture<String> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)'
      parameters:
        - id: newRole
          type: system.fabric._replica_role
          description: <p>ターゲット レプリカのロール。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 06be942d
        description: <p>このレプリカのアドレスを結果タスク。 </p>
  - uid: system.fabric._replica_role
    parent: system.fabric
    href: system.fabric._replica_role.yml
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: system.fabric.ReplicaRole
    type: Enum
    summary: <p>レプリカのロールを定義します。 </p>
    syntax:
      content: public enum ReplicaRole
  - uid: system.fabric._key_value_store_replica.closeAsync(CancellationToken)
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: closeAsync(CancellationToken cancellationToken)
    nameWithType: KeyValueStoreReplica.closeAsync(CancellationToken cancellationToken)
    fullName: CompletableFuture<Void> system.fabric.KeyValueStoreReplica.closeAsync(CancellationToken cancellationToken)
    type: Method
    summary: "<p>レプリカおよびレプリカ セットからオフラインになっているに備えて、レプリケーターを閉じます。 現在は使用しません。 将来使用するために予約されています。</p>\n<p>\r\n\r\n  <b>注釈:</b>レプリカが必ずしもから削除されていない永続的に、レプリカ セットと、後で再度開くことができます。 レプリカを閉じるための一般的な原因は、アップグレードまたは負荷分散の準備として正常にシャット ダウンします。 このメソッドは明示的に呼び出す場合は、アプリケーションのレプリカがから派生する必要はありません<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica</xref>、これは、推奨パターン。 ここでは、アプリケーションのレプリカをオーバーライドする必要があります<xref uid=\"system.fabric._key_value_store_replica.onCloseAsync(CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.KeyValueStoreReplica#onCloseAsync(system.fabric.CancellationToken)</xref>代わりにします。 </p>"
    syntax:
      content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
      parameters:
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: db03ee24
        description: <p>非同期操作を表すタスク。 </p>
  - uid: system.fabric._key_value_store_replica.abort()
    parent: system.fabric._key_value_store_replica
    href: system.fabric._key_value_store_replica.yml
    name: abort()
    nameWithType: KeyValueStoreReplica.abort()
    fullName: void system.fabric.KeyValueStoreReplica.abort()
    type: Method
    summary: <p>このインスタンスを中止、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.KeyValueStoreReplica</xref>クラスです。 </p>
    syntax:
      content: public void abort()
  - uid: system.fabric._service_partition.reportFault(FaultType)
    parent: system.fabric._service_partition
    href: system.fabric._service_partition.yml
    name: reportFault(FaultType faultType)
    nameWithType: ServicePartition.reportFault(FaultType faultType)
    fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
    type: Method
    summary: "<p>負荷分散のメトリックのセットの負荷を報告します。 いつでも、負荷を報告することができます、 <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Collection</xref>の<xref uid=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\">LoadMetric</xref>メソッドの 1 つまたは複数のプロパティを提供し、 <xref uid=\"system.fabric._load_metric\" data-throw-if-not-resolved=\"false\">system.fabric.LoadMetric</xref>メソッド.</p>\n<p>\r\n\r\n  <b>注釈:</b>エラーは通常報告サービス コードが検出したときに回復できませんから一部を発行します。 </p>"
    syntax:
      content: public void reportFault(FaultType faultType)
      parameters:
        - id: faultType
          type: system.fabric._fault_type
          description: <p><xref uid="system.fabric._load_metric" data-throw-if-not-resolved="false">System.fabric.LoadMetric</xref>サービスで検出されました。 </p>
  - uid: system.fabric._state_provider
    parent: system.fabric
    href: system.fabric._state_provider.yml
    name: StateProvider
    nameWithType: StateProvider
    fullName: system.fabric.StateProvider
    type: Interface
    summary: <p>サービスが対話するために実装する必要がありますの動作を定義、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>です。 </p>
    syntax:
      content: public interface StateProvider
  - uid: system.fabric._state_replicator
    parent: system.fabric
    href: system.fabric._state_replicator.yml
    name: StateReplicator
    nameWithType: StateReplicator
    fullName: system.fabric.StateReplicator
    type: Interface
    summary: <p>公開のレプリケーション関連の機能、 <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>クラスによって使用されている<xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref>を高可用性を保証する状態をレプリケートします。 </p>
    syntax:
      content: public interface StateReplicator