### YamlMime:ManagedReference
items:
  - uid: system.fabric._epoch
    id: _epoch
    parent: system.fabric
    children:
      - system.fabric._epoch.compareTo(Epoch)
      - 'system.fabric._epoch.Epoch(long,long)'
      - system.fabric._epoch.equals(Object)
      - system.fabric._epoch.getConfigurationNumber()
      - system.fabric._epoch.getDataLossNumber()
      - system.fabric._epoch.hashCode()
      - system.fabric._epoch.setConfigurationNumber(long)
      - system.fabric._epoch.setDataLossNumber(long)
    href: system.fabric._epoch.yml
    langs:
      - java
    name: Epoch
    nameWithType: Epoch
    fullName: system.fabric.Epoch
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 22
    package: system.fabric
    summary: "<p>Service Fabric でパーティションの現在のバージョンを表します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>パーティション全体の構成番号です。 レプリカの構成は、たとえば、プライマリ レプリカが変更されたときに、変更を設定すると、新しいプライマリ レプリカからレプリケートされた操作と呼ばれます新しい<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>、古いプライマリによって送信された 1 つからレプリカです。 プライマリが変更されたというは、通常、元のプライマリ レプリカの影響を受ける失敗によって影響を受けませんセカンダリ レプリカに直接表示されません。 プライマリ レプリカが変更されたことを追跡するために、セカンダリ レプリカに伝達するがします。 使用してこのような通信が発生した、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#updateEpochAsync (system.fabric.Epoch、system.fabric.SequenceNumber、system.fabric.CancellationToken)</xref>メソッドです。 ほとんどのサービスがの内部フィールドの詳細を無視することができます、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>ことを知っておく通常で十分ですので、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>が変更されたと操作の相対順序を判別するエポックを比較してシステム内のイベント。 比較操作は、この目的で提供されます。 </p>"
    syntax: &ref_1
      content: public class Epoch
    inheritance:
      - java.lang.Object
      - Serializable
  - uid: system.fabric._epoch.compareTo(Epoch)
    id: compareTo(Epoch)
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: compareTo(Epoch other)
    nameWithType: Epoch.compareTo(Epoch other)
    fullName: int system.fabric.Epoch.compareTo(Epoch other)
    overload: system.fabric._epoch.compareTo*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 144
    package: system.fabric
    syntax:
      content: public int compareTo(Epoch other)
      parameters:
        - id: other
          type: system.fabric._epoch
      return:
        type: f75371fa
  - uid: 'system.fabric._epoch.Epoch(long,long)'
    id: 'Epoch(long,long)'
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: 'Epoch(long dataLossNumber, long configurationNumber)'
    nameWithType: 'Epoch.Epoch(long dataLossNumber, long configurationNumber)'
    fullName: 'system.fabric.Epoch.Epoch(long dataLossNumber, long configurationNumber)'
    overload: system.fabric._epoch.Epoch*
    type: Constructor
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 44
    package: system.fabric
    summary: |-
      <p>新しいインスタンスを初期化、 <xref uid="" data-throw-if-not-resolved="false">system.fabric.Epoch</xref>構成番号と指定したデータ損失の数を持つクラス。</p>
      <p></p>
    syntax:
      content: 'public Epoch(long dataLossNumber, long configurationNumber)'
      parameters:
        - id: dataLossNumber
          type: 0364520f
          description: <p>データの損失が疑われるたびに更新される増加する値を表す long です。 </p>
        - id: configurationNumber
          type: 0364520f
          description: <p>このレプリカの設定が変更されるたびに更新が増加する値を表す long です。 </p>
  - uid: system.fabric._epoch.equals(Object)
    id: equals(Object)
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: equals(Object obj)
    nameWithType: Epoch.equals(Object obj)
    fullName: boolean system.fabric.Epoch.equals(Object obj)
    overload: system.fabric._epoch.equals*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 123
    package: system.fabric
    syntax:
      content: public boolean equals(Object obj)
      parameters:
        - id: obj
          type: '79317049'
      return:
        type: 4fc6e284
  - uid: system.fabric._epoch.getConfigurationNumber()
    id: getConfigurationNumber()
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: getConfigurationNumber()
    nameWithType: Epoch.getConfigurationNumber()
    fullName: long system.fabric.Epoch.getConfigurationNumber()
    overload: system.fabric._epoch.getConfigurationNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 91
    package: system.fabric
    summary: "<p>この現在の構成番号のプロパティを取得<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Epoch</xref>です。</p>\n<p>\r\n\r\n  <b>注釈:</b>構成番号が増加する値は、このレプリカの設定が変更されるたびに更新します。 サービスが通知され、現在の構成番号の場合にのみ<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator#updateEpochAsync (system.fabric.Epoch、system.fabric.CancellationToken)</xref>メソッドは、レプリカ セットのプライマリ レプリカを変更しようとすると、結果として呼び出されます。 </p>"
    syntax:
      content: public long getConfigurationNumber()
      return:
        type: 0364520f
        description: <p>構成の数を表す long です。 </p>
  - uid: system.fabric._epoch.getDataLossNumber()
    id: getDataLossNumber()
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: getDataLossNumber()
    nameWithType: Epoch.getDataLossNumber()
    fullName: long system.fabric.Epoch.getDataLossNumber()
    overload: system.fabric._epoch.getDataLossNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 59
    package: system.fabric
    summary: "<p>この現在のデータ ロス数を取得<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Epoch</xref>です。</p>\n<p>\r\n\r\n  <b>注釈:</b>データ損失の数のプロパティがデータの損失が疑われるたびに、更新される増加する値として、レプリカでのレプリカのクォーラムの損失が設定されている場合、プライマリ レプリカが含まれています。 </p>"
    syntax:
      content: public long getDataLossNumber()
      return:
        type: 0364520f
        description: <p>現在のデータが失われる数を表す long です。 </p>
  - uid: system.fabric._epoch.hashCode()
    id: hashCode()
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: hashCode()
    nameWithType: Epoch.hashCode()
    fullName: int system.fabric.Epoch.hashCode()
    overload: system.fabric._epoch.hashCode*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 114
    package: system.fabric
    syntax:
      content: public int hashCode()
      return:
        type: f75371fa
  - uid: system.fabric._epoch.setConfigurationNumber(long)
    id: setConfigurationNumber(long)
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: setConfigurationNumber(long configurationNumber)
    nameWithType: Epoch.setConfigurationNumber(long configurationNumber)
    fullName: void system.fabric.Epoch.setConfigurationNumber(long configurationNumber)
    overload: system.fabric._epoch.setConfigurationNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 109
    package: system.fabric
    summary: "<p>この現在の構成番号のプロパティを設定<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Epoch</xref>です。</p>\n<p>\r\n\r\n  <b>注釈:</b>構成番号が増加する値は、このレプリカの設定が変更されるたびに更新します。 サービスが通知され、現在の構成番号の場合にのみ<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Replicator#updateEpochAsync (system.fabric.Epoch、system.fabric.CancellationToken)</xref>メソッドは、レプリカ セットのプライマリ レプリカを変更しようとすると、結果として呼び出されます。 </p>"
    syntax:
      content: public void setConfigurationNumber(long configurationNumber)
      parameters:
        - id: configurationNumber
          type: 0364520f
          description: <p>構成の数を表す long です。 </p>
  - uid: system.fabric._epoch.setDataLossNumber(long)
    id: setDataLossNumber(long)
    parent: system.fabric._epoch
    href: system.fabric._epoch.yml
    langs:
      - java
    name: setDataLossNumber(long dataLossNumber)
    nameWithType: Epoch.setDataLossNumber(long dataLossNumber)
    fullName: void system.fabric.Epoch.setDataLossNumber(long dataLossNumber)
    overload: system.fabric._epoch.setDataLossNumber*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/system.fabric/src/system/fabric/Epoch.java
      startLine: 74
    package: system.fabric
    summary: "<p>この現在のデータ ロス数を設定<xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Epoch</xref>です。</p>\n<p>\r\n\r\n  <b>注釈:</b>データ損失の数値プロパティは、データの損失が疑われるたびに更新される単調に増加する値として、レプリカでのレプリカのクォーラムの損失が設定されている場合、プライマリ レプリカが含まれています。 </p>"
    syntax:
      content: public void setDataLossNumber(long dataLossNumber)
      parameters:
        - id: dataLossNumber
          type: 0364520f
          description: <p>現在のデータが失われる数を表す long です。 </p>
references:
  - uid: 0364520f
    spec.java:
      - name: long
        fullName: long
  - uid: system.fabric._epoch.Epoch*
    name: Epoch
    nameWithType: Epoch.Epoch
    fullName: system.fabric.Epoch.Epoch
    package: system.fabric
  - uid: system.fabric._epoch.getDataLossNumber*
    name: getDataLossNumber
    nameWithType: Epoch.getDataLossNumber
    fullName: long system.fabric.Epoch.getDataLossNumber
    package: system.fabric
  - uid: system.fabric._epoch.setDataLossNumber*
    name: setDataLossNumber
    nameWithType: Epoch.setDataLossNumber
    fullName: void system.fabric.Epoch.setDataLossNumber
    package: system.fabric
  - uid: system.fabric._epoch.getConfigurationNumber*
    name: getConfigurationNumber
    nameWithType: Epoch.getConfigurationNumber
    fullName: long system.fabric.Epoch.getConfigurationNumber
    package: system.fabric
  - uid: system.fabric._epoch.setConfigurationNumber*
    name: setConfigurationNumber
    nameWithType: Epoch.setConfigurationNumber
    fullName: void system.fabric.Epoch.setConfigurationNumber
    package: system.fabric
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: system.fabric._epoch.hashCode*
    name: hashCode
    nameWithType: Epoch.hashCode
    fullName: int system.fabric.Epoch.hashCode
    package: system.fabric
  - uid: '79317049'
    spec.java:
      - name: Object
        fullName: Object
  - uid: 4fc6e284
    spec.java:
      - name: boolean
        fullName: boolean
  - uid: system.fabric._epoch.equals*
    name: equals
    nameWithType: Epoch.equals
    fullName: boolean system.fabric.Epoch.equals
    package: system.fabric
  - uid: system.fabric._epoch.compareTo*
    name: compareTo
    nameWithType: Epoch.compareTo
    fullName: int system.fabric.Epoch.compareTo
    package: system.fabric
  - uid: system.fabric._epoch
    parent: system.fabric
    href: system.fabric._epoch.yml
    name: Epoch
    nameWithType: Epoch
    fullName: system.fabric.Epoch
    type: Class
    summary: "<p>Service Fabric でパーティションの現在のバージョンを表します。 </p>\n<p>\r\n\r\n  <b>注釈:</b>、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>パーティション全体の構成番号です。 レプリカの構成は、たとえば、プライマリ レプリカが変更されたときに、変更を設定すると、新しいプライマリ レプリカからレプリケートされた操作と呼ばれます新しい<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>、古いプライマリによって送信された 1 つからレプリカです。 プライマリが変更されたというは、通常、元のプライマリ レプリカの影響を受ける失敗によって影響を受けませんセカンダリ レプリカに直接表示されません。 プライマリ レプリカが変更されたことを追跡するために、セカンダリ レプリカに伝達するがします。 使用してこのような通信が発生した、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#updateEpochAsync (system.fabric.Epoch、system.fabric.SequenceNumber、system.fabric.CancellationToken)</xref>メソッドです。 ほとんどのサービスがの内部フィールドの詳細を無視することができます、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>ことを知っておく通常で十分ですので、<xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>が変更されたと操作の相対順序を判別するエポックを比較してシステム内のイベント。 比較操作は、この目的で提供されます。 </p>"
    syntax: *ref_1
  - uid: 'system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)'
    parent: system.fabric._state_provider
    href: system.fabric._state_provider.yml
    name: 'updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    nameWithType: 'StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<?> system.fabric.StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
    type: Method
    summary: "<p>レプリカ セットの構成が変更の理由で変更または、プライマリ レプリカへの変更をしようとしましたが、レプリカを示します。 変更は、エラーまたは以前のプライマリ レプリカの負荷分散のために発生します。 <xref uid=\"system.fabric._epoch\" data-throw-if-not-resolved=\"false\">エポック</xref>変更が特定のプライマリ レプリカによって送信された実際の構成の期間に操作を分割することによって、バリアとして機能します。</p>\n<p>\r\n\r\n  <b>注釈:</b>内の情報、 <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateProvider#updateEpochAsync (エポック、SequenceNumber、CancellationToken)</xref>メソッドにより、進行状況ベクターは、各エポックの一覧を維持するためにサービスレプリカが受信して、最大 LSN に含まれていた。 現在適用されている最大の LSN と進行状況のベクター データは、レプリカの状態を説明するコピー操作中に送信するセカンダリ レプリカに役立ちます。 コピー操作中に、セカンダリ レプリカから受信した進行状況のベクトルを比較するには、セカンダリ レプリカが最新かどうか、どの状態は、セカンダリ レプリカに送信する必要があり、セカンダリ レプリカが false の進行状況を行われたかどうかを判断するプライマリ レプリカが有効にします。 False の進行状況は、セカンダリ レプリカは、以前のエポックの LSN が、プライマリ レプリカは、その進行状況のベクター内にある LSN よりも大きかったレポートを意味します。 </p>"
    syntax:
      content: 'public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)'
      parameters:
        - id: epoch
          type: system.fabric._epoch
          description: <p>新しい<xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">system.fabric.Epoch</xref>です。 </p>
        - id: previousEpochLastSequenceNumber
          type: system.fabric._sequence_number
          description: <p>以前のエポックの最大シーケンス番号 (LSN)。 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._cancellation_token\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref>操作の取り消し状態を表すオブジェクト。 </p>"
      return:
        type: 16409f84
        description: <p>返します<xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>です。 </p>