### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.services.remoting.client._service_remoting_client
    id: _service_remoting_client
    parent: microsoft.servicefabric.services.remoting.client
    children:
      - 'microsoft.servicefabric.services.remoting.client._service_remoting_client.requestResponseAsync(ServiceRemotingMessageHeaders,byte [])'
      - 'microsoft.servicefabric.services.remoting.client._service_remoting_client.sendOneWay(ServiceRemotingMessageHeaders,byte [])'
    href: microsoft.servicefabric.services.remoting.client._service_remoting_client.yml
    langs:
      - java
    name: ServiceRemotingClient
    nameWithType: ServiceRemotingClient
    fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClient
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceRemotingClient.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceRemotingClient.java
      startLine: 11
    package: microsoft.servicefabric.services.remoting.client
    summary: <p>クライアントを提供する実装する必要がありますのあるインターフェイスを定義する<xref uid="microsoft.servicefabric.services.remoting._service" data-throw-if-not-resolved="false">サービス</xref>リモート通信します。 </p>
    syntax:
      content: public interface ServiceRemotingClient extends CommunicationClient
    inheritedMembers:
      - microsoft.servicefabric.services.communication.client._communication_client.getEndPoint()
      - microsoft.servicefabric.services.communication.client._communication_client.getListenerName()
      - microsoft.servicefabric.services.communication.client._communication_client.getResolvedServicePartition()
      - microsoft.servicefabric.services.communication.client._communication_client.setEndPoint(ResolvedServiceEndpoint)
      - microsoft.servicefabric.services.communication.client._communication_client.setListenerName(String)
      - microsoft.servicefabric.services.communication.client._communication_client.setResolvedServicePartition(ResolvedServicePartition)
  - uid: 'microsoft.servicefabric.services.remoting.client._service_remoting_client.requestResponseAsync(ServiceRemotingMessageHeaders,byte [])'
    id: 'requestResponseAsync(ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.client._service_remoting_client
    href: microsoft.servicefabric.services.remoting.client._service_remoting_client.yml
    langs:
      - java
    name: 'requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    overload: microsoft.servicefabric.services.remoting.client._service_remoting_client.requestResponseAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceRemotingClient.java
      startLine: 21
    package: microsoft.servicefabric.services.remoting.client
    summary: |-
      <p>サービスにメッセージを送信し、バックアップの応答を取得します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>メッセージ本文 </p>
      return:
        type: 5fe2dfa4
        description: <p>応答本文 </p>
  - uid: 'microsoft.servicefabric.services.remoting.client._service_remoting_client.sendOneWay(ServiceRemotingMessageHeaders,byte [])'
    id: 'sendOneWay(ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.client._service_remoting_client
    href: microsoft.servicefabric.services.remoting.client._service_remoting_client.yml
    langs:
      - java
    name: 'sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'ServiceRemotingClient.sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    overload: microsoft.servicefabric.services.remoting.client._service_remoting_client.sendOneWay*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceRemotingClient.java
      startLine: 31
    package: microsoft.servicefabric.services.remoting.client
    summary: |-
      <p>一方向のメッセージをサービスに送信します。</p>
      <p></p>
    syntax:
      content: 'public void sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>メッセージ本文 </p>
references:
  - uid: ccd9418d
    spec.java:
      - name: 'byte []'
        fullName: 'byte []'
  - uid: 5fe2dfa4
    spec.java:
      - name: 'CompletableFuture<byte[]>'
        fullName: 'CompletableFuture<byte[]>'
  - uid: microsoft.servicefabric.services.remoting.client._service_remoting_client.requestResponseAsync*
    name: requestResponseAsync
    nameWithType: ServiceRemotingClient.requestResponseAsync
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.requestResponseAsync'
    package: microsoft.servicefabric.services.remoting.client
  - uid: microsoft.servicefabric.services.remoting.client._service_remoting_client.sendOneWay*
    name: sendOneWay
    nameWithType: ServiceRemotingClient.sendOneWay
    fullName: void microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.sendOneWay
    package: microsoft.servicefabric.services.remoting.client
  - uid: microsoft.servicefabric.services.communication.client._communication_client.getEndPoint()
    parent: microsoft.servicefabric.services.communication.client._communication_client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: getEndPoint()
    nameWithType: CommunicationClient.getEndPoint()
    fullName: ResolvedServiceEndpoint microsoft.servicefabric.services.communication.client.CommunicationClient.getEndPoint()
    type: Method
    summary: |-
      <p>クライアントが接続されているサービス エンドポイントを取得します。</p>
      <p></p>
    syntax:
      content: public ResolvedServiceEndpoint getEndPoint()
      return:
        type: system.fabric._resolved_service_endpoint
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric._resolved_service_endpoint\" data-throw-if-not-resolved=\"false\">system.fabric.ResolvedServiceEndpoint</xref>\r\n\r\n</p>"
  - uid: microsoft.servicefabric.services.communication.client._communication_client.getListenerName()
    parent: microsoft.servicefabric.services.communication.client._communication_client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: getListenerName()
    nameWithType: CommunicationClient.getListenerName()
    fullName: String microsoft.servicefabric.services.communication.client.CommunicationClient.getListenerName()
    type: Method
    summary: |-
      <p>レプリカまたはインスタンスに、クライアントが接続されているリスナーの名前を取得します。</p>
      <p></p>
    syntax:
      content: public String getListenerName()
      return:
        type: '26831127'
        description: <p>リスナーの名前 </p>
  - uid: microsoft.servicefabric.services.communication.client._communication_client.getResolvedServicePartition()
    parent: microsoft.servicefabric.services.communication.client._communication_client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: getResolvedServicePartition()
    nameWithType: CommunicationClient.getResolvedServicePartition()
    fullName: ResolvedServicePartition microsoft.servicefabric.services.communication.client.CommunicationClient.getResolvedServicePartition()
    type: Method
    summary: |-
      <p>このクライアントが作成されたときに使用された解決済みのサービス パーティションを取得します。</p>
      <p></p>
    syntax:
      content: public ResolvedServicePartition getResolvedServicePartition()
      return:
        type: system.fabric._resolved_service_partition
        description: "<p>\r\n\r\n  <xref uid=\"system.fabric._resolved_service_partition\" data-throw-if-not-resolved=\"false\">system.fabric.ResolvedServicePartition</xref>オブジェクト </p>"
  - uid: microsoft.servicefabric.services.communication.client._communication_client.setEndPoint(ResolvedServiceEndpoint)
    parent: microsoft.servicefabric.services.communication.client._communication_client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: setEndPoint(ResolvedServiceEndpoint endPoint)
    nameWithType: CommunicationClient.setEndPoint(ResolvedServiceEndpoint endPoint)
    fullName: void microsoft.servicefabric.services.communication.client.CommunicationClient.setEndPoint(ResolvedServiceEndpoint endPoint)
    type: Method
    summary: |-
      <p>クライアントが接続されているサービス エンドポイントを設定します。</p>
      <p></p>
    syntax:
      content: public void setEndPoint(ResolvedServiceEndpoint endPoint)
      parameters:
        - id: endPoint
          type: system.fabric._resolved_service_endpoint
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._resolved_service_endpoint\" data-throw-if-not-resolved=\"false\">system.fabric.ResolvedServiceEndpoint</xref>\r\n\r\n</p>"
  - uid: microsoft.servicefabric.services.communication.client._communication_client.setListenerName(String)
    parent: microsoft.servicefabric.services.communication.client._communication_client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: setListenerName(String listenerName)
    nameWithType: CommunicationClient.setListenerName(String listenerName)
    fullName: void microsoft.servicefabric.services.communication.client.CommunicationClient.setListenerName(String listenerName)
    type: Method
    summary: |-
      <p>レプリカまたはに、クライアントが接続されているインスタンスのリスナーの名前を設定します。</p>
      <p></p>
    syntax:
      content: public void setListenerName(String listenerName)
      parameters:
        - id: listenerName
          type: '26831127'
          description: <p>リスナーの名前 </p>
  - uid: microsoft.servicefabric.services.communication.client._communication_client.setResolvedServicePartition(ResolvedServicePartition)
    parent: microsoft.servicefabric.services.communication.client._communication_client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: setResolvedServicePartition(ResolvedServicePartition servicePartition)
    nameWithType: CommunicationClient.setResolvedServicePartition(ResolvedServicePartition servicePartition)
    fullName: void microsoft.servicefabric.services.communication.client.CommunicationClient.setResolvedServicePartition(ResolvedServicePartition servicePartition)
    type: Method
    summary: |-
      <p>このクライアントが作成されたときに使用された解決済みのサービス パーティションを設定します。</p>
      <p></p>
    syntax:
      content: public void setResolvedServicePartition(ResolvedServicePartition servicePartition)
      parameters:
        - id: servicePartition
          type: system.fabric._resolved_service_partition
          description: "<p>\r\n\r\n  <xref uid=\"system.fabric._resolved_service_partition\" data-throw-if-not-resolved=\"false\">system.fabric.ResolvedServicePartition</xref>オブジェクト </p>"
  - uid: microsoft.servicefabric.services.communication.client._communication_client
    parent: microsoft.servicefabric.services.communication.client
    href: microsoft.servicefabric.services.communication.client._communication_client.yml
    name: CommunicationClient
    nameWithType: CommunicationClient
    fullName: microsoft.servicefabric.services.communication.client.CommunicationClient
    type: Interface
    summary: <p>信頼性の高いサービスの通信のクライアントを表すインターフェイスを定義します。 </p>
    syntax:
      content: public interface CommunicationClient
  - uid: microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b
    parent: microsoft.servicefabric.services.remoting.fabrictransport.client
    href: microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b.yml
    name: FabricTransportServiceRemotingClient
    nameWithType: FabricTransportServiceRemotingClient
    fullName: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClient
    type: Class
    syntax:
      content: public class FabricTransportServiceRemotingClient implements ServiceRemotingClient
  - uid: 'microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b.requestResponseAsync(ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b
    href: microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b.yml
    name: 'requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'FabricTransportServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>サービスにメッセージを送信し、バックアップの応答を取得します。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>メッセージ本文 </p>
      return:
        type: 5fe2dfa4
        description: <p>応答本文 </p>
  - uid: microsoft.servicefabric.services.remoting._service_remoting_message_headers
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_message_headers.yml
    name: ServiceRemotingMessageHeaders
    nameWithType: ServiceRemotingMessageHeaders
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
    type: Class
    summary: <p>ServiceRemoting メッセージと共に送信されるヘッダーを指定します。 </p>
    syntax:
      content: public class ServiceRemotingMessageHeaders
  - uid: 'microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b.sendOneWay(ServiceRemotingMessageHeaders,byte [])'
    parent: microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b
    href: microsoft.servicefabric.services.remoting.fabrictransport.client._fabric_800c0863cfd762cee2ea4b3c6e93929b.yml
    name: 'sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    nameWithType: 'FabricTransportServiceRemotingClient.sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClient.sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
    type: Method
    summary: |-
      <p>一方向のメッセージをサービスに送信します。</p>
      <p></p>
    syntax:
      content: 'public void sendOneWay(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)'
      parameters:
        - id: messageHeaders
          type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
          description: <p>メッセージ ヘッダー </p>
        - id: requestBody
          type: ccd9418d
          description: <p>メッセージ本文 </p>
  - uid: microsoft.servicefabric.services.remoting._service
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service.yml
    name: Service
    nameWithType: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    type: Interface
    summary: <p>これは、サービスのインターフェイスのリモート処理を有効にするためのマーカー インターフェイスです。 <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref>このインターフェイスから派生する、サービスによって実装されたすべてのインターフェイスのリモート処理を提供します。 リモート インターフェイスは、クライアント側プロキシを経由してアクセスできます。 </p>
    syntax:
      content: public interface Service