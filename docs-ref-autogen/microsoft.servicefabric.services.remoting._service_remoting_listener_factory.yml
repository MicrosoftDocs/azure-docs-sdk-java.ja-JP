### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.services.remoting._service_remoting_listener_factory
    id: _service_remoting_listener_factory
    parent: microsoft.servicefabric.services.remoting
    children:
      - 'microsoft.servicefabric.services.remoting._service_remoting_listener_factory.create(T,ServiceContext)'
    href: microsoft.servicefabric.services.remoting._service_remoting_listener_factory.yml
    langs:
      - java
    name: ServiceRemotingListenerFactory
    nameWithType: ServiceRemotingListenerFactory
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingListenerFactory
    type: Class
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingListenerFactory.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingListenerFactory.java
      startLine: 10
    package: microsoft.servicefabric.services.remoting
    summary: <p>このクラスを作成する静的メソッドを提供する<xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.ServiceRemotingListener</xref>から派生したサービス インターフェイスのリモート処理メソッドに関する<xref uid="microsoft.servicefabric.services.remoting._service" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.Service</xref>インターフェイスです。 </p>
    syntax:
      content: public class ServiceRemotingListenerFactory
    inheritance:
      - java.lang.Object
  - uid: 'microsoft.servicefabric.services.remoting._service_remoting_listener_factory.create(T,ServiceContext)'
    id: 'create(T,ServiceContext)'
    parent: microsoft.servicefabric.services.remoting._service_remoting_listener_factory
    href: microsoft.servicefabric.services.remoting._service_remoting_listener_factory.yml
    langs:
      - java
    name: 'create(T serviceImplementation, ServiceContext serviceContext)'
    nameWithType: 'ServiceRemotingListenerFactory.create(T serviceImplementation, ServiceContext serviceContext)'
    fullName: 'static <T extends Service> ServiceRemotingListener microsoft.servicefabric.services.remoting.ServiceRemotingListenerFactory.create(T serviceImplementation, ServiceContext serviceContext)'
    overload: microsoft.servicefabric.services.remoting._service_remoting_listener_factory.create*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingListenerFactory.java
      startLine: 31
    package: microsoft.servicefabric.services.remoting
    summary: |-
      <p>作成する静的メソッド、 <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.ServiceRemotingListener</xref>のステートフルなサービスの実装です。</p>
      <p></p>
    syntax:
      content: 'public static static<T extends Service> ServiceRemotingListener create(T serviceImplementation, ServiceContext serviceContext)'
      parameters:
        - id: serviceImplementation
          type: 8ce1ecb9
          description: <p>ステートフルなサービスの実装。 </p>
        - id: serviceContext
          type: system.fabric._service_context
          description: <p>サービスが動作するコンテキスト。 </p>
      return:
        type: 1e2c6103microsoft.servicefabric.services.remoting._service410a1f1cmicrosoft.servicefabric.services.remoting._service_remoting_listener
        description: "<p>A <xref uid=\"microsoft.servicefabric.services.remoting._service_remoting_listener\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.ServiceRemotingListener</xref>通信リスナーをリモートからの派生インターフェイス<xref uid=\"microsoft.servicefabric.services.remoting._service\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.Service</xref>インターフェイスです。<code>&lt;T&gt; \r\n\r\n    </code> サービス実装の制約を入力します。 サービスの実装がから派生する必要があります<xref uid=\"microsoft.servicefabric.services.runtime._stateful_service_base\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.runtime.StatefulServiceBase</xref>から派生した 1 つまたは複数のインターフェイスを実装および<xref uid=\"microsoft.servicefabric.services.remoting._service\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.services.remoting.Service</xref>インターフェイスです。 </p>"
references:
  - uid: 8ce1ecb9
    spec.java:
      - name: T
        fullName: T
  - uid: 1e2c6103microsoft.servicefabric.services.remoting._service410a1f1cmicrosoft.servicefabric.services.remoting._service_remoting_listener
    spec.java:
      - name: 'static<T extends '
        fullName: 'static<T extends '
      - uid: microsoft.servicefabric.services.remoting._service
        name: Service
        fullName: microsoft.servicefabric.services.remoting.Service
        href: microsoft.servicefabric.services.remoting._service.yml
      - name: '> '
        fullName: '> '
      - uid: microsoft.servicefabric.services.remoting._service_remoting_listener
        name: ServiceRemotingListener
        fullName: microsoft.servicefabric.services.remoting.ServiceRemotingListener
        href: microsoft.servicefabric.services.remoting._service_remoting_listener.yml
  - uid: microsoft.servicefabric.services.remoting._service_remoting_listener_factory.create*
    name: create
    nameWithType: ServiceRemotingListenerFactory.create
    fullName: static <T extends Service> ServiceRemotingListener microsoft.servicefabric.services.remoting.ServiceRemotingListenerFactory.create
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting._service
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service.yml
    name: Service
    nameWithType: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    type: Interface
    summary: <p>これは、サービスのインターフェイスのリモート処理を有効にするためのマーカー インターフェイスです。 <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref>このインターフェイスから派生する、サービスによって実装されたすべてのインターフェイスのリモート処理を提供します。 リモート インターフェイスは、クライアント側プロキシを経由してアクセスできます。 </p>
    syntax:
      content: public interface Service
  - uid: microsoft.servicefabric.services.remoting._service_remoting_listener
    parent: microsoft.servicefabric.services.remoting
    href: microsoft.servicefabric.services.remoting._service_remoting_listener.yml
    name: ServiceRemotingListener
    nameWithType: ServiceRemotingListener
    fullName: microsoft.servicefabric.services.remoting.ServiceRemotingListener
    type: Interface
    summary: <p>ステートレスおよびステートフルなサービスのインターフェイスのリモート処理を有効にするための基本の通信インターフェイスを定義します。 </p>
    syntax:
      content: public interface ServiceRemotingListener extends CommunicationListener
  - uid: system.fabric._service_context
    parent: system.fabric
    href: system.fabric._service_context.yml
    name: ServiceContext
    nameWithType: ServiceContext
    fullName: system.fabric.ServiceContext
    type: Class
    summary: <p>下にあるサービスが動作しているサービス コンテキストを表します。 </p>
    syntax:
      content: public class ServiceContext
  - uid: microsoft.servicefabric.services.runtime._stateful_service_base
    parent: microsoft.servicefabric.services.runtime
    href: microsoft.servicefabric.services.runtime._stateful_service_base.yml
    name: StatefulServiceBase
    nameWithType: StatefulServiceBase
    fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase
    type: Class
    summary: <p>ベースのステートフルな信頼性の高いサービスを Microsoft Service Fabric の基本クラスを表します。 </p>
    syntax:
      content: public class StatefulServiceBase