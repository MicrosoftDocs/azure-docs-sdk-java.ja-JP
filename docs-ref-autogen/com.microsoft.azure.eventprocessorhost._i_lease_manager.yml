### YamlMime:ManagedReference
items:
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager
    id: _i_lease_manager
    parent: com.microsoft.azure.eventprocessorhost
    children:
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists(String)
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists()
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease(Lease)
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore()
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds()
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds()
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists()
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease(Lease)
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease(Lease)
      - com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease(Lease)
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: ILeaseManager
    nameWithType: ILeaseManager
    fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager
    type: Interface
    source:
      remote: &ref_0
        path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
        branch: master
        repo: 'https://github.com/Azure/azure-event-hubs-java'
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 20
    package: com.microsoft.azure.eventprocessorhost
    syntax:
      content: public interface ILeaseManager
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
    id: acquireLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: acquireLease(Lease lease)
    nameWithType: ILeaseManager.acquireLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease(Lease lease)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 105
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-101">この目的のパーティションでリースを取得<xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>です。</span><span class="sxs-lookup"><span data-stu-id="861ae-101">Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</span></span></p>
      <p><span data-ttu-id="861ae-102">別のホストによって既に所有されているリースを取得することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="861ae-102">Note that it is legal to acquire a lease that is already owned by another host.</span></span> <span data-ttu-id="861ae-103">リース スティー リングは、他のホストが開始されたときにパーティションが再配布方法です。</span><span class="sxs-lookup"><span data-stu-id="861ae-103">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span></p>
      <p></p>
    syntax: &ref_2
      content: public Future<Boolean> acquireLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-104\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>から適切なパーティションの情報が、以前に取得<xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-104\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> info for the desired partition as previously obtained from <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span></span></p>"
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-105">リースは、その以外の場合は、正常に取得した場合は true。</span><span class="sxs-lookup"><span data-stu-id="861ae-105">true if the lease was acquired successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists(String)
    id: createLeaseIfNotExists(String)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: createLeaseIfNotExists(String partitionId)
    nameWithType: ILeaseManager.createLeaseIfNotExists(String partitionId)
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseIfNotExists(String partitionId)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 85
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-106">ストアに、リースの情報を作成、特定のパーティションが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="861ae-106">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="861ae-107">何も実行しない、ストアに既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="861ae-107">Do nothing if it does exist in the store already.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Lease> createLeaseIfNotExists(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
          description: <p><span data-ttu-id="861ae-108">リース情報を作成するパーティションの id</span><span class="sxs-lookup"><span data-stu-id="861ae-108">id of partition to create lease info for</span></span> </p>
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
        description: <p><span data-ttu-id="861ae-109">パーティションの既存または新規に作成されたリース情報</span><span class="sxs-lookup"><span data-stu-id="861ae-109">the existing or newly-created lease info for the partition</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists()
    id: createLeaseStoreIfNotExists()
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: createLeaseStoreIfNotExists()
    nameWithType: ILeaseManager.createLeaseStoreIfNotExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseStoreIfNotExists()
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 51
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-110">リースのストアを作成することがない場合、何も存在する場合は。</span><span class="sxs-lookup"><span data-stu-id="861ae-110">Create the lease store if it does not exist, do nothing if it does exist.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> createLeaseStoreIfNotExists()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-111">ストアが既にリース場合は true が存在するか、正常に作成されました、false 以外の場合</span><span class="sxs-lookup"><span data-stu-id="861ae-111">true if the lease store already exists or was created successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease(Lease)
    id: deleteLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: deleteLease(Lease lease)
    nameWithType: ILeaseManager.deleteLease(Lease lease)
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLease(Lease lease)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 94
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-112">ストアから特定のパーティションのリース情報を削除します。</span><span class="sxs-lookup"><span data-stu-id="861ae-112">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="861ae-113">成功として扱われる特定のパーティションに対するストアドのリースがない場合。</span><span class="sxs-lookup"><span data-stu-id="861ae-113">If there is no stored lease for the given partition, that is treated as success.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Void> deleteLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-114\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>から適切なパーティションの情報が、以前に取得<xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-114\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> info for the desired partition as previously obtained from <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span></span></p>"
      return:
        type: 075d0a89
        description: <p><span data-ttu-id="861ae-115">取り消し</span><span class="sxs-lookup"><span data-stu-id="861ae-115">Void</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore()
    id: deleteLeaseStore()
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: deleteLeaseStore()
    nameWithType: ILeaseManager.deleteLeaseStore()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLeaseStore()
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 58
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-116">によって使用される not <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>が便利な関数は、テストに必要です。</span><span class="sxs-lookup"><span data-stu-id="861ae-116">Not used by <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, but a convenient function to have for testing.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> deleteLeaseStore()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-117">リース ストアは、その以外の場合は、正常に削除された場合は true。</span><span class="sxs-lookup"><span data-stu-id="861ae-117">true if the lease store was deleted successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
    id: getAllLeases()
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: getAllLeases()
    nameWithType: ILeaseManager.getAllLeases()
    fullName: Iterable<Future<Lease>> com.microsoft.azure.eventprocessorhost.ILeaseManager.getAllLeases()
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 76
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-118">すべてのパーティションのリース情報を返します。</span><span class="sxs-lookup"><span data-stu-id="861ae-118">Return the lease info for all partitions.</span></span></p>
      <p><span data-ttu-id="861ae-119">一般的な実装を呼び出す<xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref>すべてのパーティションにします。</span><span class="sxs-lookup"><span data-stu-id="861ae-119">A typical implementation could just call <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref> on all partitions.</span></span></p>
      <p></p>
    syntax:
      content: public Iterable<Future<Lease>> getAllLeases()
      return:
        type: 1f5dfe8ecom.microsoft.azure.eventprocessorhost._leasee7daa122
        description: <p><span data-ttu-id="861ae-120">リース情報の反復可能な一覧です。</span><span class="sxs-lookup"><span data-stu-id="861ae-120">Iterable list of lease info.</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)
    id: getLease(String)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: getLease(String partitionId)
    nameWithType: ILeaseManager.getLease(String partitionId)
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.getLease(String partitionId)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 67
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-121">指定されたパーティションのリース情報を返します。</span><span class="sxs-lookup"><span data-stu-id="861ae-121">Return the lease info for the specified partition.</span></span> <span data-ttu-id="861ae-122">指定したパーティションのストアにリースが作成されていない場合は null を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="861ae-122">Can return null if no lease has been created in the store for the specified partition.</span></span></p>
      <p></p>
    syntax: &ref_1
      content: public Future<Lease> getLease(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
          description: <p><span data-ttu-id="861ae-123">リースを取得するパーティションの id</span><span class="sxs-lookup"><span data-stu-id="861ae-123">id of partition to get lease for</span></span> </p>
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
        description: '<p><span data-ttu-id="861ae-124">パーティション、または null の情報をリース</span><span class="sxs-lookup"><span data-stu-id="861ae-124">lease info for the partition, or null</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds()
    id: getLeaseDurationInMilliseconds()
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: getLeaseDurationInMilliseconds()
    nameWithType: ILeaseManager.getLeaseDurationInMilliseconds()
    fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseDurationInMilliseconds()
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 37
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-125">テストのほとんどの場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="861ae-125">Mostly useful for testing.</span></span></p>
      <p></p>
    syntax:
      content: public int getLeaseDurationInMilliseconds()
      return:
        type: f75371fa
        description: <p><span data-ttu-id="861ae-126">更新されないと、有効期限が切れる前に、リースの期間です。</span><span class="sxs-lookup"><span data-stu-id="861ae-126">Duration of a lease before it expires unless renewed.</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds()
    id: getLeaseRenewIntervalInMilliseconds()
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: getLeaseRenewIntervalInMilliseconds()
    nameWithType: ILeaseManager.getLeaseRenewIntervalInMilliseconds()
    fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseRenewIntervalInMilliseconds()
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 30
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-127">リースをスキャンし、それらを更新か頻度 PartitionManager を指定するリース マネージャーの実装を使用できます。</span><span class="sxs-lookup"><span data-stu-id="861ae-127">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="861ae-128">ホストが動作を中断した後に適切なタイミングでリースを再配布するためには、10 秒などの比較的短い間隔お勧めします。</span><span class="sxs-lookup"><span data-stu-id="861ae-128">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="861ae-129">言うまでもなく偶発的な有効期限を防ぐために、リース期間の半分未満でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="861ae-129">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span></p>
      <p></p>
    syntax:
      content: public int getLeaseRenewIntervalInMilliseconds()
      return:
        type: f75371fa
        description: '<p><span data-ttu-id="861ae-130">スリープ スキャン間隔をミリ秒単位で指定します。</span><span class="sxs-lookup"><span data-stu-id="861ae-130">The sleep interval between scans, specified in milliseconds.</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists()
    id: leaseStoreExists()
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: leaseStoreExists()
    nameWithType: ILeaseManager.leaseStoreExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.leaseStoreExists()
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 44
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-131">リース ストアが存在しますか。</span><span class="sxs-lookup"><span data-stu-id="861ae-131">Does the lease store exist?</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> leaseStoreExists()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-132">true の場合は、false 以外の場合</span><span class="sxs-lookup"><span data-stu-id="861ae-132">true if it does, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease(Lease)
    id: releaseLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: releaseLease(Lease lease)
    nameWithType: ILeaseManager.releaseLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.releaseLease(Lease lease)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 126
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-133">このホストで現在保持されている、リースを付けます。</span><span class="sxs-lookup"><span data-stu-id="861ae-133">Give up a lease currently held by this host.</span></span></p>
      <p><span data-ttu-id="861ae-134">場合は、リースが盗難にあったされたり有効期限が切れて、解放が必要に応じてでありしようとした場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="861ae-134">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> releaseLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-135\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>を中止します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-135\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> to be give up</span></span> </p>"
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-136">リースは、その以外の場合は、正常にリリースされた場合は true。</span><span class="sxs-lookup"><span data-stu-id="861ae-136">true if the lease was released successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease(Lease)
    id: renewLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: renewLease(Lease lease)
    nameWithType: ILeaseManager.renewLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease(Lease lease)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 116
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-137">このホストで現在保持されているリースを更新します。</span><span class="sxs-lookup"><span data-stu-id="861ae-137">Renew a lease currently held by this host.</span></span></p>
      <p><span data-ttu-id="861ae-138">リースが盗難にあった場合または期限切れにした場合リリースされた、更新して更新することはできません。</span><span class="sxs-lookup"><span data-stu-id="861ae-138">If the lease has been stolen, or expired, or released, it is not possible to renew it.</span></span> <span data-ttu-id="861ae-139">呼び出す必要が<xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref>し<xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)" data-throw-if-not-resolved="false">acquireLease()</xref>もう一度です。</span><span class="sxs-lookup"><span data-stu-id="861ae-139">You will have to call <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref> and then <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)" data-throw-if-not-resolved="false">acquireLease()</xref> again.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> renewLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-140\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>を更新します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-140\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> to be renewed</span></span> </p>"
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-141">true の場合、リースは、その以外の場合は、正常に更新されました</span><span class="sxs-lookup"><span data-stu-id="861ae-141">true if the lease was renewed successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease(Lease)
    id: updateLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    langs:
      - java
    name: updateLease(Lease lease)
    nameWithType: ILeaseManager.updateLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.updateLease(Lease lease)
    overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease*
    type: Method
    source:
      remote: *ref_0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      startLine: 138
    package: com.microsoft.azure.eventprocessorhost
    summary: |-
      <p><span data-ttu-id="861ae-142">指定されたリースの情報と、ストアを更新します。</span><span class="sxs-lookup"><span data-stu-id="861ae-142">Update the store with the information in the provided lease.</span></span></p>
      <p><span data-ttu-id="861ae-143">更新するために現在のリースを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="861ae-143">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="861ae-144">リースが盗まれた、または有効期限が切れた、またはリリースを更新できません。</span><span class="sxs-lookup"><span data-stu-id="861ae-144">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="861ae-145">更新プロセス中にリースの有効期限を避けるために、更新プログラムを実行する前にリースを更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="861ae-145">Updating should renew the lease before performing the update to avoid lease expiration during the process.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> updateLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: <p><span data-ttu-id="861ae-146">新しいリース情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="861ae-146">New lease info to be stored</span></span> </p>
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-147">更新後に実行された場合は、正常にされていない場合は true</span><span class="sxs-lookup"><span data-stu-id="861ae-147">true if the updated was performed successfully, false if not</span></span> </p>'
references:
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds*
    name: getLeaseRenewIntervalInMilliseconds
    nameWithType: ILeaseManager.getLeaseRenewIntervalInMilliseconds
    fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseRenewIntervalInMilliseconds
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds*
    name: getLeaseDurationInMilliseconds
    nameWithType: ILeaseManager.getLeaseDurationInMilliseconds
    fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseDurationInMilliseconds
    package: com.microsoft.azure.eventprocessorhost
  - uid: ec0e250a
    spec.java:
      - name: Future<Boolean>
        fullName: Future<Boolean>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists*
    name: leaseStoreExists
    nameWithType: ILeaseManager.leaseStoreExists
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.leaseStoreExists
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists*
    name: createLeaseStoreIfNotExists
    nameWithType: ILeaseManager.createLeaseStoreIfNotExists
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseStoreIfNotExists
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore*
    name: deleteLeaseStore
    nameWithType: ILeaseManager.deleteLeaseStore
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLeaseStore
    package: com.microsoft.azure.eventprocessorhost
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
    spec.java:
      - name: Future<
        fullName: Future<
      - uid: com.microsoft.azure.eventprocessorhost._lease
        name: Lease
        fullName: com.microsoft.azure.eventprocessorhost.Lease
        href: com.microsoft.azure.eventprocessorhost._lease.yml
      - name: '>'
        fullName: '>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease*
    name: getLease
    nameWithType: ILeaseManager.getLease
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.getLease
    package: com.microsoft.azure.eventprocessorhost
  - uid: 1f5dfe8ecom.microsoft.azure.eventprocessorhost._leasee7daa122
    spec.java:
      - name: Iterable<Future<
        fullName: Iterable<Future<
      - uid: com.microsoft.azure.eventprocessorhost._lease
        name: Lease
        fullName: com.microsoft.azure.eventprocessorhost.Lease
        href: com.microsoft.azure.eventprocessorhost._lease.yml
      - name: '>>'
        fullName: '>>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases*
    name: getAllLeases
    nameWithType: ILeaseManager.getAllLeases
    fullName: Iterable<Future<Lease>> com.microsoft.azure.eventprocessorhost.ILeaseManager.getAllLeases
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists*
    name: createLeaseIfNotExists
    nameWithType: ILeaseManager.createLeaseIfNotExists
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseIfNotExists
    package: com.microsoft.azure.eventprocessorhost
  - uid: 075d0a89
    spec.java:
      - name: Future<Void>
        fullName: Future<Void>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease*
    name: deleteLease
    nameWithType: ILeaseManager.deleteLease
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLease
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease*
    name: acquireLease
    nameWithType: ILeaseManager.acquireLease
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease*
    name: renewLease
    nameWithType: ILeaseManager.renewLease
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease*
    name: releaseLease
    nameWithType: ILeaseManager.releaseLease
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.releaseLease
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease*
    name: updateLease
    nameWithType: ILeaseManager.updateLease
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.updateLease
    package: com.microsoft.azure.eventprocessorhost
  - uid: com.microsoft.azure.eventprocessorhost._azure_storage_checkpoint_lease_manager
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: InMemoryLeaseManager
    nameWithType: InMemoryLeaseManager
    fullName: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager
    type: Class
    syntax:
      content: public class InMemoryLeaseManager
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseRenewIntervalInMilliseconds()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: getLeaseRenewIntervalInMilliseconds()
    nameWithType: InMemoryLeaseManager.getLeaseRenewIntervalInMilliseconds()
    fullName: int com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLeaseRenewIntervalInMilliseconds()
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-148">リースをスキャンし、それらを更新か頻度 PartitionManager を指定するリース マネージャーの実装を使用できます。</span><span class="sxs-lookup"><span data-stu-id="861ae-148">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="861ae-149">ホストが動作を中断した後に適切なタイミングでリースを再配布するためには、10 秒などの比較的短い間隔お勧めします。</span><span class="sxs-lookup"><span data-stu-id="861ae-149">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="861ae-150">言うまでもなく偶発的な有効期限を防ぐために、リース期間の半分未満でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="861ae-150">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span></p>
      <p></p>
    syntax:
      content: public int getLeaseRenewIntervalInMilliseconds()
      return:
        type: f75371fa
        description: '<p><span data-ttu-id="861ae-151">スリープ スキャン間隔をミリ秒単位で指定します。</span><span class="sxs-lookup"><span data-stu-id="861ae-151">The sleep interval between scans, specified in milliseconds.</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseDurationInMilliseconds()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: getLeaseDurationInMilliseconds()
    nameWithType: InMemoryLeaseManager.getLeaseDurationInMilliseconds()
    fullName: int com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLeaseDurationInMilliseconds()
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-152">テストのほとんどの場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="861ae-152">Mostly useful for testing.</span></span></p>
      <p></p>
    syntax:
      content: public int getLeaseDurationInMilliseconds()
      return:
        type: f75371fa
        description: <p><span data-ttu-id="861ae-153">更新されないと、有効期限が切れる前に、リースの期間です。</span><span class="sxs-lookup"><span data-stu-id="861ae-153">Duration of a lease before it expires unless renewed.</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.leaseStoreExists()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: leaseStoreExists()
    nameWithType: InMemoryLeaseManager.leaseStoreExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.leaseStoreExists()
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-154">リース ストアが存在しますか。</span><span class="sxs-lookup"><span data-stu-id="861ae-154">Does the lease store exist?</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> leaseStoreExists()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-155">true の場合は、false 以外の場合</span><span class="sxs-lookup"><span data-stu-id="861ae-155">true if it does, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseStoreIfNotExists()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: createLeaseStoreIfNotExists()
    nameWithType: InMemoryLeaseManager.createLeaseStoreIfNotExists()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.createLeaseStoreIfNotExists()
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-156">リースのストアを作成することがない場合、何も存在する場合は。</span><span class="sxs-lookup"><span data-stu-id="861ae-156">Create the lease store if it does not exist, do nothing if it does exist.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> createLeaseStoreIfNotExists()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-157">ストアが既にリース場合は true が存在するか、正常に作成されました、false 以外の場合</span><span class="sxs-lookup"><span data-stu-id="861ae-157">true if the lease store already exists or was created successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLeaseStore()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: deleteLeaseStore()
    nameWithType: InMemoryLeaseManager.deleteLeaseStore()
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.deleteLeaseStore()
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-158">によって使用される not <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>が便利な関数は、テストに必要です。</span><span class="sxs-lookup"><span data-stu-id="861ae-158">Not used by <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, but a convenient function to have for testing.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> deleteLeaseStore()
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-159">リース ストアは、その以外の場合は、正常に削除された場合は true。</span><span class="sxs-lookup"><span data-stu-id="861ae-159">true if the lease store was deleted successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._event_processor_host
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
    name: EventProcessorHost
    nameWithType: EventProcessorHost
    fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
    type: Class
    syntax:
      content: public class EventProcessorHost
  - uid: com.microsoft.azure.eventprocessorhost._lease
    parent: com.microsoft.azure.eventprocessorhost
    href: com.microsoft.azure.eventprocessorhost._lease.yml
    name: Lease
    nameWithType: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    type: Class
    summary: "<p><span data-ttu-id=\"861ae-160\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>クラスがパブリックで上級ユーザーを実装できるように、 <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-160\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> class is public so that advanced users can implement an <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>.</span></span> <span data-ttu-id=\"861ae-161\">実装している場合を除き、 <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>このクラスのオブジェクトに対処する必要はありませんか、クラスを直接派生します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-161\">Unless you are implementing <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly.</span></span> </p>\n\n<p><span data-ttu-id=\"861ae-162\">実装する場合、 <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>詳細持ち運びし、isExpired をオーバーライドするには、このクラスから派生する必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-162\">When implementing an <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref> it may be necessary to derive from this class to carry around more information and override isExpired.</span></span> <span data-ttu-id=\"861ae-163\">データ フィールドが残されていますプライベートの代わりに、完全なセットがあるために、保護の getter および setter (partitionId は不変) を除くを同等のアクセスを提供します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-163\">The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access.</span></span> <span data-ttu-id=\"861ae-164\">AzureBlobLease を実装する場合などがなかった、get アクセス操作子以上のアクセス権の必要性と set アクセス操作子を提供します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-164\">When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide.</span></span> </p>\n<p><span data-ttu-id=\"861ae-165\">なお、<xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>オブジェクトには、パーティション リースに関する情報が含まれているのみです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-165\">Note that a <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> object just carries information about a partition lease.</span></span> <span data-ttu-id=\"861ae-166\">取得/更新/解放する機能、リースがすべてで、 <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-166\">The functionality to acquire/renew/release a lease is all on the <xref uid=\"com.microsoft.azure.eventprocessorhost._i_lease_manager\" data-throw-if-not-resolved=\"false\">ILeaseManager</xref>.</span></span> </p>"
    syntax:
      content: public class Lease
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: getLease(String partitionId)
    nameWithType: InMemoryLeaseManager.getLease(String partitionId)
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLease(String partitionId)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-167">指定されたパーティションのリース情報を返します。</span><span class="sxs-lookup"><span data-stu-id="861ae-167">Return the lease info for the specified partition.</span></span> <span data-ttu-id="861ae-168">指定したパーティションのストアにリースが作成されていない場合は null を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="861ae-168">Can return null if no lease has been created in the store for the specified partition.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Lease> getLease(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
          description: <p><span data-ttu-id="861ae-169">リースを取得するパーティションの id</span><span class="sxs-lookup"><span data-stu-id="861ae-169">id of partition to get lease for</span></span> </p>
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
        description: '<p><span data-ttu-id="861ae-170">パーティション、または null の情報をリース</span><span class="sxs-lookup"><span data-stu-id="861ae-170">lease info for the partition, or null</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getAllLeases()
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: getAllLeases()
    nameWithType: InMemoryLeaseManager.getAllLeases()
    fullName: Iterable<Future<Lease>> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getAllLeases()
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-171">すべてのパーティションのリース情報を返します。</span><span class="sxs-lookup"><span data-stu-id="861ae-171">Return the lease info for all partitions.</span></span></p>
      <p><span data-ttu-id="861ae-172">一般的な実装を呼び出す<xref uid="com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref>すべてのパーティションにします。</span><span class="sxs-lookup"><span data-stu-id="861ae-172">A typical implementation could just call <xref uid="com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref> on all partitions.</span></span></p>
      <p></p>
    syntax:
      content: public Iterable<Future<Lease>> getAllLeases()
      return:
        type: 1f5dfe8ecom.microsoft.azure.eventprocessorhost._leasee7daa122
        description: <p><span data-ttu-id="861ae-173">リース情報の反復可能な一覧です。</span><span class="sxs-lookup"><span data-stu-id="861ae-173">Iterable list of lease info.</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    name: getLease(String partitionId)
    nameWithType: ILeaseManager.getLease(String partitionId)
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.getLease(String partitionId)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-174">指定されたパーティションのリース情報を返します。</span><span class="sxs-lookup"><span data-stu-id="861ae-174">Return the lease info for the specified partition.</span></span> <span data-ttu-id="861ae-175">指定したパーティションのストアにリースが作成されていない場合は null を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="861ae-175">Can return null if no lease has been created in the store for the specified partition.</span></span></p>
      <p></p>
    syntax: *ref_1
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseIfNotExists(String)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: createLeaseIfNotExists(String partitionId)
    nameWithType: InMemoryLeaseManager.createLeaseIfNotExists(String partitionId)
    fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.createLeaseIfNotExists(String partitionId)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-176">ストアに、リースの情報を作成、特定のパーティションが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="861ae-176">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="861ae-177">何も実行しない、ストアに既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="861ae-177">Do nothing if it does exist in the store already.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Lease> createLeaseIfNotExists(String partitionId)
      parameters:
        - id: partitionId
          type: '26831127'
          description: <p><span data-ttu-id="861ae-178">リース情報を作成するパーティションの id</span><span class="sxs-lookup"><span data-stu-id="861ae-178">id of partition to create lease info for</span></span> </p>
      return:
        type: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
        description: <p><span data-ttu-id="861ae-179">パーティションの既存または新規に作成されたリース情報</span><span class="sxs-lookup"><span data-stu-id="861ae-179">the existing or newly-created lease info for the partition</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: deleteLease(Lease lease)
    nameWithType: InMemoryLeaseManager.deleteLease(Lease lease)
    fullName: Future<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.deleteLease(Lease lease)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-180">ストアから特定のパーティションのリース情報を削除します。</span><span class="sxs-lookup"><span data-stu-id="861ae-180">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="861ae-181">成功として扱われる特定のパーティションに対するストアドのリースがない場合。</span><span class="sxs-lookup"><span data-stu-id="861ae-181">If there is no stored lease for the given partition, that is treated as success.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Void> deleteLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-182\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>から適切なパーティションの情報が、以前に取得<xref uid=\"com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-182\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> info for the desired partition as previously obtained from <xref uid=\"com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span></span></p>"
      return:
        type: 075d0a89
        description: <p><span data-ttu-id="861ae-183">取り消し</span><span class="sxs-lookup"><span data-stu-id="861ae-183">Void</span></span> </p>
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: acquireLease(Lease lease)
    nameWithType: InMemoryLeaseManager.acquireLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.acquireLease(Lease lease)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-184">この目的のパーティションでリースを取得<xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>です。</span><span class="sxs-lookup"><span data-stu-id="861ae-184">Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</span></span></p>
      <p><span data-ttu-id="861ae-185">別のホストによって既に所有されているリースを取得することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="861ae-185">Note that it is legal to acquire a lease that is already owned by another host.</span></span> <span data-ttu-id="861ae-186">リース スティー リングは、他のホストが開始されたときにパーティションが再配布方法です。</span><span class="sxs-lookup"><span data-stu-id="861ae-186">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> acquireLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-187\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>から適切なパーティションの情報が、以前に取得<xref uid=\"com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-187\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> info for the desired partition as previously obtained from <xref uid=\"com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)\" data-throw-if-not-resolved=\"false\">getLease()</xref></span></span></p>"
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-188">リースは、その以外の場合は、正常に取得した場合は true。</span><span class="sxs-lookup"><span data-stu-id="861ae-188">true if the lease was acquired successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.renewLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: renewLease(Lease lease)
    nameWithType: InMemoryLeaseManager.renewLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.renewLease(Lease lease)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-189">このホストで現在保持されているリースを更新します。</span><span class="sxs-lookup"><span data-stu-id="861ae-189">Renew a lease currently held by this host.</span></span></p>
      <p><span data-ttu-id="861ae-190">リースが盗難にあった場合または期限切れにした場合リリースされた、更新して更新することはできません。</span><span class="sxs-lookup"><span data-stu-id="861ae-190">If the lease has been stolen, or expired, or released, it is not possible to renew it.</span></span> <span data-ttu-id="861ae-191">呼び出す必要が<xref uid="com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref>し<xref uid="com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease(Lease)" data-throw-if-not-resolved="false">acquireLease()</xref>もう一度です。</span><span class="sxs-lookup"><span data-stu-id="861ae-191">You will have to call <xref uid="com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref> and then <xref uid="com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease(Lease)" data-throw-if-not-resolved="false">acquireLease()</xref> again.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> renewLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-192\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>を更新します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-192\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> to be renewed</span></span> </p>"
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-193">true の場合、リースは、その以外の場合は、正常に更新されました</span><span class="sxs-lookup"><span data-stu-id="861ae-193">true if the lease was renewed successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
    href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
    name: acquireLease(Lease lease)
    nameWithType: ILeaseManager.acquireLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease(Lease lease)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-194">この目的のパーティションでリースを取得<xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>です。</span><span class="sxs-lookup"><span data-stu-id="861ae-194">Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</span></span></p>
      <p><span data-ttu-id="861ae-195">別のホストによって既に所有されているリースを取得することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="861ae-195">Note that it is legal to acquire a lease that is already owned by another host.</span></span> <span data-ttu-id="861ae-196">リース スティー リングは、他のホストが開始されたときにパーティションが再配布方法です。</span><span class="sxs-lookup"><span data-stu-id="861ae-196">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span></p>
      <p></p>
    syntax: *ref_2
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.releaseLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: releaseLease(Lease lease)
    nameWithType: InMemoryLeaseManager.releaseLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.releaseLease(Lease lease)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-197">このホストで現在保持されている、リースを付けます。</span><span class="sxs-lookup"><span data-stu-id="861ae-197">Give up a lease currently held by this host.</span></span></p>
      <p><span data-ttu-id="861ae-198">場合は、リースが盗難にあったされたり有効期限が切れて、解放が必要に応じてでありしようとした場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="861ae-198">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> releaseLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: "<p><span data-ttu-id=\"861ae-199\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">リース</xref>を中止します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"861ae-199\">\r\n\r\n  <xref uid=\"com.microsoft.azure.eventprocessorhost._lease\" data-throw-if-not-resolved=\"false\">Lease</xref> to be give up</span></span> </p>"
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-200">リースは、その以外の場合は、正常にリリースされた場合は true。</span><span class="sxs-lookup"><span data-stu-id="861ae-200">true if the lease was released successfully, false if not</span></span> </p>'
  - uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.updateLease(Lease)
    parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
    href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
    name: updateLease(Lease lease)
    nameWithType: InMemoryLeaseManager.updateLease(Lease lease)
    fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease(Lease lease)
    type: Method
    summary: |-
      <p><span data-ttu-id="861ae-201">指定されたリースの情報と、ストアを更新します。</span><span class="sxs-lookup"><span data-stu-id="861ae-201">Update the store with the information in the provided lease.</span></span></p>
      <p><span data-ttu-id="861ae-202">更新するために現在のリースを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="861ae-202">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="861ae-203">リースが盗まれた、または有効期限が切れた、またはリリースを更新できません。</span><span class="sxs-lookup"><span data-stu-id="861ae-203">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="861ae-204">更新プロセス中にリースの有効期限を避けるために、更新プログラムを実行する前にリースを更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="861ae-204">Updating should renew the lease before performing the update to avoid lease expiration during the process.</span></span></p>
      <p></p>
    syntax:
      content: public Future<Boolean> updateLease(Lease lease)
      parameters:
        - id: lease
          type: com.microsoft.azure.eventprocessorhost._lease
          description: <p><span data-ttu-id="861ae-205">新しいリース情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="861ae-205">New lease info to be stored</span></span> </p>
      return:
        type: ec0e250a
        description: '<p><span data-ttu-id="861ae-206">更新後に実行された場合は、正常にされていない場合は true</span><span class="sxs-lookup"><span data-stu-id="861ae-206">true if the updated was performed successfully, false if not</span></span> </p>'