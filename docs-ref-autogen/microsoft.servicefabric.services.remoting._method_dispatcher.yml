### YamlMime:ManagedReference
items:
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher
    id: _method_dispatcher
    parent: microsoft.servicefabric.services.remoting
    children:
      - 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatch(Object,int,Object)'
      - 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync(Object,int,Object,CancellationToken)'
      - microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId()
      - microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName(int)
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: MethodDispatcher
    nameWithType: MethodDispatcher
    fullName: microsoft.servicefabric.services.remoting.MethodDispatcher
    type: Interface
    source:
      remote: &ref_0
        path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
        branch: master
        repo: 'https://msazure.visualstudio.com/One/_git/sf-java'
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 6
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: public interface MethodDispatcher
  - uid: 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatch(Object,int,Object)'
    id: 'dispatch(Object,int,Object)'
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: 'dispatch(Object objectImplementation, int methodId, Object requestBody)'
    nameWithType: 'MethodDispatcher.dispatch(Object objectImplementation, int methodId, Object requestBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch(Object objectImplementation, int methodId, Object requestBody)'
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 12
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: 'public void dispatch(Object objectImplementation, int methodId, Object requestBody)'
      parameters:
        - id: objectImplementation
          type: '79317049'
        - id: methodId
          type: f75371fa
        - id: requestBody
          type: '79317049'
  - uid: 'microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync(Object,int,Object,CancellationToken)'
    id: 'dispatchAsync(Object,int,Object,CancellationToken)'
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: 'dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
    nameWithType: 'MethodDispatcher.dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Object> microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 10
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: 'public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestBody, CancellationToken cancellationToken)'
      parameters:
        - id: objectImplementation
          type: '79317049'
        - id: methodId
          type: f75371fa
        - id: requestBody
          type: '79317049'
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 55aa5245
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId()
    id: getInterfaceId()
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: getInterfaceId()
    nameWithType: MethodDispatcher.getInterfaceId()
    fullName: int microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId()
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 8
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: public int getInterfaceId()
      return:
        type: f75371fa
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName(int)
    id: getMethodName(int)
    parent: microsoft.servicefabric.services.remoting._method_dispatcher
    href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
    langs:
      - java
    name: getMethodName(int methodId)
    nameWithType: MethodDispatcher.getMethodName(int methodId)
    fullName: String microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName(int methodId)
    overload: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName*
    type: Method
    source:
      remote: *ref_0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      startLine: 14
    package: microsoft.servicefabric.services.remoting
    syntax:
      content: public String getMethodName(int methodId)
      parameters:
        - id: methodId
          type: f75371fa
      return:
        type: '26831127'
references:
  - uid: f75371fa
    spec.java:
      - name: int
        fullName: int
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId*
    name: getInterfaceId
    nameWithType: MethodDispatcher.getInterfaceId
    fullName: int microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId
    package: microsoft.servicefabric.services.remoting
  - uid: '79317049'
    spec.java:
      - name: Object
        fullName: Object
  - uid: 55aa5245
    spec.java:
      - name: CompletableFuture<Object>
        fullName: CompletableFuture<Object>
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync*
    name: dispatchAsync
    nameWithType: MethodDispatcher.dispatchAsync
    fullName: CompletableFuture<Object> microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch*
    name: dispatch
    nameWithType: MethodDispatcher.dispatch
    fullName: void microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch
    package: microsoft.servicefabric.services.remoting
  - uid: '26831127'
    spec.java:
      - name: String
        fullName: String
  - uid: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName*
    name: getMethodName
    nameWithType: MethodDispatcher.getMethodName
    fullName: String microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName
    package: microsoft.servicefabric.services.remoting
  - uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    parent: microsoft.servicefabric.services.remoting.builder
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: MethodDispatcherBase
    nameWithType: MethodDispatcherBase
    fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
    type: Class
    summary: <p>クライアントからの要求を適切なインターフェイスと、リモート オブジェクトのメソッドにディスパッチする型を生成するコード ジェネレーターのリモート処理によって使用される基本クラスです。 </p>
    syntax:
      content: public class MethodDispatcherBase
  - uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.getInterfaceId()
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: getInterfaceId()
    nameWithType: MethodDispatcherBase.getInterfaceId()
    fullName: int microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getInterfaceId()
    type: Method
    summary: |-
      <p>インターフェイス Id を使用して、リモート処理インターフェイスを識別します。</p>
      <p></p>
    syntax:
      content: public int getInterfaceId()
      return:
        type: f75371fa
        description: <p>インターフェイス id です。 </p>
  - uid: 'microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.dispatchAsync(Object,int,Object,CancellationToken)'
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: 'dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
    nameWithType: 'MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
    fullName: 'CompletableFuture<Object> microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
    type: Method
    summary: |-
      <p>このメソッドは、リモート オブジェクトによって実装されるインターフェイスの指定したメソッド Id への要求のディスパッチに生成されたメソッドのディスパッチャーによって実装されます。</p>
      <p></p>
    syntax:
      content: 'public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody, CancellationToken cancellationToken)'
      parameters:
        - id: objectImplementation
          type: '79317049'
          description: <p>リモート オブジェクトのインスタンス </p>
        - id: methodId
          type: f75371fa
          description: <p>メソッドの id </p>
        - id: requestMsgBody
          type: '79317049'
          description: <p>要求本文 </p>
        - id: cancellationToken
          type: system.fabric._cancellation_token
      return:
        type: 55aa5245
        description: <p>A <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref>未処理の操作を表すです。 タスクの結果は、メソッドから戻り値です。 </p>
  - uid: system.fabric._cancellation_token
    parent: system.fabric
    href: system.fabric._cancellation_token.yml
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: system.fabric.CancellationToken
    type: Class
    summary: '<p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>操作を取り消す必要がある通知を伝達するために使用します。 インスタンス化して、キャンセル トークンを作成する、 <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref>からキャンセル トークンを管理するオブジェクトを取得、 <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref>メソッドです。 キャンセル トークンをキャンセルの通知を受け取る必要のある操作の任意の数を渡します。 取り消しを開始するトークンを使用することはできません。 所有するオブジェクトを呼び出すと<xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>、キャンセル トークンの取り消されたプロパティの設定を true にします。 通知を受信するオブジェクトは、適切な方法で応答できます。 </p>'
    syntax:
      content: public class CancellationToken
  - uid: 'microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.dispatch(Object,int,Object)'
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: 'dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
    nameWithType: 'MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
    fullName: 'void microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
    type: Method
    summary: |-
      <p>このメソッドは、リモート オブジェクトによって実装されるインターフェイスの指定したメソッド Id に一方向のメッセージのディスパッチに使用します。</p>
      <p></p>
    syntax:
      content: 'public void dispatch(Object objectImplementation, int methodId, Object requestMsgBody)'
      parameters:
        - id: objectImplementation
          type: '79317049'
          description: <p>リモート オブジェクトの実装です。 </p>
        - id: methodId
          type: f75371fa
          description: <p>リモート オブジェクトによって実装されるインターフェイスのメソッドの Id。 </p>
        - id: requestMsgBody
          type: '79317049'
          description: <p>メッセージの本文。 </p>
  - uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.getMethodName(int)
    parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
    href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
    name: getMethodName(int methodId)
    nameWithType: MethodDispatcherBase.getMethodName(int methodId)
    fullName: String microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getMethodName(int methodId)
    type: Method
    syntax:
      content: public String getMethodName(int methodId)
      parameters:
        - id: methodId
          type: f75371fa
      return:
        type: '26831127'